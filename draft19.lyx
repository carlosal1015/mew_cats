#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsbook
\begin_preamble
\usepackage[autoplay,autoresume,loop,draft]{animate}
\usepackage{textcomp}
\usepackage{mathtools}

\definecolor{darklinkcolor}{rgb}{0,0,0.7}
\definecolor{darkcitecolor}{rgb}{0.4,0,0}
\definecolor{greylabel}{rgb}{0.8,0.8,0.8}
\definecolor{softblue}{rgb}{0.3,0.6,0.8}
\definecolor{softgreen}{rgb}{0.3,0.6,0.5}
\definecolor{sagecolor}{rgb}{0.329411764705882, 0.321568627450980, 0.243137254901961}
%\definecolor{sagecolor}{rgb}{0.470588235294118, 0.458823529411765, 0.345098039215686}
%\definecolor{sagecolor}{rgb}{0.611764705882353, 0.600000000000000, 0.450980392156863}
%\definecolor{sagecolor}{rgb}{0.737254901960784, 0.721568627450980, 0.541176470588235}
%\definecolor{sagecolor}{rgb}{0.815686274509804, 0.807843137254902, 0.682352941176471}
%\definecolor{sagecolor}{rgb}{0.925490196078431, 0.921568627450980, 0.874509803921569}
\definecolor{sageerrorcolor}{rgb}{0.8,0,0}
\definecolor{keyboardcolor}{rgb}{0.3,0.3,0.3}

\newcommand\lacol{\color{greylabel}}

\newcommand\sageinput[1]{%
\hangindent=2.8em\texttt{\textcolor{blue}{sage:}}\texttt{\ #1}%
}
\newcommand\sagemoreinput[1]{%
\hangindent=2.8em\texttt{\textcolor{blue}{\ \ \ \ \ }}\texttt{\ #1}%
}
\newcommand\sageoutput[1]{%
\texttt{\textcolor{blue}{#1}}%
}
\newcommand\sageerror[1]{%
\texttt{\textcolor{sageerrorcolor}{#1}}%
}
\newcommand\sageindent{\texttt{\ \hspace{4em}}}
\newcommand\pseudocodestatement[1]{%
{\ #1}%
}

\newcommand\mex{\ensuremath{\mathrm{mex}}}

\def\online{online}
\def\deadtree{deadtree}
\def\onlineordeadtree{online}
%\def\onlineordeadtree{deadtree}
\end_preamble
\use_default_options true
\begin_removed_modules
eqs-within-sections
figs-within-sections
\end_removed_modules
\begin_modules
theorems-ams
theorems-ams-extended
algorithm2e
theorems-named
\end_modules
\maintain_unincluded_children false
\begin_local_layout
Format 49
Style SageInteraction
BottomSep	1
Category	"Sage Interaction"
InPreamble	1
KeepEmpty	1
LabelFont
Color	Blue
EndFont
LabelString	"Sage Interaction"
LabelBottomSep	-1
LabelType	Centered
LatexName	sageinteraction
LatexType	Environment
LeftMargin	"Sage Interaction"
Preamble
\usepackage{framed}
\newenvironment{sageinteraction}%
{\begin{center}\begin{minipage}[t]{0.8\columnwidth}%
%\definecolor{shadecolor}{rgb}{0.9,0.9,1.0}%
%\definecolor{shadecolor}{rgb}{0.734375,0.71875,0.5390625}%
%\definecolor{shadecolor}{rgb}{0.8156862745,0.807843,0.6823529}%
%\definecolor{shadecolor}{rgb}{0.854901960784314, 0.843137254901961, 0.745098039215686}
\definecolor{shadecolor}{rgb}{0.890196078431372, 0.882352941176471, 0.807843137254902}
\begin{shaded}}%
{\end{shaded}\end{minipage}\end{center}}
EndPreamble
RightMargin	"MMMM"
Spellcheck	False
TopSep	0.5
End
Style SageInput
Align	Left
Category	"Sage Interaction"
LabelFont
Family	Typewriter
Color	Blue
EndFont
LabelSep	"M"
LabelString	"sage: "
LabelType	Static
LatexName	sageinput
LatexType	Command
Argument	1
MenuString	"Input text"
Mandatory	1
Font
Family	Typewriter
Color	Black
EndFont
AutoInsert	1
EndArgument
LeftMargin	"MMsage:"
Spellcheck	False
TextFont
Color	Black
Family	Typewriter
EndFont
End
Style SageMoreInput
Align	Left
Category	"Sage Interaction"
LabelFont
Family	Typewriter
Color	Blue
EndFont
LabelSep	"M"
LabelString	"sage: "
LabelType	Static
LatexName	sagemoreinput
LatexType	Command
Argument	1
MenuString	"Input text"
Mandatory	1
Font
Family	Typewriter
Color	Black
EndFont
AutoInsert	1
EndArgument
LeftMargin	"MMsage:"
Spellcheck	False
TextFont
Color	Black
Family	Typewriter
EndFont
End
Style SageOutput
Align	Left
Category	"Sage Interaction"
LabelFont
Family	Roman
Color	Black
Shape	Italic
EndFont
LabelSep	"M"
LabelString	"output:"
LabelType	Static
LatexName	sageoutput
LatexType	Command
Argument	1
MenuString	"Output text"
Mandatory	1
AutoInsert	1
EndArgument
LeftMargin	"output:"
Spellcheck	False
TextFont
Color	Blue
Family	Typewriter
EndFont
End
Style SageError
Align	Left
Category	"Sage Interaction"
LabelFont
Family	Roman
Color	Red
Shape	Italic
EndFont
LabelSep	"M"
LabelString	"error:"
LabelType	Static
LatexName	sageerror
LatexType	Command
Argument	1
MenuString	"Error text"
Mandatory	1
AutoInsert	1
EndArgument
LeftMargin	"error:"
Spellcheck	False
TextFont
Color	Red
Family	Typewriter
EndFont
End
Style Pseudocode
BottomSep	1
Category	"Pseudocode"
InPreamble	1
KeepEmpty	1
LabelFont
Color	Blue
EndFont
LabelString	"Pseudocode"
LabelBottomSep	-1
LabelType	Centered
LatexName	pseudocode
LatexType	Environment
LeftMargin	"Pseudocode"
Preamble
\usepackage{framed}
\newenvironment{pseudocode}%
{\begin{center}\begin{minipage}[t]{0.8\columnwidth}%
\definecolor{shadecolor}{rgb}{0.9,0.9,1.0}
%\definecolor{shadecolor}{rgb}{0.734375,0.71875,0.5390625}%
\begin{shaded}}%
{\end{shaded}\end{minipage}\end{center}}
EndPreamble
RightMargin	"MMMM"
Spellcheck	False
TopSep	0.5
End
InsetLayout "Flex:Sage Word"
LyxType	custom
LatexType	command
LatexName	sageword
LabelString	"sage word"
Font
Color	Green
Family	Typewriter
EndFont
Preamble
\newcommand\sageword[1]{{\texttt{\color{sagecolor}#1}}}
EndPreamble
Spellcheck	0
ContentAsLabel	1
ForcePlain	1
MultiPar	0
End
InsetLayout "Flex:Keyboard Press"
LyxType	custom
LatexType	command
LatexName	keyboardpress
LabelString	"kbd"
Font
Family	Typewriter
EndFont
Preamble
\newcommand\keyboardpress[1]{{\texttt{\color{keyboardcolor}#1}}}
EndPreamble
Spellcheck	0
ContentAsLabel	1
ForcePlain	1
MultiPar	0
End
InsetLayout "Flex:Sage Constant"
LyxType	custom
LatexType	command
LatexName	sageconstant
LabelString	"sage cons"
Font
Color	Green
Family	Typewriter
Shape	Italic
EndFont
Preamble
\newcommand\sageconstant[1]{{\texttt{\textit{\color{sagecolor}#1}}}}
EndPreamble
Spellcheck	0
ContentAsLabel	1
ForcePlain	1
MultiPar	0
End
InsetLayout "Flex:Boolean Constant"
LyxType	custom
LatexType	command
LatexName	boolconstant
LabelString	"bool const"
Font
Color	Green
Family	Roman
Shape	Italic
EndFont
Preamble
\newcommand\boolconstant[1]{{\textit{#1}}}
EndPreamble
Spellcheck	0
ContentAsLabel	1
ForcePlain	1
MultiPar	0
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "md-garamond" "default"
\font_sans "uop" "default"
\font_typewriter "beramono" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command makeindex -c
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=darklinkcolor,urlcolor=darklinkcolor,citecolor=darkcitecolor,naturalnames=true,hypertexnames=false"
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author -1457430218 "John Perry" john.perry@usm.edu
\author 1098611558 "John Perry"
\end_header

\begin_body

\begin_layout Title
Mathematical Explorations With Computer Algebra Technology
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename graphics/mew_cats/mews_parabola_mouse.png
	lyxscale 20
	width 3in

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Peering into Advanced Mathematics through Sage-colored Glasses
\end_layout

\end_inset


\end_layout

\begin_layout Author
John Harris,
\begin_inset Newline newline
\end_inset

Karen Kohl, and
\begin_inset Newline newline
\end_inset

John Perry,
\begin_inset Newline newline
\end_inset

all employed at the University of Southern Mississippi
\begin_inset Newline newline
\end_inset

(at least until the Provost's Office reads this debacle)
\end_layout

\begin_layout Subjectclass
97U30, 97N80
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
Copyright 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcopyright
\backslash
 
\end_layout

\end_inset

2016–2021 John Harris, Karen Kohl, and John Perry
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
ISBN 978-1-365-66129-7 (black-and-white) 
\begin_inset ERT
status open

\begin_layout Plain Layout

978-1-365-
\end_layout

\end_inset

45825-5 (color)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Draft 
\begin_inset Formula $2\cdot3^{2}$
\end_inset

, June 
\begin_inset Formula $\left(x+1\right)\left(x+5\right)$
\end_inset

, where 
\begin_inset Formula $x$
\end_inset

 is the meaning of life, the universe, and everything
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "License CC-BY-SA"
target "https://creativecommons.org/licenses/by-sa/4.0/"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter*
Acknowledgments
\end_layout

\begin_layout Standard
\align block
The authors would like to thank:
\end_layout

\begin_layout Itemize
\align block
The Office of the Provost at the University of Southern Mississippi, who
 in 2016 supported the creation of this work with a Summer Grant for the
 Improvement for Instruction.
\end_layout

\begin_layout Itemize
\align block
William Stein and various Sage developers and users for moral support and
 occasional financial support to attend Sage Days workshops.
\end_layout

\begin_layout Itemize
\align block
All the developers who have contributed to the Sage project, whether directly
 or indirectly.
\end_layout

\begin_layout Itemize
Amber Desrosiers and Candice Bardwell Mitchell suffered through an early
 draft of this text, and found more typographical errors than we care to
 admit.
\end_layout

\begin_layout Itemize
Valerio de Angelis kindly pointed out a large number of typographical errors,
 and suggested an improvement to a joke on infinite loops.
 He also contributed a few of the labs in the Encyclopædia Laboratorica.
\end_layout

\begin_layout Itemize
\align block
Two of us have spouses and children that deserve apologies more than thanks,
 two of us have cats that deserve whatever it is that cats deserve (everything?)
, and one of us has a bunny and a turtle, both of which deserve more attention.
\end_layout

\begin_layout Standard
In addition:
\end_layout

\begin_layout Itemize
The image of Glenda, the Plan 9 Bunny on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "img: glenda"

\end_inset

 was downloaded from 
\begin_inset CommandInset href
LatexCommand href
name "Bell Labs' Plan 9 website"
target "http://plan9.bell-labs.com/plan9/glenda.html"
literal "false"

\end_inset

 and is used according to the terms given.
\end_layout

\begin_layout Itemize
The image of Rabbit Island on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "img: rabbit island"

\end_inset

 was taken by 
\begin_inset CommandInset href
LatexCommand href
name "Kim Bui"
target "https://flic.kr/p/otnhcN"
literal "false"

\end_inset

 and is used under a specially-granted license (
\begin_inset CommandInset href
LatexCommand href
name "CC BY-SA 2.0"
target "https://creativecommons.org/licenses/by-sa/2.0/"
literal "false"

\end_inset

).
\end_layout

\begin_layout Chapter*
Preface
\end_layout

\begin_layout Section*
Why did you write this text?
\end_layout

\begin_layout Standard
The main goal of this text is to justify a partial summer salary extended
 us by our employer's Provost, who doubtless will never err in this fashion
 again.
\end_layout

\begin_layout Section*
No, really, why did you write this text?
\end_layout

\begin_layout Standard
Our institution offers majors a class on problem solving with technology
 titled, 
\emph on
Mathematical Computation.

\emph default
 We don't find a text that fits its unique character.
 We believe in the course and think it's a good idea; many of the students
 who take it end up agreeing.
\begin_inset Foot
status open

\begin_layout Plain Layout
This agreement often occurs only after they experience an internship or
 first job, but that counts!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Originally the class used a textbook based on a different computer algebra
 system, but for reasons listed below, we switched to Sage.
 Sage's interface relies on Python, so we used a very good book on Python
 programming for a while, but there's only so far a book on Python programming
 will take you with Sage.
\end_layout

\begin_layout Standard
Hence this book.
 With any luck, the resulting text will spring up like a fungus, here and
 there, impervious to eradication, until it comes to dominate the landscape
 of mathematics education.
\end_layout

\begin_layout Section*
What instructional value does this text offer?
\end_layout

\begin_layout Standard
We would like to think this book would be useful for any situation where
 an individual is moving from 
\begin_inset Quotes eld
\end_inset

high school
\begin_inset Quotes erd
\end_inset

 mathematics, in which we include basic calculus, to 
\begin_inset Quotes eld
\end_inset

university
\begin_inset Quotes erd
\end_inset

 mathematics, which includes intermediate calculus and a lot of stuff besides.
 Many of our students struggle with the transition from the primarily concrete,
 computational mathematics they experienced in their youth, to the increasingly
 abstract, theoretical mathematics they encounter in higher mathematics.
\end_layout

\begin_layout Standard
Technology has become an indispensable aspect of most mathematics education.
 The amount of computing power in today's cell phones is several orders
 of magnitude more than home computers had in the authors' childhood — and
 most families could not even 
\emph on
afford
\emph default
 a home computer.
 
\series bold
\emph on
Ours is a magical world,
\series default
\emph default
 yet students are often reluctant to 
\emph on
play
\emph default
 in this world.
 If they don't know how to solve a problem right away, they think something's
 wrong.
 We can teach them about groups (say) and give them some examples, but students
 are often too reluctant to explore the examples on their own.
\end_layout

\begin_layout Section*
Why Sage?
\end_layout

\begin_layout Standard
We prefer 
\begin_inset CommandInset href
LatexCommand href
name "Sage"
target "https://www.sagemath.org/"
literal "false"

\end_inset

 for a number of reasons:
\end_layout

\begin_layout Itemize
Sage is 
\begin_inset Quotes eld
\end_inset

free as in beer.
\begin_inset Quotes erd
\end_inset

 The authors work at a university in one of the nation's materially more
 modest states; while many computer algebra systems' student editions are
 arguably affordable, they are nevertheless a nontrivial addition to the
 high cost our students already bear.
\end_layout

\begin_layout Itemize
Sage is 
\begin_inset Quotes eld
\end_inset

free as in speech.
\begin_inset Quotes erd
\end_inset

 Instructors can show talented students parts of the code, and encourage
 them to get involved.
 There are doubtless a number of good undergraduate research projects that
 could lead to contributions to the Sage codebase.
 Talented instructors can contribute code in ways that improve Sage's use
 in education.
 For that matter, two of us have shown that even talent
\emph on
less
\emph default
 instructors can contribute code to Sage.
 Don't be shy: the community is supportive!
\end_layout

\begin_layout Itemize
Sage's interface relies on 
\begin_inset CommandInset href
LatexCommand href
name "Python"
target "http://www.python.org/"
literal "false"

\end_inset

, an industry-standard programming language 
\change_deleted 1098611558 1624140089
that remains 
\change_unchanged
in high demand among employers.
 Teaching students Sage means that we teach them quite a bit of Python
\change_deleted 1098611558 1624140099
,
\change_unchanged
 as well
\change_inserted 1098611558 1624140124
, increasing their employment prospects
\change_unchanged
.

\change_deleted 1098611558 1624140112
 Most students who graduate with a degree in mathematics won't land jobs
 that require them to use anything beyond the Calculus, and probably not
 even that.
\change_unchanged

\end_layout

\begin_layout Section*
Aren't there already some good references on Sage?
\end_layout

\begin_layout Standard
Yes, and that's the point; they are 
\emph on
references
\emph default
 for mathematicians and students to learn 
\emph on
Sage
\emph default
.
 This text aims to help students learn 
\emph on
mathematics
\emph default
 via Sage.
 This puts it into a different niche, which we hope will prove not only
 profitable,
\begin_inset Foot
status open

\begin_layout Plain Layout
Stop laughing.
\end_layout

\end_inset

 but also useful,
\begin_inset Foot
status open

\begin_layout Plain Layout
Really.
 Stop laughing.
\end_layout

\end_inset

 both to read and to edit.

\change_deleted 1098611558 1624140228
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 source to this material will be available online at no charge; users can
 download, edit, and revise it as they find fitting.
\end_layout

\begin_layout Standard

\change_deleted 1098611558 1624140228
Editing the labs to taste is advisable in an age where a nontrivial number
 of students has learned that outsourcing production to an online search
 engine provides pre-fabricated solutions more efficiently than relying
 on their in-house computational engines.
 We still offer a large number of labs, so even if you don't modify any
 of them to taste, the course can vary according to research interests or
 educational taste.
\end_layout

\begin_layout Standard

\change_deleted 1098611558 1624140228
If you harbor a particular hostility to your students, feel free to contact
 the authors.
 We can indicate which labs have proven especially difficult in practice.
\change_unchanged

\end_layout

\begin_layout Section*
How do 
\emph on
you
\emph default
 typically use this text?
\end_layout

\begin_layout Standard
No lab section is attached to the course at our institution, so we tend
 to offer in-class lab days; proceed in some semblance of the order provided
 here; and assign textbook questions, labs, and tests.
\change_inserted 1098611558 1624140231

\end_layout

\begin_layout Standard

\change_inserted 1098611558 1624140264
We use different labs, according to the instructor and the year.
 We also modify the labs on occasion.
 Editing the labs to taste is advisable in an age where a nontrivial number
 of students has learned that outsourcing production to an online search
 engine provides pre-fabricated solutions more quickly than their in-house
 computational engines.
 Even if you don't modify any of them to taste, the large number of labs
 means that the course can vary according to research interests or educational
 taste.
\end_layout

\begin_layout Standard

\change_inserted 1098611558 1624140231
If you harbor a particular hostility to your students, feel free to contact
 the authors.
 We can indicate which labs have proven especially difficult in practice.
\change_unchanged

\end_layout

\begin_layout Section*
Any last words?
\change_inserted 1098611558 1624140318

\end_layout

\begin_layout Standard

\change_inserted 1098611558 1624140384
After five years of development, this text and its source were released
 in 2021 on a public platform for dissemination.
\change_unchanged

\end_layout

\begin_layout Subsection*
Regarding errata
\end_layout

\begin_layout Standard
Mathematical lore relates that a professor once set out to write a textbook
 free from error.
 A reviewer of the resulting text observed drily that the author did 
\begin_inset Quotes eld
\end_inset

rather well: the first error appears on page 9.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Our goals are more modest: we promise only 
\change_inserted 1098611558 1624140296
that any 
\change_unchanged
errors 
\change_inserted 1098611558 1624140300
the reader finds will 
\change_unchanged
range from the merely typographical to the outright mendacious.
\end_layout

\begin_layout Itemize
For errors typographical, we ask the reader to contact the maintainers.
 If one of the authors' publication record is any kind of indicator, the
 typographical corrections will have typographical errors.
 
\emph on
Caveat lector.
\end_layout

\begin_layout Itemize
The errors of mendacity have the merit of sounding better than the truth,
 so in the spirit of the times we decided to include them.
\begin_inset Foot
status open

\begin_layout Plain Layout
At least one outright mendacity is disclaimed as such, and the rationale
 for the mendacity is explained.
\end_layout

\end_inset

 We leave it to the reader to sort the wheat from the chaff, though we assure
 the dedicated reader that there is more wheat than chaff.
\begin_inset Foot
status open

\begin_layout Plain Layout
Unless that claim, too, is mendacity.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The reader interested in historical development of this text may wish to
 visit
\end_layout

\begin_layout Standard
\align center

\family typewriter
\begin_inset CommandInset href
LatexCommand href
name "www.math.usm.edu/dont_panic/"
target "http://www.math.usm.edu/dont_panic/"
literal "false"

\end_inset


\end_layout

\begin_layout Subsection*
Is there a hardcopy?
\end_layout

\begin_layout Standard
No.
 There used to be, but color textbooks are expensive, and you lose the experienc
e of the animations embedded in the text.
 If you'd like a hardcopy, feel free to print one, preferably using a color
 printer on high-quality paper.
\end_layout

\begin_layout Part
Lessons
\end_layout

\begin_layout Chapter
Background
\end_layout

\begin_layout Quotation
A thing they had never needed before became a necessity.
 (Narrator, 
\begin_inset CommandInset citation
LatexCommand cite
key "TheGodsMustBeCrazy"
literal "true"

\end_inset

)
\end_layout

\begin_layout Standard
To explore the world of mathematics, you can't just read about it; you have
 to 
\emph on
engage
\emph default
 it.
 Some people are gifted with enough confidence and/or aptitude that they
 take to this on their own; some were lucky enough to be brought up well,
 and from their youth are accustomed to engaging the world of mathematics.
\end_layout

\begin_layout Standard
Most are less lucky, and while they may find the wider world of mathematics
 intriguing, they struggle to make their way through new and unfamiliar
 territory.
 This text aims to encourage you to explore the world of higher mathematics
 with the help of a computer algebra system, relying on a particular system
 named Sage.
 We will encourage you to experiment with problems and form conjectures
 about their solutions.
 Sometimes we will encourage you to use the experimentation to formulate
 an explanation as to why the conjecture is, in fact, true.
\end_layout

\begin_layout Standard
But to use computers effectively, you need to learn how to program.
\end_layout

\begin_layout Section*
Is this just another programming textbook?
\end_layout

\begin_layout Standard
No.
\end_layout

\begin_layout Subsection*
Can you be more specific?
\end_layout

\begin_layout Standard
Yes.
\end_layout

\begin_layout Subsection*
[Grumble.] Please go into some detail.
\end_layout

\begin_layout Standard
This text is about 
\emph on
mathematics,
\emph default
 which itself is about
\emph on
 solving
\emph default
 
\emph on
problems.

\emph default
 That's important enough to highlight, so that even the skimmers will notice
 it.
\end_layout

\begin_layout Standard
\align center

\series bold
\emph on
Mathematics is a tool for solving problems.
\end_layout

\begin_layout Standard
\noindent
In particular, we want to introduce you to ideas and techniques of higher
 mathematics through problems that are arguably approached best with a computer,
 because
\end_layout

\begin_layout Itemize
they are long;
\end_layout

\begin_layout Itemize
they are repetitive or tedious; and/or
\end_layout

\begin_layout Itemize
they require experimentation.
\end_layout

\begin_layout Standard
Computers require instructions, and a group of instructions is called a
 
\emph on

\begin_inset CommandInset href
LatexCommand href
name "program"
target "https://en.wikipedia.org/wiki/Computer_program"
literal "false"

\end_inset

.
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
If you are reading this as an electronic document, then from time to time
 you will notice text in a different color.
 If you click on it, you will find it links through the internet to additional
 information, very little of which is due to the authors of this text and,
 as such, is probably much more reliable and useful.
 We hope you follow these links and familiarize yourself with that information
 — that's why we included it! — but strictly speaking it isn't necessary.
\end_layout

\end_inset

 So we do study 
\emph on
programming,
\emph default
 but in reference to a specific goal: namely, solving problems in mathematics.
 That makes this text different from 
\begin_inset Quotes eld
\end_inset

programming
\begin_inset Quotes erd
\end_inset

 textbooks, which study programming in reference to a different goal: namely,
 solving problems in computer science.
 Again, that distinction is important enough to highlight, so that even
 the skimmers will notice it.
\end_layout

\begin_layout Standard
\align center

\series bold
\emph on
We study programming in order to solve math problems.
\end_layout

\begin_layout Subsection*
Why program? If I wanted to write programs I'd major in computer science.
\end_layout

\begin_layout Standard
To start with, some problems are too tough to do by hand, so you 
\emph on
have
\emph default
 to use a computer.
 The purpose of this text is to start you down this path 
\emph on
without
\emph default
 turning you into a computer science major.
 It will not only introduce you to some tools in a computer algebra system
 that help you compute, it will encourage you to take steps along the path
 of becoming a mathematical pioneer.
 To solve the problems we present, you will need to stop at a particular
 feature just outside your neighborhood and acquaint yourself with it a
 little more than you might in the absence of our encouragement.
 In some cases, we will even lead you back over land you traveled already
 and ask you to re-examine something a little more carefully.
 In short, and in repetition, this text is about exploring the world of
 higher mathematics, with a computer's help.
\end_layout

\begin_layout Standard
On the one hand, computers don't understand human languages.
 Humans are intuitive and poetic, resorting to figurative and abstract language.
 Computers understand none of that; 
\begin_inset CommandInset href
LatexCommand href
name "they really understand one thing only"
target "https://en.wikipedia.org/wiki/A_Symbolic_Analysis_of_Relay_and_Switching_Circuits"
literal "false"

\end_inset

: 
\series bold
on
\series default
 and 
\series bold
off
\series default
.
 Everything your cell phone, laptop, or desktop does involves a clever arrangeme
nt of switches by human beings who are well-trained in the art of directing
 electric current to the right place at the right time.
\end_layout

\begin_layout Standard
On the other hand, most humans don't understand the computer's language
 of 
\series bold
on
\series default
 and 
\series bold
off
\series default
.
 Reducing every problem to these two symbols has been extremely effective,
 but it's uncomfortable to humans (if only because it's so 
\emph on
tedious!
\emph default
).
\end_layout

\begin_layout Standard
Learning to program gives you control over the computer's circuitry, and
 allows you to work at a level that is much more comfortable.
 Even the experts typically work with more abstract interfaces that are
 themselves converted to 
\series bold
on
\series default
 and 
\series bold
off
\series default
 signals in several stages.
 Learning to program also gives you a deeper understanding of computer technolog
y, and an appreciation for the amount of work that goes into building this
 magical world we live in, where you can speak into a little box in your
 hand and be heard by someone half a world away.
\end_layout

\begin_layout Subsection*
What kinds of programming languages are there?
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "page: interpreted v. compiled languages"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
language!interpreted v.
\begin_inset space ~
\end_inset

compiled v.
\begin_inset space ~
\end_inset

bytecode
\end_layout

\end_inset

Without getting into too much detail, there are three types of computer
 programming languages available today:
\end_layout

\begin_layout Itemize
In an 
\begin_inset CommandInset href
LatexCommand href
name "interpreted programming language"
target "https://en.wikipedia.org/wiki/Interpreted_language"
literal "false"

\end_inset

, the computer reads a file that contains commands in the language.
 It translates each symbol, and executes some sequence of commands based
 on that symbol.
 (Here, 
\begin_inset Quotes eld
\end_inset

symbol
\begin_inset Quotes erd
\end_inset

 can include words as well as numbers and abstract characters.) It then proceeds
 to the next symbol, eventually forgetting its translation of the previous
 one.
 Examples of interpreted languages include 
\begin_inset CommandInset href
LatexCommand href
name "BASIC"
target "https://en.wikipedia.org/wiki/BASIC"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Python"
target "http://www.python.org/"
literal "false"

\end_inset

, and the 
\begin_inset Quotes eld
\end_inset

shell
\begin_inset Quotes erd
\end_inset

 languages of command-line prompts.
\end_layout

\begin_layout Itemize
In a 
\begin_inset CommandInset href
LatexCommand href
name "compiled programming language"
target "https://en.wikipedia.org/wiki/Compiled_language"
literal "false"

\end_inset

, the computer reads a file that contains commands in the language.
 It translates each symbol, but instead of executing any commands, it records
 the translation into 
\series bold
on
\series default
 and 
\series bold
off
\series default
 signals and stores them in a new file, usually called an 
\emph on
executable.

\emph default
 (We write 
\begin_inset Quotes eld
\end_inset

usually
\begin_inset Quotes erd
\end_inset

 because it sometimes produces a 
\emph on
library
\emph default
 instead, depending on the programmer's request.) Examples of compiled languages
 include 
\begin_inset CommandInset href
LatexCommand href
name "Fortran"
target "https://en.wikipedia.org/wiki/Fortran"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "C"
target "https://en.wikipedia.org/wiki/C_(programming_language)"
literal "false"

\end_inset

/
\begin_inset CommandInset href
LatexCommand href
name "C++"
target "https://en.wikipedia.org/wiki/C%2B%2B"
literal "false"

\end_inset

, and 
\begin_inset CommandInset href
LatexCommand href
name "Go"
target "https://golang.org/"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Before describing the third type of language, let's mention some advantages
 and disadvantages of each type.
 Interpreted languages are by nature typically much, much slower than compiled
 languages, because the computer must re-translate each symbol, regardless
 of how many times it has translated it before.
 (This is something of an oversimplification, but neither is it that far
 from the truth.) On the other hand, interpreted languages are typically
 much more interactive and flexible than compiled languages, to the point
 that many users never write an actual program for them, but merely issue
 one command at a time.
\end_layout

\begin_layout Standard
Similarly, the nature of compiled languages means that the precise 
\series bold
on
\series default
 and 
\series bold
off
\series default
 signals are tied to a particular architecture, one reason programs compiled
 to run on a Windows device won't run on Macintosh or Linux.
 C++ developers have to re-compile each program for a different architecture,
 and for many programs this becomes quite difficult, especially if the program
 relies heavily on Windows' particular graphical interface.
 As a result, interpreted languages can be much more 
\begin_inset Quotes eld
\end_inset

portable,
\begin_inset Quotes erd
\end_inset

 which means you can simply copy them onto another machine.
 Python programs are especially famous for their portability.
 It's arguable that Microsoft Corporation's success is due primarily to
 its brilliant and ubiquitous BASIC interpreter for home computers of the
 late 70s and early 80s; it lives on today as Visual BASIC.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Bytecode languages"
target "https://en.wikipedia.org/wiki/Bytecode"
literal "false"

\end_inset

 seek to straddle the gap between the two.
 In this case the computer reads a file that contains commands in the language,
 and translates each symbol, but not into the 
\series bold
on
\series default
 and 
\series bold
off
\series default
 signals native to the computer's architecture.
 Rather, it translates them into signals designed for an abstract computer
 called a 
\emph on
virtual machine,
\emph default
 then stores them into an executable or library that will only work on computers
 that contain programs that understand the virtual machine's signals.
 Notable bytecode languages include 
\begin_inset CommandInset href
LatexCommand href
name "Pascal"
target "https://en.wikipedia.org/wiki/UCSD_Pascal"
literal "false"

\end_inset

,
\begin_inset Foot
status open

\begin_layout Plain Layout
In its original incarnations, Pascal was translated to a similar idea called
 P-code, later into bytecode proper.
\end_layout

\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "Java"
target "https://en.wikipedia.org/wiki/Java_(programming_language)"
literal "false"

\end_inset

, and the .NET languages' 
\begin_inset CommandInset href
LatexCommand href
name "Common Language Runtime"
target "https://en.wikipedia.org/wiki/Common_Language_Runtime"
literal "false"

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
Many interpreted languages are now compiled 
\begin_inset Quotes eld
\end_inset

incrementally.
\begin_inset Quotes erd
\end_inset

 They save each command's interpretation, and as they progress during execution,
 check to see whether each new command has already been interpreted.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because the executables and libraries are not in the computer's own signals,
 bytecode languages are technically a special kind of interpreted language,
 and their reliance on a virtual machine means they are theoretically slower
 than compiled languages.
 In practice, the penalty is usually quite small, because the virtual machine's
 signals are designed to be translated very easily into an actual computer's
 signals.
 Modern techniques make them so efficient that some bytecode languages frequentl
y outperform many compiled languages.
 Reliance on the abstract virtual machine means bytecode languages are highly
 portable; we wrote above that the executables work 
\begin_inset Quotes eld
\end_inset

only
\begin_inset Quotes erd
\end_inset

 on computers that contain programs that understand the virtual machine's
 signals, but that also means they run on 
\begin_inset Quotes eld
\end_inset

any
\begin_inset Quotes erd
\end_inset

 computer with a program that understands the virtual machine's signals.
 Java's popularity — it once seemed impossible to find a webpage without
 a Java applet — was due to its 
\begin_inset Quotes eld
\end_inset

Write Once, Run Anywhere
\begin_inset Quotes erd
\end_inset

 philosophy, which depended on its virtual machine capabilities.
\end_layout

\begin_layout Subsection*
Which of these language types do we use in this text?
\end_layout

\begin_layout Standard
All of them, in fact.
\end_layout

\begin_layout Standard
The primary programming language in Sage is 
\emph on
Python,
\emph default
 which we listed above as an interpreted language.
 Sage and Python are not quite the same, though; Sage programs will not
 work in plain, vanilla Python, and some Python features are different in
 Sage.
\end_layout

\begin_layout Standard
You can sometimes compile Sage programs using a program 
\begin_inset CommandInset href
LatexCommand href
name "Cython"
target "http://www.cython.org/"
literal "false"

\end_inset

; we cover that near the end of the text.
 However, 
\begin_inset Quotes eld
\end_inset

Cythonized
\begin_inset Quotes erd
\end_inset

 Sage will not stand on its own; you have to run it inside a Sage environment.
\end_layout

\begin_layout Standard
As you will learn below, Sage is actually assembled from a large number
 of separate parts.
 Some of them are written with Java, which means you are using a bytecode
 language, though you won't actually write any Java programs.
\end_layout

\begin_layout Section*
What is this Sage thing you keep yapping about?
\end_layout

\begin_layout Standard
Sage is a free, open-source computer algebra system.
\end_layout

\begin_layout Subsection*
What is a 
\begin_inset Quotes eld
\end_inset

computer algebra system
\begin_inset Quotes erd
\end_inset

?
\end_layout

\begin_layout Standard
Traditionally, there have been three major kinds of large-scale mathematical
 software packages:
\end_layout

\begin_layout Itemize

\emph on
Numerical computing systems
\emph default
 aim for fast computation, relying typically on 
\begin_inset Quotes eld
\end_inset

floating point
\begin_inset Quotes erd
\end_inset

 numbers.
 We won't go into the details right now, but you can think of floating point
 as a kind of 
\begin_inset Quotes eld
\end_inset

accurate estimation,
\begin_inset Quotes erd
\end_inset

 similar to the use of significant digits in the sciences.
 The science behind numerical computing is typically the province of 
\emph on
numerical analysis
\emph default
.
 Almost everyone in the developed world has used a numerical computing system
 at some point by turning to a calculator.
 Numerical software packages include 
\begin_inset CommandInset href
LatexCommand href
name "MATLAB"
target "http://www.mathworks.com/products/matlab/"
literal "false"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Octave"
target "http://www.gnu.org/software/octave/"
literal "false"

\end_inset

.
\end_layout

\begin_layout Itemize

\emph on
Statistical software packages
\emph default
 are a special kind of numerical computing system that focus on special
 tools proper to statistical analysis.
 Examples include 
\begin_inset CommandInset href
LatexCommand href
name "SAS"
target "http://www.sas.com/"
literal "false"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "the R project"
target "https://www.r-project.org"
literal "false"

\end_inset

.
\end_layout

\begin_layout Itemize

\emph on
Computer algebra systems
\emph default
 aim for 
\emph on
exact
\emph default
 computation, even if this comes at the expense of the speed one associates
 with numerical systems.
 Rather than manipulate approximate values, computer algebra systems manipulate
 symbols that represent exact values: they don't view 
\begin_inset Formula $\pi$
\end_inset

 as a decimal number but as a symbol with the properties mathematics associates
 to it, and they allow us to manipulate expressions that involve variables.
 Because of this, the science behind computer algebra systems is called
 
\emph on
symbolic computation,
\emph default
 
\emph on
computer algebra,
\emph default
 or 
\emph on
computational algebra
\emph default
.
 A few of the more expensive calculators use symbolic computation, but typically
 one works with a software package like 
\begin_inset CommandInset href
LatexCommand href
name "Maxima"
target "http://maxima.sourceforge.net/"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Maple"
target "http://www.maplesoft.com/"
literal "false"

\end_inset

, or Sage.
\end_layout

\begin_layout Standard
Why would one sacrifice exactness for the approximate values of a numerical
 system? The main reason is 
\emph on
speed!
\emph default
 By sacrificing a small amount of precision, a numerical system can easily
 work with both large and small numbers, vectors, and matrices, all without
 too much trouble; it is not uncommon to work with hundreds or even thousands
 of variables in a system of equations.
\end_layout

\begin_layout Standard
For example, what happens if you add the fractions 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

, 
\begin_inset Formula $\nicefrac{1}{3}$
\end_inset

, 
\begin_inset Formula $\nicefrac{1}{5}$
\end_inset

, and 
\begin_inset Formula $\nicefrac{1}{7}$
\end_inset

? Each of them requires only two digits to write (numerator and denominator),
 but the exact sum, 
\begin_inset Formula $\nicefrac{247}{210}$
\end_inset

, requires six digits — a 300% increase in size! If you turn to floating
 point numbers with at most 4-digits, the sum becomes instead
\begin_inset Formula 
\[
0.5000+0.3333+0.2000+0.1429=1.176.
\]

\end_inset

The sum is no larger than the original numbers.
 True, it's a 
\emph on
little
\emph default
 bit wrong, but the error is less than 
\begin_inset Formula $\nicefrac{1}{500}$
\end_inset

; that's 
\emph on
much
\emph default
 more accurate than most day-to-day tasks need.
\end_layout

\begin_layout Standard
The rapid growth in size is one reason people generally dislike fractions;
 no one likes to work with objects whose complexity grows quickly.
 In this case, what's true about people is true about computers, too; if
 you work with a problem that requires division of integers in Sage, you
 will almost certainly encounter a massive slowdown as the fractions become
 complicated and, therefore, more difficult for the computer to handle.
\end_layout

\begin_layout Standard
In that case, why would anyone bother with symbolic computation and exact
 values? For many problems, the inaccuracies of floating point computation
 makes it absolutely unsuitable.
 This is especially true when 
\emph on
division
\emph default
 is an inescapable part of the problem.
\end_layout

\begin_layout Standard
For example, suppose the computer has to divide by the 4-digit floating
 point number 
\begin_inset Formula $0.0001$
\end_inset

.
 The resulting quotient grows very large.
 Yet it's entirely possible that 
\begin_inset Formula $0.0001$
\end_inset

 is the result of a floating-point error, and the correct value is actually
\begin_inset space ~
\end_inset

0.
 As you surely know by know, division by
\begin_inset space ~
\end_inset

0 is 
\series bold
\emph on
bad
\series default
\emph default
.
 Had the computer known the value was
\begin_inset space ~
\end_inset

0, it wouldn't have divided at all! Problems where this can occur often
 are called 
\begin_inset Quotes eld
\end_inset

ill-conditioned,
\begin_inset Quotes erd
\end_inset

 and numerical analysts spend a lot of time trying to avoid them.
\end_layout

\begin_layout Standard
In some cases, however, you can't, so you resort to exact values.
 This is especially true as one moves into more abstract mathematical fields.
 Some people think 
\begin_inset Quotes eld
\end_inset

abstract
\begin_inset Quotes erd
\end_inset

 mathematics is 
\begin_inset Quotes eld
\end_inset

useless
\begin_inset Quotes erd
\end_inset

 mathematics, but they are quite mistaken: this text will introduce you
 to several abstract mathematical objects whose very exactness makes possible
 the extremely accurate and extremely secure communication you achieve on
 the internet whenever you check your bank account or buy from an online
 vendor.
\end_layout

\begin_layout Subsection*
What's special about Sage?
\end_layout

\begin_layout Standard
Sage was 
\begin_inset Quotes eld
\end_inset

started
\begin_inset Quotes erd
\end_inset

 by 
\begin_inset CommandInset href
LatexCommand href
name "William Stein"
target "http://www.math.washington.edu/People/fac_individ.php?mathid=wstein"
literal "false"

\end_inset

, a number theorist.
 He was frustrated with several drawbacks of the computer algebra systems
 available at the time:
\end_layout

\begin_layout Standard

\emph on
Commercial systems,
\emph default
 like Maple, don't allow the user to view the code, much less modify it.
 In the software world, these systems are called 
\begin_inset Quotes eld
\end_inset

proprietary
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

closed
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

unfree
\begin_inset Quotes erd
\end_inset

 (by some people).
 
\emph on

\begin_inset Quotes eld
\end_inset

Open
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset

 systems
\emph default
 also existed, and as the product of cutting-edge research, they were often
 better at a particular task than the commercial packages.
 However, these packages 
\emph on
only
\emph default
 excel at one particular field of mathematics:
\end_layout

\begin_layout Itemize
for Calculus, you'd likely use Maxima;
\end_layout

\begin_layout Itemize
for linear algebra, you'd likely use 
\begin_inset CommandInset href
LatexCommand href
name "Linbox"
target "http://linalg.org/"
literal "false"

\end_inset

;
\end_layout

\begin_layout Itemize
for group theory, you'd likely use 
\begin_inset CommandInset href
LatexCommand href
name "GAP"
target "http://www.gap-system.org"
literal "false"

\end_inset

;
\end_layout

\begin_layout Itemize
for number theory, you'd likely use 
\begin_inset CommandInset href
LatexCommand href
name "Pari"
target "http://pari.math.u-bordeaux.fr/"
literal "false"

\end_inset

;
\end_layout

\begin_layout Itemize
for commutative algebra, you'd likely use 
\begin_inset CommandInset href
LatexCommand href
name "CoCoA"
target "http://cocoa.dima.unige.it"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Macaulay"
target "http://www.math.columbia.edu/~bayer/Macaulay/"
literal "false"

\end_inset

, or 
\begin_inset CommandInset href
LatexCommand href
name "Singular"
target "http://www.singular.uni-kl.de/"
literal "false"

\end_inset

;
\end_layout

\begin_layout Standard
and so forth.
 Worse still, suppose you needed to transfer the result of one package to
 another: after performing some number theory with Pari, for instance, you
 might want to analyze the results using group theory, in which case GAP
 would be the tool of choice.
 But there was no easy way to copy the results from Pari into GAP.
\end_layout

\begin_layout Standard
Sage, then, was organized to bind these brilliant tools together into one,
 relatively easy package.
 Additional features were programmed in Sage proper, and in some cases,
 Sage has been the leader at solving some problems.
 As a bonus, Sage's developers have made it possible to interact with many
 proprietary packages through Sage, so that if Maple has the fastest tools
 to solve some problem, and you own a copy, you can get it done through
 Maple, then manipulate the result through Sage.
\end_layout

\begin_layout Subsection*
Why the concern with 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset

 software?
\end_layout

\begin_layout Standard
In the world of software, the term 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset

 has two senses:
\end_layout

\begin_layout Description
Free
\begin_inset space ~
\end_inset

as
\begin_inset space ~
\end_inset

in
\begin_inset space ~
\end_inset

beer You don't have to pay for it.
\end_layout

\begin_layout Description
Free
\begin_inset space ~
\end_inset

as
\begin_inset space ~
\end_inset

in
\begin_inset space ~
\end_inset

speech The code is open and viewable, rather than 
\begin_inset Quotes eld
\end_inset

censored.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Software can be 
\begin_inset Quotes eld
\end_inset

free as in beer
\begin_inset Quotes erd
\end_inset

 but not 
\begin_inset Quotes eld
\end_inset

free as in speech;
\begin_inset Quotes erd
\end_inset

 that is, it costs nothing, but you can't view the source code.
 Examples include the numerous 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset

 programs you can download for a computer or mobile phone.
\end_layout

\begin_layout Standard
There are important reasons a researcher or even an engineer should be able
 to view and/or modify the code in a mathematical software package:
\end_layout

\begin_layout Itemize
Good scientific practice requires reproducibility and verifiability.
 But a researcher can't verify the results of a mathematical computation
 if she can't check the way it was computed.
\end_layout

\begin_layout Itemize
Any software package of significant size will have some mistakes, called
 
\emph on
bugs
\emph default
.
 If two software packages produce a different answer, a researcher can't
 decide which one is correct if he can't view the code and evaluate the
 algorithms.
\end_layout

\begin_layout Itemize
Almost all mathematical research builds on previous work.
 The same is true about software packages, and researchers often need to
 extend a package with new features in order to accomplish some task.
 This can be much more difficult to do properly if the researcher can't
 view the code, let alone modify it.
\end_layout

\begin_layout Standard
For example, suppose a mathematician claimed to have a proof that there
 are infinitely many primes.
 Most mathematicians would want to see the proof; that's one way we learn
 from each other.
 (In some cases, the proof is much more interesting than the theorem.) Indeed,
 you can find this proof in many, many textbooks, because the Hellenic mathemati
cian 
\begin_inset CommandInset href
LatexCommand href
name "Euclid of Alexandria"
target "http://en.wikipedia.org/wiki/Euclid"
literal "false"

\end_inset

 recorded what is considered one of the most beautiful proofs of this fact
 over two thousand years ago
\shape italic
 
\begin_inset CommandInset citation
LatexCommand cite
after "Book IX, Proposition 20"
key "EuclidsElements"
literal "true"

\end_inset


\shape default
:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Theorem*
There are infinitely many prime numbers.
\end_layout

\begin_layout Proof
Consider any finite, nonempty set of primes, 
\begin_inset Formula $P=\left\{ p_{1},\ldots,p_{n}\right\} $
\end_inset

.
 Let 
\begin_inset Formula $q=p_{1}\cdots p_{n}+1$
\end_inset

.
 Since 
\begin_inset Formula $q\neq1$
\end_inset

, at least one prime divides it, but the remainder of dividing 
\begin_inset Formula $q$
\end_inset

 by any 
\begin_inset Formula $p\in P$
\end_inset

 is
\begin_inset space ~
\end_inset

1, so none of 
\begin_inset Formula $P$
\end_inset

's primes divides it.
 So there must be some prime number not listed in 
\begin_inset Formula $P$
\end_inset

.
 But 
\begin_inset Formula $P$
\end_inset

 is an 
\emph on
arbitrary,
\emph default
 finite set of primes, which means that 
\emph on
no
\emph default
 finite set of primes can list all of them.
 In other words, there are infinitely many prime numbers.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
By exposing the proof plainly, Euclid makes it easy to verify the result.
 He also makes it easy to question the argument: you might wonder, for instance,
 how Euclid knows that at least one prime divides any positive integer that
 is not
\begin_inset space ~
\end_inset

1.
 (As a matter of fact, he proves that earlier on.)
\end_layout

\begin_layout Standard
Compare this to another famous theorem attributed to 
\begin_inset CommandInset href
LatexCommand href
name "Pierre de Fermat"
target "http://en.wikipedia.org/wiki/Pierre_de_Fermat"
literal "false"

\end_inset

, a French jurist who studied mathematics as a hobby 
\shape italic

\begin_inset CommandInset citation
LatexCommand cite
after "p. 61, Observatio Domini Petri de Fermat"
key "DiophantusArithmeticaFermat"
literal "true"

\end_inset


\shape default
:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Theorem*
If 
\begin_inset Formula $n>2$
\end_inset

, the equation 
\begin_inset Formula $a^{n}+b^{n}=c^{n}$
\end_inset

 has no solution with integers 
\begin_inset Formula $a,b,c\geq1$
\end_inset

.
\end_layout

\begin_layout Proof
I have found a truly wonderful proof of this fact.
 This margin's smallness will not contain it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
These two sentences set off a search for a proof that lasted more than three
 centuries; 
\begin_inset CommandInset href
LatexCommand href
name "Andrew Wiles"
target "http://en.wikipedia.org/wiki/Andrew_Wiles"
literal "false"

\end_inset

 found a proof in 1994, and to date there are no other proofs.
 Most people agree that Fermat did not, in fact, have a proof, but we shouldn't
 think ill of him: he never actually 
\emph on
told
\emph default
 anyone he had a proof; he merely wrote this comment down in the margin
 of a book.
 His son published a copy of the book after Fermat's death, and included
 the notes Fermat wrote in the margin.
\end_layout

\begin_layout Standard
To stretch the analogy further, suppose we were to claim the following:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Theorem*
The number
\begin_inset Formula 
\[
2^{n}-1
\]

\end_inset

is prime for 
\begin_inset Formula $n=2,3,5,7,13,17,19,31,67,127,257$
\end_inset

.
\end_layout

\begin_layout Proof
Trade secret.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
You would be right to doubt our claim, for at least two reasons: there is
 no 
\emph on
easy
\emph default
 to way to verify it, and in fact it is wrong! Yet this claim was made by
 a well-respected mathematician named 
\begin_inset CommandInset href
LatexCommand href
name "Marin Mersenne"
target "http://en.wikipedia.org/wiki/Marin_Mersenne"
literal "false"

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "MersenneCogitata"
literal "true"

\end_inset

, offered without proof, and was for some time generally accepted.
 You will meet this claim again in a lab later on.
\end_layout

\begin_layout Subsection*
What are some advantages of Sage?
\end_layout

\begin_layout Standard
As mentioned before, Sage makes it easy to experiment with mathematical
 objects that you will use increasingly more in classes after this one.
 Later classes will probably not require Sage explicitly, but if you never
 use Sage again after this class, that would be like going through a Statistics
 class and doing all the work by hand:
\begin_inset Foot
status open

\begin_layout Plain Layout
At least one of the authors actually tried this when he was in college.
 In fact, Statistics was the one class that broke his resistance to using
 a calculator.
 The calculator's ability to perform exact computation of fractions impressed
 him; until then, he had only seen calculators perform arithmetic with fractions
 via floating point.
\end_layout

\end_inset

 
\emph on
WHY?!?
\end_layout

\begin_layout Standard
Another advantage to Sage is that you interact with it through a Python
 interface; programming in Sage is, to some extent, indistinguishable from
 programming in Python.
 This confers the following benefits:
\end_layout

\begin_layout Itemize
Recall that Python is one of the more widespread interpreted languages.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Many employers want Python experience."
target "https://www.python.org/jobs/"
literal "false"

\end_inset

 Learning Sage well helps you learn Python, and helps make you more employable.
\end_layout

\begin_layout Itemize
Many packages are available to enhance Python, and work well with Sage.
 Indeed, many such packages are already packaged with Sage.
\end_layout

\begin_layout Itemize
As mentioned earlier, you can often speed up a program by 
\begin_inset Quotes eld
\end_inset

Cythonizing
\begin_inset Quotes erd
\end_inset

 it.
\end_layout

\end_deeper
\begin_layout Itemize
Python is a modern language, offering many ways to express an elegant solution
 to a problem.
 By learning Sage, you are learning 
\emph on
good
\emph default
 programming practices.
\end_layout

\begin_layout Standard
Keep in mind that Python and Sage aren't the same thing, nor is either a
 subset of the other.
 Sage commands do not work in plain Python, and some Python commands don't
 work the same way in Sage that they would in Python.
\end_layout

\begin_layout Section*
How do I get going with Sage?
\end_layout

\begin_layout Standard
Probably the easiest way is to visit 
\begin_inset CommandInset href
LatexCommand href
name "the CoCalc server at cocalc.com"
target "http://cocalc.com/"
literal "false"

\end_inset

, register for a free account, start a project, and create a Sage worksheet.
 We strongly urge the reader to pony up the dough for a membership, which
 at the time of this writing costs $7/month and gives access to faster,
 more reliable servers.
 You can use it for free, but for various reasons, the free servers sometimes
 reset on you.
 (If you are part of a class, however, ask the instructor if the department
 has ponied up for a class package; the discount is substantial.) The drawback
 to this approach is that you have to pay to get good service.
 The advantage is that you always have a reasonably up-to-date version of
 Sage at your fingertips, and you don't have to worry about a hardware crash
 that wipes out all your data, because it's stored on servers that rely
 on multiple backups and fallback mechanisms.
\end_layout

\begin_layout Standard
Another way to use Sage is via an online server that is not a CoCalc server.
 This requires you to know somebody who knows somebody who\SpecialChar ldots
 knows somebody
 who runs a server you can use.
 Quite a few institutions do this, including the one that employs the authors;
 in fact, our department maintains at least two such servers at the time
 of this writing.
 The drawback to this approach is that you depend on the server's maintainer
 to keep the software up-to-date and the data backed up.
 Indeed, one of our department's servers runs a version of Sage that is
 years out of date.
\end_layout

\begin_layout Standard
The last way to use Sage is from a copy on your own machine.
 You can download it from 
\begin_inset CommandInset href
LatexCommand href
name "www.sagemath.org"
target "http://www.sagemath.org/"
literal "false"

\end_inset

 and install it on your computer.
 (Look for the link to 
\begin_inset Quotes eld
\end_inset

Downloads
\begin_inset Quotes erd
\end_inset

.)
\end_layout

\begin_layout Itemize
If your machine runs Linux, this is a relatively simple process, though
 you may have to install some packages through your package manager.
 (In the past, we have had to install a system called 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
m4
\end_layout

\end_inset

.
 We don't remember what it is.) Binaries are available for some Linux distributio
ns; Ubuntu is typically one of these, and Fedora has been from time to time.
 For the rest, you'll likely need to download the Sage source and compile
 it on your computer.
 The good news is that this is usually quite painless, as long as you have
 already installed the required packages, and these are listed in the directions.
 The bad news is that installing from source takes quite a long time, so
 prepare for some hurry-up-and-wait.
\end_layout

\begin_layout Itemize
If your machine runs OSX, try downloading a binary for your architecture.
 You can try compiling from source, as with Linux, but in that case, hope
 that Apple hasn't recently 
\begin_inset Quotes eld
\end_inset

upgraded
\begin_inset Quotes erd
\end_inset

 Xcode, because you need Xcode to install Sage, and every major release
 of Xcode typically breaks Sage in some way.
\begin_inset Foot
status open

\begin_layout Plain Layout
Sage is by no means the only software package that suffers this consequence.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If your machine runs Windows, you are in the unusual position of having
 to suffer what Linux and OSX users typically suffer: Sage doesn't work
 natively on Windows, so you have to use it through a virtual machine.
 This can be a little tedious to set up, but once you get the hang of it,
 it works fine.
 The correct way to do this has changed several times over the years, so
 we are reluctant to give more precise advice than this.
 The good news is that instructions on installing and running Sage will
 be available at the website.
\end_layout

\begin_layout Standard
Once you have one of these methods up and running, you start using it!
\end_layout

\begin_layout Section*
Worksheet or command-line?
\end_layout

\begin_layout Standard
There are two typical ways to use Sage: from a browser, in what's called
 a 
\emph on
Sage worksheet,
\emph default
 or from the command line.
 If you have installed Sage to your machine, you can do both; see the section
 on Command-line Sage to see how to start a Sage worksheet from the command
 line.
\end_layout

\begin_layout Subsection*
Sage worksheets
\end_layout

\begin_layout Standard
If you have access to Sage via a web browser (either CoCalc or another online
 server) you will likely prefer to work with a Sage worksheet.
 We recommend our students to start with Sage in this fashion, because the
 worksheet provides a more user-friendly environment: it is easy to review
 and re-execute commands, to add text for organization and narrative, and
 further to save your entire session, then later reload the work and the
 output.
 You can't do any of that with the command line.
\end_layout

\begin_layout Standard
When you start a worksheet, you should see one of these two screens:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphics/screenshots/StartingWorksheetModeOwnServer.tiff
	lyxscale 33
	width 80col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Independent server
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphics/screenshots/StartingWorksheetModeCoCalc.tiff
	lyxscale 33
	width 80col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CoCalc
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
You can (and should) change the title.
\end_layout

\begin_layout Itemize
\noindent
In the independent server, you can do that at the beginning with the 
\begin_inset Quotes eld
\end_inset

Rename worksheet
\begin_inset Quotes erd
\end_inset

 dialog you see in the screenshot.
 You can do it later by clicking on the title (in the upper left, currently
 
\begin_inset Quotes eld
\end_inset

Untitled
\begin_inset Quotes erd
\end_inset

) and the same dialog will pop up.
\end_layout

\begin_layout Itemize
In CoCalc, you can do that by clicking on the circled 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
i
\end_layout

\end_inset

 in the upper left and choosing 
\begin_inset Quotes eld
\end_inset

Rename\SpecialChar ldots

\begin_inset Quotes erd
\end_inset

.
 A new screen will appear, prompting you to rename the file.
 Make sure you keep the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
.sagews
\end_layout

\end_inset

 added at the end.
\end_layout

\begin_layout Standard
There are other options you can monkey with, but for now we'd recommend
 you move on to the next chapter, since most of those options are of small
 importance for our purposes.
 The ones we do need we'll discuss in due course.
\end_layout

\begin_layout Subsection*
Command-line Sage
\end_layout

\begin_layout Standard
If you choose to run Sage from the command line, you need to open a 
\emph on
shell
\emph default
, also called 
\emph on
a command-line prompt
\emph default
.
 You will see some sort of prompt, which can vary quite a bit; whenever
 we mean a shell prompt we'll simply put a blue greater-than symbol: 
\color blue

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\color blue
>
\end_layout

\end_inset


\color inherit
.
 At the prompt, type 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
sage
\end_layout

\end_inset

, press 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

, then wait for Sage to start up.
 This might take a few seconds, but eventually you will see something to
 this effect:
\end_layout

\begin_layout SageInteraction

\family typewriter
\color blue
>
\color inherit
 sage
\end_layout

\begin_layout SageInteraction
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
SageMath Version 6.7, Release Date: 2015-05-17
\end_layout

\begin_layout Plain Layout

\family typewriter
Type "notebook()" for the browser-based notebook interface.
\end_layout

\begin_layout Plain Layout

\family typewriter
Type "help()" for help.
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\family typewriter
\color blue
sage:
\color inherit
 _
\end_layout

\begin_layout Standard
\noindent
The underscore (
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
_
\end_layout

\end_inset

) might actually look like a little box on your system.
 Once you see that, you're in good shape for the next chapter.
 If you 
\emph on
don't
\emph default
 see it, or if you see some sort of error, you need to talk with your instructor
 or tech support and see what went wrong.
\end_layout

\begin_layout Standard
If you'd like to run a Sage worksheet in a browser, but don't want to run
 CoCalc and don't have access to another server, type 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
notebook()
\end_layout

\end_inset

 and press 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

.
 You will see a lot of messages, for instance:
\end_layout

\begin_layout SageInteraction

\family typewriter
\color blue
sage:
\color inherit
 notebook()
\end_layout

\begin_layout SageInteraction

\family typewriter
The notebook files are stored in: sage_notebook.sagenb
\end_layout

\begin_layout SageInteraction
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
Open your web browser to http://localhost:8080
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\family typewriter
Executing twistd --pidfile="sage_notebook.sagenb/sagenb.pid" -ny "sage_notebook.sag
enb/twistedconf.tac"
\end_layout

\begin_layout SageInteraction

\family typewriter
/Applications/sage-6.7-untouched/local/lib/python2.7/site-packages/
\end_layout

\begin_layout SageInteraction

\family typewriter
Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.
 You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.
\end_layout

\begin_layout SageInteraction

\family typewriter
_warn("Not using mpz_powm_sec.
 You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.",
 PowmInsecureWarning)
\end_layout

\begin_layout SageInteraction

\family typewriter
2016-05-27 14:30:49+0300 [-] Log opened.
\end_layout

\begin_layout SageInteraction

\family typewriter
2016-05-27 14:30:49+0300 [-] twistd 14.0.2 (/Applications/sage-6.7-untouched/local/
bin/python 2.7.8) starting up.
\end_layout

\begin_layout SageInteraction

\family typewriter
2016-05-27 14:30:49+0300 [-] reactor class: twisted.internet.selectreactor.SelectRe
actor.
\end_layout

\begin_layout SageInteraction

\family typewriter
2016-05-27 14:30:49+0300 [-] QuietSite starting on 8080 2016-05-27 14:30:49+0300
 [-] Starting factory <__builtin__.QuietSite instance at 0x1181bb638>
\end_layout

\begin_layout Standard
\noindent
For the most part, you 
\emph on
do not
\emph default
 need to worry about those messages.
\begin_inset Foot
status open

\begin_layout Plain Layout
Well, maybe the security warnings about 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
libgmp
\end_layout

\end_inset

, if you see them.
 I should look into that.
\end_layout

\end_inset

 You don't even have to follow the directions to open your web browser to
 that site; on many machines, the browser will open the webpage automatically.
 Besides, it will take a few seconds for things to get started, so sit back
 and relax a few seconds.
 If your browser doesn't open, Don't Panic! Open it yourself and see if
 the web address 
\emph on
your
\emph default
 Sage advises works.
 If it does, you're in good shape for the next chapter.
\end_layout

\begin_layout Standard
If it doesn't,
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\size largest
\color red
PANIC!
\end_layout

\begin_layout Standard
\noindent
Yes, it really is okay to panic once in a while.
 Get it out of your system.
 Once you're done, look carefully at the messages, and see if any are error
 messages; these would be helpful.
 Then visit
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://groups.google.com/forum/#!forum/sage-support"
literal "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
and search to see if that error message has been discussed.
 If not, start a new post, inquiring about what's going wrong.
\end_layout

\begin_layout Section*
Getting help
\end_layout

\begin_layout Standard
If you're reading this as part of a class, then your instructor should be
 helpful.
 (Maybe not 
\emph on
very
\emph default
 helpful, but helpful all the same.) We already mentioned the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
sage-support
\end_layout

\end_inset

 forum last chapter.
 Aside from these options, Sage will answer many questions on its own.
\end_layout

\begin_layout Subsection*
Docstrings
\end_layout

\begin_layout Standard
If you want to know how a command works, type the name of the command, followed
 by a question mark, then execute the command.
 Sage will provide you useful information on the command, typically with
 examples.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
simplify?
\end_layout

\begin_layout SageOutput

\color red
Signature:
\color inherit
 simplify(f)
\end_layout

\begin_layout SageOutput

\color red
Docstring:
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Simplify the expression f.
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

EXAMPLES: We simplify the expression i + x - x.
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sage: f = I + x - x; simplify(f)
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

I
\end_layout

\begin_layout SageOutput
In fact, printing f yields the same thing - i.e., the simplified form.
\end_layout

\begin_layout SageOutput

\color red
Init docstring:
\color inherit
 x.__init__(...) initializes x; see help(type(x)) for signature
\end_layout

\begin_layout SageOutput

\color red
File:
\color inherit
 /Applications/sage-6.7-untouched/local/lib/python2.7/site-
\end_layout

\begin_layout SageOutput
packages/sage/calculus/functional.py
\end_layout

\begin_layout SageOutput

\color red
Type:
\color inherit
 function
\end_layout

\end_deeper
\begin_layout Subsection*
Finding methods for objects
\end_layout

\begin_layout Standard
Another way to get help is to see what commands an object will accept as
 
\emph on
methods
\emph default
.
 A 
\begin_inset Quotes eld
\end_inset

method
\begin_inset Index idx
status open

\begin_layout Plain Layout
message!error message|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

the particular error
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
class!method
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
method|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

class method
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is a command that is very specific to a particular Sage object; you invoke
 it by typing the object's name, followed by a dot, then the name of the
 method.
\begin_inset Foot
status open

\begin_layout Plain Layout
Another term for 
\begin_inset Quotes eld
\end_inset

method
\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

message;
\begin_inset Quotes erd
\end_inset

 both terms are used in computer science, but 
\begin_inset Quotes eld
\end_inset

method
\begin_inset Quotes erd
\end_inset

 is the jargon for Sage.
\end_layout

\end_inset

 To find the names of all the methods an object accepts, type its name,
 followed by a dot, then press the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Tab
\end_layout

\end_inset

 key.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tab completion
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For example, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
simplify()
\end_layout

\end_inset

 doesn't work very well on the following expression:
\begin_inset Foot
status open

\begin_layout Plain Layout
It does actually work in some versions of Sage, such as Sage 6.7, but not
 in others, such as 8.1.
 If it simplifies in your version, just pretend that it doesn't for the
 sake of the argument, and follow along, since that isn't the point anyway.
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
rats = 1/x + 1/2
\end_layout

\begin_layout SageInput
simplify(rats)
\end_layout

\begin_layout SageOutput
1/x + 1/2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We 
\emph on
really
\emph default
 want to simplify that expression as fully as possible, so let's see if
 it accepts a method that will perform a more thorough simplification.
 Type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
rats.
\end_layout

\end_inset

 (including the period!) and then press 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Tab
\end_layout

\end_inset

; you should see over 200 possible methods.
 Some of them are not really appropriate for the expression; we won't go
 into the reasons for this, but if you look carefully, you should find at
 least two useful methods.
 One of them is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
full_simplify()
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
rats.full_simplify()
\end_layout

\begin_layout SageOutput
1/2*(x + 2)/x
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's a somewhat convoluted way of writing 
\begin_inset Formula $\nicefrac{\left(x+2\right)}{\left(2x\right)}$
\end_inset

, but at least it's simplified!
\end_layout

\begin_layout Standard
The thought of hunting through over 200 possible methods may seem intimidating,
 but many objects accept very few methods.
 In practice, this isn't such a difficult technique, since there are many
 ways to search through the list.
\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 This is just another programming textbook.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 Mathematics is about counting numbers.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 While students don't much care for fractions, computers find it easier
 to work with fractions than with floating point numbers.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 
\begin_inset Quotes eld
\end_inset

Free
\begin_inset Quotes erd
\end_inset

 software is written by unemployed slackers living in their parents' basements.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 All famous mathematical results were appreciated from the start for their
 clear, elegant proofs.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 Bytecode is technically not an interpreted language.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 Interpreted languages are appreciated above all else for their speed.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 Some software of significant size is bug-free.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 Abstract mathematics is useless in the real world.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 It is easy to verify and improve on proprietary mathematics packages.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
11.
 
\emph on
Bonus:
\emph default
 The answer to all these True/False questions is 
\begin_inset Quotes eld
\end_inset

False.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection*
Multiple Choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Which of the following is 
\emph on
not
\emph default
 an example of a computer algebra system?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 A package that performs fraction arithmetic without any roundoff error
 at all.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 A package that assigns numbers to musical notes and uses fractals to produce
 new music.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 A package that performs polynomial arithmetic with approximate values for
 coefficients.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 A package that focuses on sets of abstract objects defined by precise propertie
s.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 Which of the following is 
\emph on
not
\emph default
 a step in the usual process of compiling a program?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 The compiler reads the source from a file.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 The compiler translates each symbol into a combination of 
\series bold
on
\series default
 and 
\series bold
off
\series default
 signals.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 The compiler saves the translation to a file, called an executable or a
 library.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The compiler executes the translated commands immediately before quitting.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 Sage's primary focus is what kind of computational mathematics?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 numerical computation with approximate values
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 statistical computation with probable values
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 symbolic computation with exact values
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 fuzzy computation with uncertain values
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
4.
 Which of the following computer algebra systems would you use to compute
 a derivative?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Maxima
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 PARI
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Schoonship
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\shape smallcaps
Singular
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
5.
 Which of the following well-known computer languages tries to straddle
 the gap between interpreted and compiled languages?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 C/C++
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Fortran
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Java
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Python
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
6.
 Which of the following is a primary motivation of the movement for 
\begin_inset Quotes eld
\end_inset

free
\begin_inset Quotes erd
\end_inset

 mathematics software?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Antipathy to censorship
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 International collaboration
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Lack of grant funding
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Verifiability of results
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
7.
 Which of the following mathematicians is famous in spite of popularizing
 a 
\begin_inset Quotes eld
\end_inset

fact
\begin_inset Quotes erd
\end_inset

 that was very wrong?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Pierre de Fermat
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Marin Mersenne
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 William Stein
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Andrew Wiles
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
8.
 Which of the following mathematicians is famous in spite of his non-scientific
 day job?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Pierre de Fermat
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Marin Mersenne
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 William Stein
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Andrew Wiles
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
9.
 Which of the following is 
\emph on
not
\emph default
 an advantage to working with Sage?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 You acquire practical skills that employers value.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 You work with cutting-edge software.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 You no longer have to worry about getting the correct answer.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 You can use the material learned here in other classes.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
10.
 In which of these ways does Sage work with Python?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Sage's interface is essentially a Python interface.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Sage is a Python library you can load into any Python interpreter.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Python is one of the computer algebra systems in Sage.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Sage uses the Cython compiler to compile all Python programs.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.

\emph on
Bonus:
\emph default
 Which answer is correct?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 The next one.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 The next one.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 The next one.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The first one.
\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Explain how the quote at the beginning of this chapter is related to its
 main thesis.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Describe a real-world analogy for the difference between compiled, interpreted,
 and bytecode languages.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 A common problem in mathematics textbooks is to compute the 1001st derivative
 of 
\begin_inset Formula $\cos x$
\end_inset

.
 The best way to find the answer is 
\emph on
not
\emph default
 to compute all
\begin_inset space ~
\end_inset

1001 derivatives; instead, you compute a few, notice a pattern, and deduce
 quickly what the 1001st derivative should be.
 Explain how this compares to what we want you to get out of this text.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Not all mathematicians find the arguments in favor of free software convincing,
 and the use of proprietary software is widespread.
 Why do you think this is the case?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Even if Sage is less popular than a proprietary package like Maple or Mathemati
ca, learning Sage can make it easier to work with those packages, as well.
 Why?
\end_layout

\begin_layout Chapter
Basic computations
\end_layout

\begin_layout Quotation
What's in a name? that which we call a rose / By any other name would smell
 as sweet\SpecialChar ldots
 (Shakespeare)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: basic computations"

\end_inset

Create a new worksheet and call it 
\begin_inset Quotes eld
\end_inset

My First Sage Worksheet.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
To describe interaction with Sage, we use the following format:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
some input
\end_layout

\begin_layout SageOutput
some output
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The text 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
some input
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 indicates a command you type into Sage.
 If you are using Sage from the command line, you will type this at a blue
 
\begin_inset Quotes eld
\end_inset


\family typewriter
\color blue
sage:
\family default
\color inherit

\begin_inset Quotes erd
\end_inset

 prompt; hence the blue color and the label.
 If you are using Sage from a worksheet, you will not see a prompt; instead,
 you will type the command in a 
\begin_inset Quotes eld
\end_inset

cell,
\begin_inset Quotes erd
\end_inset

 which in some versions of Sage is outlined by a small box.
\end_layout

\begin_layout Standard
To execute the command:
\end_layout

\begin_layout Itemize
at the command line, press the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

 or 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Return
\end_layout

\end_inset

 key;
\end_layout

\begin_layout Itemize
in a worksheet, hold 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Shift
\end_layout

\end_inset

 and press the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

 or 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Return
\end_layout

\end_inset

 key.
\end_layout

\begin_layout Standard
Sage will then interpret and process your command.
 The worksheet interface will show a colored or flashing bar while Sage
 does this; the command-line interface will simply pause.
\end_layout

\begin_layout Standard
Once the output is complete, you will see the text indicated by 
\begin_inset Quotes eld
\end_inset


\color blue

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\color blue
some output
\end_layout

\end_inset


\color inherit
.
\begin_inset Quotes erd
\end_inset

 If the command succeeded, you will see an answer that looks more or less
 sensible.
 If an error occurred, the text will include a lot of information, some
 of it in 
\family typewriter

\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{sageerrorcolor}
\end_layout

\end_inset


\family default
red
\family typewriter

\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family default
 (the last line especially, which is all we will copy) and probably won't
 make sense unless you already know Python.
 For instance:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
some bad input
\end_layout

\begin_layout SageError
SomeError: some message to explain the error
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We will explain several types of errors as we progress through our explorations
 of Sage.
 As a convenience, we are adding errors to the textbook's index.
 If you are working on some computation, and you run across some error you
 don't recognize, see if you can find it in the index; if so, the page numbers
 it references will prove helpful.
\end_layout

\begin_layout Standard
Here's an example of a successful computation; you should try this yourself
 now and make sure you get the same result.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
2 + 3
\end_layout

\begin_layout SageOutput
5
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That looks reassuring; at least Sage can do that! Here's one where the user
 forgot to let go of the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Shift
\end_layout

\end_inset

 key before pressing the number 3.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
2 + #
\end_layout

\begin_layout SageError
SyntaxError: invalid syntax
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you actually run this in Sage,
\begin_inset Index idx
status open

\begin_layout Plain Layout
SyntaxError@
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invalid syntax
\end_layout

\end_inset


\end_layout

\end_inset

 you'll notice there's a bit more text in the error, as well as a lot of
 color changes.
 In our case, this turns out to look like:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_layout SageInteraction

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{softblue}
\end_layout

\end_inset

File 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{softgreen}
\end_layout

\end_inset

"<ipython-input-3-7c2c726856a7>"
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, line
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{softgreen}
\end_layout

\end_inset

1
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{sageerrorcolor}
\end_layout

\end_inset

Integer(2) + #
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

^
\end_layout

\begin_layout SageInteraction

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{sageerrorcolor}
\end_layout

\end_inset

SyntaxError: invalid syntax
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
You'll notice we 
\emph on
only
\emph default
 copied the last line, which specifies the type of error! When necessary
 for the discussion, we'll sometimes include the rest of the information
 as well, but you can often figure out the problem just from looking at
 the last line.
\end_layout

\begin_layout Standard
It may happen that the line you have to type is too long to fit in one line.
 It 
\emph on
will
\emph default
 happen to the authors of this text, since we don't have that much horizontal
 space on the page.
 In cases like this, you can keep typing, which can make the code harder
 to read, or you can tell Sage you want to continue on the following line
 by typing a backslash 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\backslash

\end_layout

\end_inset

, which Sage interprets as 
\begin_inset Quotes eld
\end_inset

line break
\begin_inset Index idx
status open

\begin_layout Plain Layout
line break
\end_layout

\end_inset

,
\begin_inset Quotes erd
\end_inset

 then pressing 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

.
 We will do this rather regularly to help make code more readable.
 There is no need to wait until we bump up to the end of the line for this,
 and sometimes it may be more readable to add the line break early.
 For instance:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 
\backslash

\end_layout

\begin_layout Standard
\noindent

\family typewriter
....:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

+ 11 + 12 + 13 + 14 + 15
\end_layout

\begin_layout SageOutput
120
\end_layout

\end_deeper
\begin_layout Paragraph*
(When using a Sage worksheet)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "par: HTML cells"

\end_inset

One advantage to using Sage worksheets is that you can use HTML commands
 to add explanatory narrative to your work.
 Simply type
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%html
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
and everything following that line will be considered HTML text.
 The toolbar will change to allow for HTML formatting, but if you are familiar
 with HTML tags then you can add them directly.
 You can format it the same way as you execute a Sage command: hold 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Shift
\end_layout

\end_inset

, press 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Enter
\end_layout

\end_inset

.
 If needed, you can then edit the HTML cell again by double-clicking on
 it.
 This is enormously useful when breaking up a long worksheet into sections,
 with headers that organize related parts of the work.
\end_layout

\begin_layout Section*
Yer basic arithmetic
\end_layout

\begin_layout Standard
As you might expect, Sage offers the same basic arithmetic operations you
 can find in any calculator.
 Here are a few that will prove useful.
\begin_inset Foot
status open

\begin_layout Plain Layout
You can also type 
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
^
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset

 for exponentiation, but for various reasons we don't recommend it: in some
 situations, Sage will interpret it as a different operator.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
+
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
adds 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
subtracts 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
*
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
multiplies 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
/
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
finds the ratio of dividing 
\begin_inset Formula $a$
\end_inset

 by 
\begin_inset Formula $b$
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
division!ratio, quotient, and remainder
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset

 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
//
\end_layout

\end_inset

 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
finds the quotient
\begin_inset Index idx
status open

\begin_layout Plain Layout
quotient
\end_layout

\end_inset

 of dividing 
\begin_inset Formula $a$
\end_inset

 by 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
finds the remainder
\begin_inset Index idx
status open

\begin_layout Plain Layout
remainder
\end_layout

\end_inset

 of dividing 
\begin_inset Formula $a$
\end_inset

 by 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
**
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
raises 
\begin_inset Formula $a$
\end_inset

 to the 
\begin_inset Formula $b$
\end_inset

th power
\begin_inset Index idx
status open

\begin_layout Plain Layout
power
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
exponentiation
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sqrt(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
square root
\end_layout

\end_inset

square root of 
\begin_inset Formula $a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
abs(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
absolute value
\end_layout

\end_inset

absolute value of 
\begin_inset Formula $a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sage operators for basic arithmetic
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Go ahead and try these with some numbers, both approximate and exact.
\end_layout

\begin_layout Subsection*
Yer basic comparisons
\end_layout

\begin_layout Standard
Sage can also compare objects, to a certain extent.
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
>
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
is 
\begin_inset Formula $a$
\end_inset

 strictly greater than 
\begin_inset Formula $b$
\end_inset

?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
>=
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
is 
\begin_inset Formula $a$
\end_inset

 greater than or equal to 
\begin_inset Formula $b$
\end_inset

?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
==
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
is 
\begin_inset Formula $a$
\end_inset

 equal to 
\begin_inset Formula $b$
\end_inset

?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
<=
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
is 
\begin_inset Formula $a$
\end_inset

 less than or equal to 
\begin_inset Formula $b$
\end_inset

?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
<
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
is 
\begin_inset Formula $a$
\end_inset

 strictly less than 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sage operators for basic comparisons
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
When using these comparisons, Sage will return 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset

 or 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset

, which obviously correspond to 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

no.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
2 < 3
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
2 > 3
\end_layout

\begin_layout SageOutput
False
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You have to be careful with comparison of equality, as the sign is doubled.
 Problems will arise if you forget it.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
2 = 3
\end_layout

\begin_layout SageError
ValueError: The name "2" is not a valid Python identifier.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you see that error message,
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!The name@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
The name \SpecialChar ldots
 is not a valid Python identifier
\end_layout

\end_inset


\end_layout

\end_inset

 the problem is almost certainly due to the use of only one equals sign
 when you need two.
\end_layout

\begin_layout Standard
Aside from comparing numbers, 
\emph on
many
\emph default
 symbolic objects can be compared.
 We won't talk about sets for quite some time, for instance, but there is
 a natural ordering of sets based on subset properties, and Sage will compare
 sets based on that fact.
 Consider, for instance, the sets 
\begin_inset Formula $\left\{ 2,3\right\} $
\end_inset

, 
\begin_inset Formula $\left\{ 2,4\right\} $
\end_inset

, and 
\begin_inset Formula $\left\{ 2,3,4,5\right\} $
\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
{2,3} < {2,3,4,5}
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
{2,3,4,5} > {2,3}
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
{2,3} < {2,4}
\end_layout

\begin_layout SageOutput
False
\end_layout

\end_deeper
\begin_layout Subsection*
Exact v.
\begin_inset space ~
\end_inset

approximate values
\end_layout

\begin_layout Standard
Sage offers symbols to represent the exact values of some important numbers;
 these should be easy to remember.
\begin_inset Foot
status open

\begin_layout Plain Layout
It is also possible to use 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
i
\end_layout

\end_inset

 for the imaginary number, but as it is common to use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
i
\end_layout

\end_inset

 as a variable we try to avoid that.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
pi@
\begin_inset Formula $\pi$
\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\pi$
\end_inset

, the ratio of a circle's circumference to its radius
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
e
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
e
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\displaystyle e=\lim_{x\rightarrow\infty}\left(1+\frac{1}{x}\right)^{x}}$
\end_inset

, 
\emph on
or
\emph default
,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the value of 
\begin_inset Formula $a$
\end_inset

 such that the derivative of 
\begin_inset Formula $a^{x}$
\end_inset

 is 
\begin_inset Formula $a^{x}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
I
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
I
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $i$
\end_inset

, the 
\begin_inset Quotes eld
\end_inset

imaginary
\begin_inset Quotes erd
\end_inset

 number (
\begin_inset Formula $i^{2}=-1$
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
oo
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

|
\end_layout

\end_inset

see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

infinity
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
oo
\end_layout

\end_inset


\emph on
 or
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\infty$
\end_inset

, infinity (unbounded above)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
infinity!
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
oo@
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
-oo
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

|
\end_layout

\end_inset

see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

infinity
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
-oo
\end_layout

\end_inset


\emph on
 or
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-\infty$
\end_inset

 (unbounded below)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
-Infinity
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
infinity!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
-Infinity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sage symbols for important constants
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
We italicize these identifiers in the text, both to help with readability
 and to highlight that they should represent fixed values.
\begin_inset Foot
status open

\begin_layout Plain Layout
As we note on page
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "note: sage \"constants\" not constant"

\end_inset

, though, Sage does not have true constants, so a user or program can change
 the symbols' meanings.
\end_layout

\end_inset

 Sage does not italicize them in output.
\end_layout

\begin_layout Standard
We explained already that the strength of a computer algebra system like
 Sage lies in its ability to manipulate exact values, rather than approximate
 values.
 Nevertheless, we sometimes need to compute with approximate values, and
 Sage allows this as well.
\end_layout

\begin_layout Standard
\align center

\series bold
\emph on
To use approximate arithmetic, type at least one number as a decimal!
\end_layout

\begin_layout Standard
\noindent
To see how it works, consider the following commands and their results.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
2/3
\end_layout

\begin_layout SageOutput
2/3
\end_layout

\begin_layout SageInput
2./3
\end_layout

\begin_layout SageOutput
0.666666666666667
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In the first case, you entered exact values, so Sage gives you the 
\emph on
exact
\emph default
 quotient of dividing 2 by 3, the fraction 
\begin_inset Formula $\nicefrac{2}{3}$
\end_inset

.
 In the second case, you're specifying at least one decimal, so you're getting
 the 
\emph on
approximate
\emph default
 quotient of dividing 2 by 3.
 This may look like floating-point, but it's not quite; it's actually an
 object Sage calls a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
RealNumber
\end_layout

\end_inset

.
 Don't worry about those details right now.
\end_layout

\begin_layout Section*
Constants, variables, and indeterminates
\end_layout

\begin_layout Subsection*
A subtle distinction in usage
\end_layout

\begin_layout Standard
The mathematical symbols 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $\pi$
\end_inset

, and 
\begin_inset Formula $i$
\end_inset

 represent 
\emph on
constants,
\emph default
 by which we mean their values are definite and fixed.
 If someone writes Euler's equation,
\begin_inset Formula 
\[
e^{i\pi}+1=0,
\]

\end_inset

then every educated mathematician will know the values of 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $i$
\end_inset

, and 
\begin_inset Formula $\pi$
\end_inset

, even if this is the first time they see the equation.
 Thanks to the symbols we described above, this holds true in Sage, as well:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
e**(I*pi) + 1
\end_layout

\begin_layout SageOutput
0
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Of course, there are times when any of these symbols can mean something
 else.
 For instance, 
\begin_inset Formula $x_{i}$
\end_inset

 refers to the 
\begin_inset Formula $i$
\end_inset

th number in a list, not to some manipulation of 
\begin_inset Formula $x$
\end_inset

 by the imaginary number.
\end_layout

\begin_layout Standard
Other one-letter symbols in mathematics represent one of two kinds of 
\emph on
variables,
\emph default
 by which we mean their values are not necessarily fixed during a problem.
 The symbol 
\begin_inset Formula $x$
\end_inset

, for instance, can represent any of an infinite number of values.
 Mathematicians generally work with two kinds of variables; and in ordinary
 parlance, we tend to refer to both kinds as variable, but in fact there
 is an important distinction, which we can see in an expression as simple
 as the polynomial
\begin_inset Formula 
\[
x^{2}-c^{2}.
\]

\end_inset


\end_layout

\begin_layout Itemize
In many situations, specific values for 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

 are very important.
 The equation
\begin_inset Formula 
\[
x^{2}-c^{2}=2
\]

\end_inset

is not always true; it depends on the values of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

, and in practice we often try to find values for which this is true.
\end_layout

\begin_layout Itemize
In other situations, however, 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

 represent arbitrary values.
 The equation
\begin_inset Formula 
\[
x^{2}-c^{2}=\left(x+c\right)\left(x-c\right)
\]

\end_inset

is true regardless of the values of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

.
\end_layout

\begin_layout Standard
This matters a great deal for computer algebra systems, because a symbol
 can likewise refer to a specific or indeterminate value, and we need to
 pay attention to this distinction from time to time.
 We will agree on the following convention:
\end_layout

\begin_layout Itemize
When a symbol has been assigned a specific value, we usually call it a 
\emph on
variable
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable
\end_layout

\end_inset

,
\emph default
 because we can change that value at any time.
\end_layout

\begin_layout Itemize
When 
\emph on
we have no intention
\emph default
 of changing a variable's value, we call it a 
\emph on
constant
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
constant
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
When a symbol is not to hold any specific value, but is purely symbolic
 for an arbitrary value from some set, we call it 
\emph on
indeterminate
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
indeterminate
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Sage provides only one indeterminate at startup: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

.
 If you want to work with another indeterminate, such as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

, you have to create it.
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "note: sage \"constants\" not constant"

\end_inset

Sage does not offer a way to define your own constants, the way some programming
 languages do.
 In Sage, a constant is just a variable that you try really hard not to
 change.
\end_layout

\begin_layout Subsection*
Resetting a variable or indeterminate
\end_layout

\begin_layout Standard
Since Sage has no way for you to define true constants, you can, if you
 choose, reassign the value of 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
I
\end_layout

\end_inset

 to something else, and it is very likely that you will do that someday,
 in some circumstance.
 If that happens, it is easy to fix with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
reset()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
reset@
\begin_inset Flex Sage Word
status collapsed

\begin_layout Plain Layout
reset()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
variable!resetting a name
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
indeterminate!resetting a name
\end_layout

\end_inset

 command; include the symbol between quotes inside the parentheses.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
I^2 + 1
\end_layout

\begin_layout SageOutput
0
\end_layout

\begin_layout SageInput
I = 2
\end_layout

\begin_layout SageInput
I^2 + 1
\end_layout

\begin_layout SageOutput
5
\end_layout

\begin_layout SageInput
reset('I')
\end_layout

\begin_layout SageInput
I^2 + 1
\end_layout

\begin_layout SageOutput
0
\end_layout

\end_deeper
\begin_layout Subsection*
Creating variables and indeterminates
\end_layout

\begin_layout Standard
To create a variable, use the assignment construct,
\end_layout

\begin_layout Standard
\align center

\emph on
identifier 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\emph on
 expression
\end_layout

\begin_layout Standard
\noindent
where 
\emph on
identifier
\begin_inset Index idx
status open

\begin_layout Plain Layout
identifier
\end_layout

\end_inset


\emph default
 is a legitimate name for an identifier of a symbol and 
\emph on
expression
\emph default
 is a legitimate mathematical expression.
 For instance,
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sqrt2 = sqrt(2)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
assigns the value of 
\begin_inset Formula $\sqrt{2}$
\end_inset

 to the symbol 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sqrt2
\end_layout

\end_inset

.
 After making this assignment, you can use the symbol 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sqrt2
\end_layout

\end_inset

 in any expression, and Sage will see it as 
\begin_inset Formula $\sqrt{2}$
\end_inset

.
 For example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sqrt2**2
\end_layout

\begin_layout SageOutput
2
\end_layout

\end_deeper
\begin_layout Standard
Unlike programming languages that allow you to assign to only one variable
 at a time, Sage inherits Python's more flexible assignment, which allows
 you to assign to many variables in one go.
 For example,
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sqrt2, sqrt3 = sqrt(2), sqrt(3)
\begin_inset CommandInset label
LatexCommand label
name "assignment to multiple variables"

\end_inset


\end_layout

\begin_layout SageInput
sqrt2**2
\end_layout

\begin_layout SageOutput
2
\end_layout

\begin_layout SageInput
sqrt3**4
\end_layout

\begin_layout SageOutput
9
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The first line in this sequence of statements assigns 
\emph on
both
\emph default
 
\begin_inset Formula $\sqrt{2}$
\end_inset

 and 
\begin_inset Formula $\sqrt{3}$
\end_inset

 to the variables 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sqrt2
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sqrt3
\end_layout

\end_inset

, 
\emph on
in that order.

\emph default
 The two subsequent statements show that the assignments were indeed correct.
 Because of this, you can probably see that the statement
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sqrt2, sqrt3 = sqrt3, sqrt2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
has the effect of swapping the values of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sqrt2
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sqrt3
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
To create an indeterminate, Sage provides a command, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
var()
\end_layout

\end_inset

.
 Type the name you'd like the indeterminate to have between the parentheses,
 
\emph on
in quotes
\emph default
.
 You can create several such indeterminates by listing them between the
 quotes, as well; just leave a space between each name.
 If successful, Sage will print the names of the newly created indeterminates
 between parentheses.
 For example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('y z')
\end_layout

\begin_layout SageOutput
(y, z)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can then manipulate these variables to your heart's content.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
(y + z) + (z - y)
\end_layout

\begin_layout SageOutput
2*z
\end_layout

\end_deeper
\begin_layout Subsection*
Valid identifiers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:valid identifier names"

\end_inset

Each variable or indeterminate needs a valid identifier.
 Sage accepts identifier names using the following sequences of characters:
\end_layout

\begin_layout Itemize
The name must start with a letter (uppercase or lowercase) or the underscore
 (
\family typewriter

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
_
\end_layout

\end_inset


\family default
).
\end_layout

\begin_layout Itemize
The name can contain any mix of letters, numbers, or the underscore.
\end_layout

\begin_layout Itemize
The name cannot be a 
\emph on
reserved word,
\emph default
 also called a 
\emph on
keyword
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword
\end_layout

\end_inset

.
 You'll encounter these throughout the course, but it's unlikely you'd choose
 them.
\end_layout

\begin_layout Standard
Unlike mathematical convention, the names of variables and indeterminates
 can be longer than one symbol; we see this already in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset

, which Sage offers at the start.
 In many cases, a name that is longer than one symbol can be understood
 much more readily than a name that is only one symbol; compare, for instance,
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

 to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
derivative
\end_layout

\end_inset

.
 On the other hand, if a name is 
\emph on
too
\emph default
 long and you use it repeatedly, it grows tiresome to type and can even
 make a program 
\emph on
harder
\emph default
 to understand.
 A mathematically literate person, for instance, would understand 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ddx
\end_layout

\end_inset

 just as well as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
derivative
\end_layout

\end_inset

, and might well prefer the former to the latter.
 In general, we'd recommend no more than six characters in a name, though
 if a longer name is helpful for clarity you can disregard this guideline,
 and should, just as we will.
\end_layout

\begin_layout Section*
Expressions, and commands to manipulate them
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "page: begin factor, expand, etc."

\end_inset

A mathematical expression
\begin_inset Index idx
status open

\begin_layout Plain Layout
expression!as distinct from equation
\end_layout

\end_inset

 consists of any meaningful combination of mathematical symbols.
 One such expression is an 
\emph on
equation
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
equation
\end_layout

\end_inset

, and in Sage you can assign equations as the values of variables.
 You definitely need to do this from time to time, but the equals sign already
 has a meaning: it assigns the value of an expression to a symbol to create
 a variable! To refer to an equation, then, you use two equals signs in
 a row:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
eq = x**2 - 3 == 1
\end_layout

\end_deeper
\begin_layout Standard
\noindent
As before, if you forget to double the equals signs, Sage will give you
 an error:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
eq = x**2 - 3 = 1
\end_layout

\begin_layout SageError
SyntaxError: can't assign to operator
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We remind the reader that if you see that error message,
\begin_inset Index idx
status open

\begin_layout Plain Layout
SyntaxError@
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
can't assign to operator
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
equation!requires two equals signs
\end_layout

\end_inset

 the problem is almost certainly due to the use of only one equals sign
 when you need two.
\end_layout

\begin_layout Standard
It is often useful to rewrite expressions in different ways, and a computer
 algebra system is, essentially, nothing more than a sophisticated tool
 for rewriting expressions.
 Here are some useful commands for rewriting expressions.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
factor@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factor()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factor(
\end_layout

\end_inset


\emph on
exp
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
factor the expression 
\emph on
exp
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
simplify@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
simplify()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
simplify(
\end_layout

\end_inset


\emph on
exp
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
simplify the expression 
\emph on
exp
\emph default
 a little bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
expand@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
expand()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
expand(
\end_layout

\end_inset


\emph on
exp
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
perform multiplication and other operations on the expression 
\emph on
exp
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
round@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
round()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
round(
\end_layout

\end_inset


\emph on
exp
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $n$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
round the expression 
\emph on
exp
\emph default
 to 
\begin_inset Formula $n$
\end_inset

 places after the decimal
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
Some
\emph default
 commands to manipulate expressions (there are a lot more)
\begin_inset CommandInset label
LatexCommand label
name "page: expand()"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Some words to the wise
\end_layout

\begin_layout Standard
The traditional mathematical symbol for multiplication
\begin_inset Index idx
status open

\begin_layout Plain Layout
multiplication|seealso
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
expand()
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
multiplication
\end_layout

\end_inset

 is the simple 
\begin_inset Formula $\times$
\end_inset

 or the dot symbol 
\begin_inset Formula $\cdot$
\end_inset

.
 Alas, computer keyboards have neither symbol by default; you generally
 have to use a workaround if you want to type the symbol.
 The traditional workaround is to type the asterisk, and that is what Sage
 uses.
\end_layout

\begin_layout Standard
It is common in mathematics to omit the multiplication symbol: 
\begin_inset Formula $2x$
\end_inset

, for instance, or 
\begin_inset Formula $abcd$
\end_inset

.
 You can't do this in Sage; that will give you various errors:
\begin_inset Index idx
status open

\begin_layout Plain Layout
SyntaxError@
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invalid syntax
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
NameError@
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
NameError
\end_layout

\end_inset

!name is not defined@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
name \SpecialChar ldots
 is not defined
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
2x
\end_layout

\begin_layout SageError
SyntaxError: invalid syntax
\end_layout

\begin_layout SageInput
var('a b c d')
\end_layout

\begin_layout SageOutput
(a, b, c, d)
\end_layout

\begin_layout SageInput
abcd
\end_layout

\begin_layout SageError
NameError: name 'abcd' is not defined
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In both cases, Sage thinks you're trying to type the name of an identifier,
 which name it doesn't recognize:
\end_layout

\begin_layout Itemize
For 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2x
\end_layout

\end_inset

, you cannot start an identifier name with a number so the error is in syntax.
\end_layout

\begin_layout Itemize
For 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
abcd
\end_layout

\end_inset

, Sage has no practical way of knowing that you mean the products of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
c
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

, rather than a different identifier named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
abcd
\end_layout

\end_inset

, so the error is in fact one of the name.
 (Remember that in Sage, unlike most mathematics, variables and indeterminates
 can have names longer than one symbol.)
\end_layout

\begin_layout Standard
\noindent
Both of these expressions work fine if you type the multiplication symbol
 where you want it to be.
\begin_inset Foot
status open

\begin_layout Plain Layout
In some versions of Sage there is a way to make multiplication work without
 explicitly writing the multiplication symbol in these circumstances, but
 it is not available by default, so you'd have to run a special command
 for it.
 This is a bad idea for beginners, and you'd still have to type a space
 between the symbols in any case, so we will not describe that technique.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "page: end factor, expand, etc."

\end_inset


\end_layout

\begin_layout Subsection*
Transcendental functions
\end_layout

\begin_layout Standard
Sage offers everything a scientific calculator offers.
 Here are some common transcendental functions that you will find useful
 throughout this text and in your math curriculum:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sin(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cos(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tan(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

,
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the trigonometric functions,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cot(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sec(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
csc(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
evaluated at 
\begin_inset Formula $a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arcsin(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arccos(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arctan(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

,
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the inverse trigonometric functions,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arccot(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arcsec(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arccsc(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
evaluated at 
\begin_inset Formula $a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
exp(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $e^{a}$
\end_inset

 (synonym for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
e**a
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ln(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the natural logarithm of 
\begin_inset Formula $a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log_b(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset

 
\begin_inset Formula $b$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the logarithm base 
\begin_inset Formula $b$
\end_inset

 of 
\begin_inset Formula $a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sage commands for common transcendental functions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
We can also compute the hyperbolic trigonometric functions, and their inverses,
 by appending 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
h
\end_layout

\end_inset

 at the end of the usual name, and before the left parenthesis.
\end_layout

\begin_layout Standard
You may have noticed that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

 is synonymous for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ln(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

.
 This is not the usual custom in American textbooks, where 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

 is synonymous for 
\begin_inset Formula $\log_{10}a$
\end_inset

.
 To compute what Americans call the 
\begin_inset Quotes eld
\end_inset

common
\begin_inset Quotes erd
\end_inset

 logarithm, we have to use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log_b()
\end_layout

\end_inset

 command:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
log(100)
\end_layout

\begin_layout SageOutput
log(100)
\end_layout

\begin_layout SageInput
log_b(100,10)
\end_layout

\begin_layout SageOutput
2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Be careful when trying to use these functions in larger expressions.
 It is common in mathematics to write 
\begin_inset Formula $\sin^{2}\nicefrac{\pi}{4}$
\end_inset

 when you mean 
\begin_inset Formula $\left(\sin\left(\nicefrac{\pi}{4}\right)\right)^{2}$
\end_inset

.
 Sage does not make this distinction.
 There is really only one way to do it right, and that is to write
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!object is not callable@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
\SpecialChar ldots
object is not callable
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
unsupported operand type(s)
\end_layout

\end_inset


\end_layout

\end_inset

 what you mean:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sin^2(pi/4)
\end_layout

\begin_layout SageError
TypeError: 'sage.rings.integer.Integer' object is not callable
\end_layout

\begin_layout SageInput
(sin^2)(pi/4)
\end_layout

\begin_layout SageError
TypeError: unsupported operand type(s) for ** or pow(): 'Function_sin' and
 'int'
\end_layout

\begin_layout SageInput
(sin(pi/4))^2
\end_layout

\begin_layout SageOutput
1/2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
When you see 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

 with these messages, it's a safe bet you've 
\begin_inset Quotes eld
\end_inset

typed
\begin_inset Quotes erd
\end_inset

 something wrong.
\begin_inset Foot
status open

\begin_layout Plain Layout
Technically, Sage is referring to the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 of object, not to what you've 
\begin_inset Quotes eld
\end_inset

typed,
\begin_inset Quotes erd
\end_inset

 but we're desperate enough to roll with the pun.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\noindent
The first kind of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

 should be easy to debug: look for a place where a number is followed immediatel
y by the opening of parentheses — in our case, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2(
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
pi
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\change_deleted -1457430218 1624196154
)
\change_unchanged
/4
\change_inserted -1457430218 1624196156
)
\change_unchanged

\end_layout

\end_inset

.
 When this happens, Sage thinks you're trying to use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2
\end_layout

\end_inset

 as a function.
 The way Sage evaluates expressions, it sees 
\begin_inset Formula $\sin^{2\left(\nicefrac{\pi}{4}\right)}$
\end_inset

, and while it might not seem sensible to us to view 
\begin_inset Formula $2\left(\nicefrac{\pi}{4}\right)$
\end_inset

 as a function 
\begin_inset Formula $2$
\end_inset

 evaluated at the point 
\begin_inset Formula $\nicefrac{\pi}{4}$
\end_inset

, that's how Sage views it.
\end_layout

\begin_layout Itemize
The second kind of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

 can be harder.
 In general, the problem is that you're trying to perform an operation with
 two objects for which Sage doesn't know how to perform the operation.
 Nine times out of ten, you've typed something wrong, so re-examine what
 you've typed.
 In this case, you've typed a convenient shorthand, which Sage doesn't understan
d (with reason).
\end_layout

\begin_layout Subsection*
Mathematical functions and substitution
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
substitution
\end_layout

\end_inset

A useful aspect of indeterminates is that you can substitute values into
 them.
 Unlike assigning a value to a variable, indeterminates don't retain that
 value after the computation.
 We use three ways to substitute in Sage.
\end_layout

\begin_layout Standard
The first way is via the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
subs()
\end_layout

\end_inset

 method, which is shorthand for the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
substitute()
\end_layout

\end_inset

 method.
 Recall that a 
\emph on
method
\emph default
 is a command that is specific to an object.
 You access this feature in the following way:
\end_layout

\begin_layout Itemize
Type the expression's name, then a dot, then 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
subs(
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
\end_layout

\begin_layout Itemize
After the parenthesis, list the assignments.
 There are two ways to do this:
\end_layout

\begin_deeper
\begin_layout Itemize
List each assignment as an equation: 
\emph on
indeterminate
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\emph on
value
\emph default
.
\begin_inset Foot
status open

\begin_layout Plain Layout
This does not always work.
 We will return to the topic later.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
List each assignment as a 
\begin_inset Quotes eld
\end_inset

dictionary
\begin_inset Index idx
status open

\begin_layout Plain Layout
substitution!dictionary
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 To do this, open a pair of braces, list the assignments in the form 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
indeterminate:value
\end_layout

\end_inset

, separating each assignment by a comma, then close the braces.
\end_layout

\end_deeper
\begin_layout Itemize
Now close the parentheses that began after 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
subs
\end_layout

\end_inset

: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
subs(
\end_layout

\end_inset


\emph on
assignments
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Here is an example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = x**2
\end_layout

\begin_layout SageInput
f.subs(x=2)
\end_layout

\begin_layout SageOutput
4
\end_layout

\begin_layout SageInput
f.subs({x:2})
\end_layout

\begin_layout SageOutput
4
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The first substitution illustrates assignment via equations; the second
 illustrates assignment via dictionaries.
 The second approach is the most reliable, error- and warning-free way to
 substitute into any mathematical expression that contains indeterminates.
\begin_inset Foot
status open

\begin_layout Plain Layout
In particular, the second approach works even inside user-defined functions,
 also called a 
\emph on
procedure
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
procedure
\end_layout

\end_inset

, when you want to pass an indeterminate as an argument to the procedure.
 We talk about this later on.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
substitution
\end_layout

\end_inset

A second way is to substitute without specifying the method's name!
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x=2)
\end_layout

\begin_layout SageOutput
4
\end_layout

\begin_layout SageInput
f({x:2})
\end_layout

\begin_layout SageOutput
4
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You 
\emph on
should not
\emph default
 use this approach without specifying the 
\emph on
indeterminate's
\emph default
 name.
 If you have only one indeterminate, as with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 above, you may forget that you need to name it.
 In this case, Sage will issue what's called a warning:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(2)
\end_layout

\begin_layout SageError
DeprecationWarning: Substitution using function-call syntax and unnamed
 arguments is deprecated and will be removed from a future release of Sage;
 you can use named arguments instead, like EXPR(x=..., y=...)
\end_layout

\begin_layout SageOutput
4
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This warning
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Substitution using function-call syntax
\end_layout

\end_inset


\end_layout

\end_inset

 might not appear on the last line.
 It's not an error, and Sage manages to guess the correct substitution and
 outputs the correct answer after the warning.
 In addition, a nice thing about 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

s is that they appear only once, even if you keep making the same 
\begin_inset Quotes eld
\end_inset

mistake.
\begin_inset Quotes erd
\end_inset

 All the same, it's a bit scary to see it there, and it's entirely possible
 that the threat to remove this guess-and-go feature will come to pass,
\begin_inset Foot
status open

\begin_layout Plain Layout
The warning has appeared for quite a few years now.
\end_layout

\end_inset

 so try not to make that mistake.
 This can be a real problem if you provide too many values; Sage
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
the number of arguments
\end_layout

\end_inset


\end_layout

\end_inset

 won't know what to assign where, and will complain:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(3,2,1)
\end_layout

\begin_layout SageError
ValueError: the number of arguments must be less than or equal to 1
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This won't happen when you specify assignments, as Sage knows what goes
 where:
\begin_inset Index idx
status open

\begin_layout Plain Layout
substitution
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = x^2 - y^2
\end_layout

\begin_layout SageInput
f(x=3,w=2,z=1)
\end_layout

\begin_layout SageOutput
-y^2 + 9
\end_layout

\end_deeper
\begin_layout Standard
The third way to substitute is useful when you're using a mathematical expressio
n called a 
\emph on
function.

\emph default
 Recall that a function maps elements of one set, called the 
\emph on
domain,
\emph default
 to elements of another set, called the 
\emph on
range,
\emph default
 in such a way that every input has a well-defined output.
 Defining and using functions is straightforward in Sage:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = x**2
\end_layout

\begin_layout SageInput
f(2)
\end_layout

\begin_layout SageOutput
4
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Functions also have the useful property that they define any indeterminate
 that appears between the parentheses of their definition.
 You can then use those indeterminates in other contexts without first using
 the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
var()
\end_layout

\end_inset

 command.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(w,z) = 4*w**2 - 4*z**2
\end_layout

\begin_layout SageInput
f(3,2)
\end_layout

\begin_layout SageOutput
20
\end_layout

\begin_layout SageInput
factor(w**2 - z**2)
\end_layout

\begin_layout SageOutput
(w + z)*(w - z)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notice that we were able to work with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
w
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset

 directly, even though we didn't define them.
\begin_inset Index idx
status open

\begin_layout Plain Layout
substitution
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Yer basic Calculus
\end_layout

\begin_layout Standard
We now turn to the question of Sage's offerings for the Calculus.
\end_layout

\begin_layout Subsection*
Exact computation
\end_layout

\begin_layout Standard
We look at exact computation first.
 Sage offers three commands that perform the exact computation for calculus.
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
lim(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
lim
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit
\end_layout

\end_inset


\end_layout

\end_inset

compute the two-sided limit of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
lim(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
, dir=
\end_layout

\end_inset


\emph on
direction
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
compute the one-sided limit of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

, with
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
, dir=
\end_layout

\end_inset


\emph on
direction
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
direction
\emph default
 one of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'left'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'right'
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diff(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
derivative
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diff
\end_layout

\end_inset


\end_layout

\end_inset

compute the derivative of 
\begin_inset Formula $f\left(x\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
derivative(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
with respect to 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diff(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $m$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
compute the 
\begin_inset Formula $m$
\end_inset

th derivative
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
derivative(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $m$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 with respect to 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integral(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integral
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integrate
\end_layout

\end_inset


\end_layout

\end_inset

compute the indefinite integral (antiderivative)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integrate(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 with respect to 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integral(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
compute the definite integral over 
\begin_inset Formula $\left[a,b\right]$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integrate(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 with respect to 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab: exact calculus"

\end_inset

Commands for exact computation of limits, derivatives, and integrals
\end_layout

\end_inset


\end_layout

\end_inset

 You can see in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: exact calculus"

\end_inset

 these commands, with both synonyms and different usage options:
\end_layout

\begin_layout Itemize
For limits, we have the synonyms 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
lim()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit()
\end_layout

\end_inset

, which we can use to compute either two-sided limits (default) or one-sided
 limits (specify a direction).
 You must specify both the indeterminate (
\begin_inset Formula $x$
\end_inset

) and the value (
\begin_inset Formula $a$
\end_inset

).
\end_layout

\begin_layout Itemize
For differentiation, we have the synonyms 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diff()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
derivative()
\end_layout

\end_inset

, which we can use either to differentiate once or, by specifying an optional
 argument, to differentiate multiple times.
\end_layout

\begin_layout Itemize
For integration, we have the synonyms 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integral()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integrate()
\end_layout

\end_inset

, which we can use to compute either the indefinite integral, also called
 the antiderivative, or if we specify the limits of integration, to compute
 the definite integral, which you probably first learn as the area under
 a function.
\end_layout

\begin_layout Standard
Let's take a quick look at how these work.
\end_layout

\begin_layout Subsubsection*
Limits
\end_layout

\begin_layout Standard
First up is limits.
 Roughly speaking,
\end_layout

\begin_layout Itemize
\begin_inset Formula ${\displaystyle \lim_{x\rightarrow a^{+}}f\left(x\right)}$
\end_inset

 is the 
\begin_inset Formula $y$
\end_inset

-value approached by 
\begin_inset Formula $f$
\end_inset

 as 
\begin_inset Formula $x$
\end_inset

 approaches 
\begin_inset Formula $a$
\end_inset

 from the right (that is, from numbers larger than 
\begin_inset Formula $a$
\end_inset

);
\end_layout

\begin_layout Itemize
\begin_inset Formula ${\displaystyle \lim_{x\rightarrow a^{-}}f\left(x\right)}$
\end_inset

 is the 
\begin_inset Formula $y$
\end_inset

-value approached by 
\begin_inset Formula $f$
\end_inset

 as 
\begin_inset Formula $x$
\end_inset

 approaches 
\begin_inset Formula $a$
\end_inset

 from the left; and
\end_layout

\begin_layout Itemize
\begin_inset Formula ${\displaystyle \lim_{x\rightarrow a}f\left(x\right)}$
\end_inset

 is the 
\begin_inset Formula $y$
\end_inset

-value approached by 
\begin_inset Formula $f$
\end_inset

 as 
\begin_inset Formula $x$
\end_inset

 approaches 
\begin_inset Formula $a$
\end_inset

 from both sides.
\end_layout

\begin_layout Standard
\noindent
If a function is continuous at 
\begin_inset Formula $a$
\end_inset

, we can find the limit by substitution, which is boring.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = x^2 + 1
\end_layout

\begin_layout SageInput
limit(f(x), x=1)
\end_layout

\begin_layout SageOutput
2
\end_layout

\begin_layout SageInput
f(1)
\end_layout

\begin_layout SageOutput
2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Limits are much more interesting when the function is discontinuous at 
\begin_inset Formula $a$
\end_inset

.
 Here are some problems you should remember from your Calculus courses:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
limit((x**2 - 1)/(x - 1), x=1)
\end_layout

\begin_layout SageOutput
2
\end_layout

\begin_layout SageInput
limit(x/abs(x), x=0)
\end_layout

\begin_layout SageOutput
und
\end_layout

\begin_layout SageInput
limit(x/abs(x), x=0, dir='left')
\end_layout

\begin_layout SageOutput
-1
\end_layout

\begin_layout SageInput
limit(1/x, x=0, dir='left')
\end_layout

\begin_layout SageOutput
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
-Infinity
\end_layout

\end_inset


\end_layout

\begin_layout SageInput
limit(sin(1/x), x=0)
\end_layout

\begin_layout SageOutput
ind
\end_layout

\end_deeper
\begin_layout Standard
\noindent
What do these answers mean?
\end_layout

\begin_layout Itemize
\noindent
The first example shows how Sage automatically detects and works around
 division by zero, when possible.
\end_layout

\begin_layout Itemize
\noindent
The second example shows what can go wrong when there is no way to work
 around it: 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
und
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
und
\end_layout

\end_inset


\end_layout

\end_inset

 is shorthand for, 
\begin_inset Quotes eld
\end_inset

the limit is undefined.
\begin_inset Quotes erd
\end_inset

 In this case, there are one-sided limits from left and right, and they
 are finite limits, but they don't agree with each other.
\end_layout

\begin_layout Itemize
\noindent
The third and fourth examples show how to compute one-sided limits in the
 case where two-sided limits do not exist.
\end_layout

\begin_layout Itemize
\noindent
In some cases, the limit doesn't exist because the function doesn't approach
 any particular value.
 When this happens, but the function remains finite, Sage will reply with
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
ind
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ind
\end_layout

\end_inset

, which is short for, 
\begin_inset Quotes eld
\end_inset

the limit is indefinite, but bounded [that is, not infinite].
\begin_inset Quotes erd
\end_inset

 We see that in the fifth example.
 If however the function waggles between infinities, Sage will reply with
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
und
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Speaking of 
\begin_inset Formula $\nicefrac{1}{x}$
\end_inset

, here is a two-sided result you might not expect:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
limit(1/x, x=0)
\end_layout

\begin_layout SageOutput
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you know the correct answer, then upon seeing that you might be tempted
 to
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\size huge
\color red
PANIC!
\end_layout

\begin_layout Standard
\noindent
\SpecialChar ldots
but you shouldn't.
 Do 
\emph on
not
\emph default
 misread that answer.
 Sage is not claiming the result is 
\begin_inset Formula $\infty$
\end_inset

; it actually has a separate symbol for that.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
limit(1/x, x=0, dir='right')
\end_layout

\begin_layout SageOutput
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notice that this is a 
\emph on
signed
\emph default
 infinity, whereas the previous result was unsigned.
 What the unsigned infinity indicates
\begin_inset Foot
status open

\begin_layout Plain Layout
The subsequent quote is taken from the documentation on Maxima, the subsystem
 Sage uses to evaluate limits.
 At the time of this writing, Sage's documentation lacks this information,
 and can confuse the user by simplifying 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(Infinity == +Infinity).full_simplify()
\end_layout

\end_inset

 to 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

.
 The trouble is that 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset

 has one meaning when it appears in the output of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit()
\end_layout

\end_inset

, and another meaning altogether when you type it at a command line.
\end_layout

\end_inset

 is that 
\begin_inset Quotes eld
\end_inset

the limit of the absolute value of the expression is positive infinity,
 but the limit of the expression itself is not positive infinity or negative
 infinity.
\begin_inset Quotes erd
\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "maxima5.38.1"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
To avoid this, the best thing to do is probably to evaluate your limits
 from each side manually; in this case, Sage reports 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
-Infinity
\end_layout

\end_inset

 as appropriate.
 You can also check whether the limit produces 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
unsigned_infinity
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
unsigned_infinity
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset

!
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
unsigned_infinity
\end_layout

\end_inset


\end_layout

\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
limit(1/x, x=0) == unsigned_infinity
\end_layout

\begin_layout SageOutput
True
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
but in that case you'll probably want to check the left- and right-hand
 limits, anyway.
\end_layout

\begin_layout Subsubsection*
Derivatives
\end_layout

\begin_layout Standard
Recall that the derivative of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

 is
\end_layout

\begin_layout Itemize
the slope of the line tangent to 
\begin_inset Formula $f\left(x\right)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

 (if such a line exists); or, equivalently,
\end_layout

\begin_layout Itemize
the limit of the slopes of the secant lines connecting 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

 and 
\begin_inset Formula $x=b$
\end_inset

, as 
\begin_inset Formula $b\rightarrow a$
\end_inset

; or, equivalently,
\end_layout

\begin_layout Itemize
the limit of the slopes of the secant lines connecting 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

 and 
\begin_inset Formula $x=b$
\end_inset

, as the distance between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 approaches
\begin_inset space ~
\end_inset

0 (
\begin_inset Formula $\Delta x\rightarrow0$
\end_inset

); or, equivalently,
\end_layout

\begin_layout Itemize
\begin_inset Formula ${\displaystyle \lim_{\Delta x\rightarrow0}\frac{f\left(a+\Delta x\right)-f\left(a\right)}{\Delta x}}$
\end_inset

 .
\end_layout

\begin_layout Standard
We can also talk about the derivative as a function; that is, 
\begin_inset Formula $f'\left(x\right)$
\end_inset

 is
\end_layout

\begin_layout Itemize
the value of 
\begin_inset Formula $f'\left(a\right)$
\end_inset

 whenever 
\begin_inset Formula $x=a$
\end_inset

; or, equivalently,
\end_layout

\begin_layout Itemize
\begin_inset Formula ${\displaystyle \lim_{\Delta x\rightarrow0}\frac{f\left(x+\Delta x\right)-f\left(x\right)}{\Delta x}}$
\end_inset

 , which you probably spent a lot of time manipulating in your calculus
 class with an 
\begin_inset Formula $h$
\end_inset

 instead of a 
\begin_inset Formula $\Delta x$
\end_inset

.
\end_layout

\begin_layout Standard
Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diff()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
derivative()
\end_layout

\end_inset

 functions compute the derivative as a function; if you want to compute
 the derivative at a point, define a function and substitute.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
diff(x**2, x)
\end_layout

\begin_layout SageOutput
2*x
\end_layout

\begin_layout SageInput
df(x) = diff(x**2, x)
\end_layout

\begin_layout SageInput
df(1)
\end_layout

\begin_layout SageOutput
2
\end_layout

\begin_layout SageInput
diff(cos(x), x, 1042)
\end_layout

\begin_layout SageOutput
-cos(x)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That last example gave us the 1042nd derivative of 
\begin_inset Formula $\cos x$
\end_inset

.
 That would take an awful long time to do by hand, unless you happened to
 notice a pattern.
\end_layout

\begin_layout Subsubsection*
Integrals
\end_layout

\begin_layout Standard
The word 
\begin_inset Quotes eld
\end_inset

integral
\begin_inset Quotes erd
\end_inset

 has two different meanings.
\end_layout

\begin_layout Standard
The 
\emph on
indefinite
\emph default
 integral of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 is its antiderivative; that is, 
\begin_inset Formula $\int f\left(x\right)dx=F\left(x\right)$
\end_inset

 where 
\begin_inset Formula $F$
\end_inset

 is any function such that 
\begin_inset Formula $F'\left(x\right)=f\left(x\right)$
\end_inset

.
 There are actually infinitely many such antiderivatives; an important result
 of calculus is that any two of them differ only by a constant.
 You usually resolve this in calculus by adding a 
\begin_inset Quotes eld
\end_inset

constant of integration
\begin_inset Quotes erd
\end_inset

 to your integral; for example,
\begin_inset Formula 
\[
\int\cos2x\ dx=\frac{1}{2}\sin2x+C.
\]

\end_inset

As you will see, Sage omits the constant of integration.
\begin_inset Foot
status open

\begin_layout Plain Layout
Your calculus instructor would be appalled, absolutely appalled.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
definite
\emph default
 integral of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 over the interval 
\begin_inset Formula $I$
\end_inset

 is the limit of weighted sums over 
\begin_inset Formula $n$
\end_inset

 subintervals of 
\begin_inset Formula $I$
\end_inset

 as 
\begin_inset Formula $n$
\end_inset

 approaches 
\begin_inset Formula $\infty$
\end_inset

.
 Speaking precisely,
\begin_inset Formula 
\[
\int_{I}f\left(x\right)dx=\lim_{n\rightarrow\infty}\sum_{i=1}^{n}f\left(x_{i}\right)\Delta x,\quad\textrm{where }x_{i}\textrm{ is on the }i\textrm{th subinterval of }I.
\]

\end_inset

The interval can be either finite — 
\begin_inset Formula $\left[a,b\right]$
\end_inset

 — or infinite — 
\begin_inset Formula $\left[a,\infty\right)$
\end_inset

 or 
\begin_inset Formula $\left(-\infty,b\right]$
\end_inset

 — so long as the integral converges and is not improper.
 If it is improper, you have to break it into pieces; for example,
\begin_inset Formula 
\[
\int_{-1}^{1}\frac{1}{x^{3}}dx=\lim_{t\rightarrow0^{-}}\int_{-1}^{t}\frac{1}{x^{3}}dx+\lim_{t\rightarrow0^{+}}\int_{t}^{1}\frac{1}{x^{3}}dx.
\]

\end_inset

Sage, though, can handle such integrals without your breaking them apart.
\end_layout

\begin_layout Standard
You have seen from the table that Sage allows you to compute both indefinite
 and definite integrals.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integral is divergent.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
integration!exact
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
integrate(x**2, x)
\end_layout

\begin_layout SageOutput
1/3*x^3
\end_layout

\begin_layout SageInput
integrate(x**2, x, 0, 1)
\end_layout

\begin_layout SageOutput
1/3
\end_layout

\begin_layout SageInput
integrate(1/x**(1/3), x, -1, 1)
\end_layout

\begin_layout SageOutput
0
\end_layout

\begin_layout SageInput
integrate(1/x, x, 1, infinity)
\end_layout

\begin_layout SageError
ValueError: Integral is divergent.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
These seems straightforward:
\end_layout

\begin_layout Itemize
\noindent
the first gives us 
\begin_inset Formula $\int x^{2}dx$
\end_inset

;
\end_layout

\begin_layout Itemize
\noindent
the second gives us 
\begin_inset Formula $\int_{0}^{1}x^{2}dx$
\end_inset

;
\end_layout

\begin_layout Itemize
\noindent
the third gives us 
\begin_inset Formula $\int_{-1}^{1}\nicefrac{1}{\sqrt[3]{x}}\ dx$
\end_inset

, which is improper due to an asymptote at 
\begin_inset Formula $x=0$
\end_inset

, though Sage handles it with ease; and
\end_layout

\begin_layout Itemize
\noindent
the fourth gives us 
\begin_inset Formula $\int_{1}^{\infty}\nicefrac{1}{x}\ dx$
\end_inset

, which does in fact diverge; you need a power larger than
\begin_inset space ~
\end_inset

1 in the denominator to converge.
\end_layout

\begin_layout Standard
\noindent
Sage itself is aware of this latter property; we show this over a series
 of steps.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Computation failed since Maxima requested additional constraints
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('p')
\end_layout

\begin_layout SageOutput
p
\end_layout

\begin_layout SageInput
integrate(1/x**p, x, 1, infinity)
\end_layout

\begin_layout SageError
ValueError: Computation failed since Maxima requested additional constraints;
 using the 'assume' command before evaluation *may* help (example of legal
 syntax is 'assume(q>0)', see 'assume?' for more details)
\end_layout

\begin_layout SageError
Is p positive, negative or zero?
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Oops! That's a perfectly sensible request.
 The error message is also helpful: it introduces a new command to us, the
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
assume()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
assume()
\end_layout

\end_inset


\end_layout

\end_inset

 command.
 We won't make very much use of this, but this is one case where it comes
 in handy.
 Let's assume 
\begin_inset Formula $p>1$
\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
integration!exact
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
assume(p > 1)
\end_layout

\begin_layout SageInput
integrate(1/x**p, x, 1, infinity)
\end_layout

\begin_layout SageOutput
1/(p - 1)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage asserts that 
\begin_inset Formula 
\[
\int_{1}^{\infty}\frac{1}{x^{p}}\ dx=\frac{1}{p-1}
\]

\end_inset

whenever 
\begin_inset Formula $p>1$
\end_inset

, a fact that you should be able to verify by hand.
 Now, if we assume that 
\begin_inset Formula $p$
\end_inset

 is smaller than
\begin_inset space ~
\end_inset

1, we encounter two problems.
 The first you might not expect:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Assumption is inconsistent
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
assume(p <= 1)
\end_layout

\begin_layout SageError
ValueError: Assumption is inconsistent
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you really want to change this, you can; use the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
assume()
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
forget()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
forget()
\end_layout

\end_inset

|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
assume()
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
forget()
\end_layout

\end_inset

 command to forget anything you 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
assume()
\end_layout

\end_inset

'd.
\begin_inset Foot
status open

\begin_layout Plain Layout
You can also 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
forget()
\end_layout

\end_inset

 only part of what you assumed.
 So aside from the use of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
forget()
\end_layout

\end_inset

 as we have shown it, you could type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
forget(p <= 1)
\end_layout

\end_inset

.
 This would be especially useful if several assumptions were in play, and
 you wanted to forget only one.
\end_layout

\end_inset

 We really do want to change this, so,
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Computation failed since Maxima requested additional constraints
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
forget()
\end_layout

\begin_layout SageInput
assume(p <= 1)
\end_layout

\begin_layout SageInput
integrate(1/x**p, x, 1, infinity)
\end_layout

\begin_layout SageError
ValueError: Computation failed since Maxima requested additional constraints;
 using the 'assume' command before evaluation *may* help (example of legal
 syntax is 'assume(p>0)', see 'assume?' for more details)
\end_layout

\begin_layout SageError
Is p positive, negative or zero?
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That may surprise you, but not for long: if 
\begin_inset Formula $p\leq0$
\end_inset

 then we're looking at 
\begin_inset Formula $x^{q}$
\end_inset

 with 
\begin_inset Formula $q\geq0$
\end_inset

, whereas 
\begin_inset Formula $p>0$
\end_inset

 is what we had in mind.
 Since Sage can't read our minds, let's add the assumption:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integral is divergent.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
integration!exact
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
assume(p>0)
\end_layout

\begin_layout SageInput
integrate(1/x**p, x, 1, infinity)
\end_layout

\begin_layout SageError
ValueError: Integral is divergent.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Although it reports an error, we should consider this error a success, as
 it verifies what we already knew.
\begin_inset Foot
status open

\begin_layout Plain Layout
It may come as a surprise that Sage requests us to assume that 
\begin_inset Formula $p>0$
\end_inset

 when, in fact, the integral diverges for 
\begin_inset Formula $p\leq0$
\end_inset

, as well.
 From the 
\emph on
mathematical
\emph default
 point of view, the only assumption we need is 
\begin_inset Formula $p\leq1$
\end_inset

.
 Branching through all the special cases can be too complicated to implement
 in computer science, however, so the user must frequently work out some
 of these things on his own.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Don't forget to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
forget()
\end_layout

\end_inset

 when you're done 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
assume()
\end_layout

\end_inset

ing.)
\end_layout

\begin_layout Subsection*
Numerical integration
\end_layout

\begin_layout Standard
Integrals feature a twist that derivatives do not: you cannot always compute
 an 
\begin_inset Quotes eld
\end_inset

elementary form
\begin_inset Quotes erd
\end_inset

 of an integral.
\begin_inset Foot
status open

\begin_layout Plain Layout
The precise definition of an 
\begin_inset Quotes eld
\end_inset

elementary form
\begin_inset Quotes erd
\end_inset

 is beyond the scope of this text, but you can basically think of it as
 any algebraic combination of the functions you studied in precalculus,
 including trigonometric, exponential, logarithmic, and hyperbolic functions.
\end_layout

\end_inset

 Consider, for instance, 
\begin_inset Formula $\int e^{x^{2}}dx$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
integrate(e**(x**2), x)
\end_layout

\begin_layout SageOutput
-1/2*I*sqrt(pi)*erf(I*x)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You have probably not seen 
\begin_inset Formula $\textrm{erf}\left(x\right)$
\end_inset

 before, and that's fine.
\begin_inset Foot
status open

\begin_layout Plain Layout
For those who are interested, it's the Gaussian error function, and you're
 likely to see it in a probability course.
\end_layout

\end_inset

 The point is that it's not an elementary function.
 If you try to get help on it in Sage, you will see the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
erf?
\end_layout

\begin_layout SageOutput
\SpecialChar ldots

\end_layout

\begin_layout SageOutput
erf(x) = frac{2}{sqrt{pi}} int_0^x e^{-t^2} dt.
\end_layout

\begin_layout SageOutput
\SpecialChar ldots

\end_layout

\end_deeper
\begin_layout Standard
\noindent
In other words,
\begin_inset Formula 
\[
\textrm{erf}\left(x\right)=\frac{2}{\sqrt{\pi}}\int_{0}^{x}e^{-t^{2}}dt.
\]

\end_inset

So there's no way to simplify this further.
\end_layout

\begin_layout Standard
The following example appears when you try to compute the arclength of an
 ellipse centered at the origin, with horizontal axis of length
\begin_inset space ~
\end_inset


\begin_inset Formula $2$
\end_inset

 and vertical axis of length
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = sqrt(1 - x^2/4)
\end_layout

\begin_layout SageInput
df(x) = diff(f, x)
\end_layout

\begin_layout SageInput
integrate(sqrt(1+(df(x))**2), x, -2, 2)
\end_layout

\begin_layout SageOutput
integrate(sqrt(-1/4*x^2/(x^2 - 4) + 1), x, -2, 2)
\begin_inset CommandInset label
LatexCommand label
name "elliptic integral does not simplify"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\noindent
In this case, Sage's answer to the integral is just another integral.
 That doesn't seem especially helpful, but there's really not much Sage
 can do.
\begin_inset Foot
status open

\begin_layout Plain Layout
At least one other computer algebra system will answer something to the
 effect of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
EllipticE(
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, which looks promising until you read the documentation on it.
 Like 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
erf(
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, it just restates the original integral.
 In this case, the name reflects that it's an 
\emph on
elliptic integral
\emph default
.
\end_layout

\end_inset

 The integral does not reduce to elementary terms.
\end_layout

\begin_layout Standard
In some cases, an integral 
\emph on
does
\emph default
 reduce to elementary terms, but you get something so complicated that you
 might well prefer not to work with it.
 Here's an example.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
integrate(x^10*cos(x), x)
\end_layout

\begin_layout SageOutput
10*(x^9 - 72*x^7 + 3024*x^5 - 60480*x^3 + 362880*x)*cos(x) + (x^10 - 90*x^8
 + 5040*x^6 - 151200*x^4 + 1814400*x^2 - 3628800)*sin(x)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
and that's not even that bad.
\end_layout

\begin_layout Standard
In many cases, you really just want a numerical value for the integral.
 Perhaps you want the area, or some accumulation of values, or some other
 application.
 In this case, you don't have to go through the indefinite integral; you
 can approximate the definite integral using one of the techniques of numerical
 integration.
 Sage's command for this is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
numerical_integral()
\end_layout

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
numerical_integral()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
integration!approximate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
numerical_integral(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
estimate 
\begin_inset Formula $\int_{a}^{b}f\left(x\right)dx$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
numerical_integral(
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $a$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $b$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
, max_points=
\end_layout

\end_inset


\begin_inset Formula $n$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
estimate 
\begin_inset Formula $\int_{a}^{b}f\left(x\right)dx$
\end_inset

 using no more than 
\begin_inset Formula $n$
\end_inset

 points
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Its usage requires a little explanation, but before we do that, let's consider
 an example.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
numerical_integral(sqrt(1+(df(x))**2), -2, 2)
\end_layout

\begin_layout SageOutput
(4.844224058045445, 4.5253950830572916e-06)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Right away you should notice several differences.
\end_layout

\begin_layout Itemize
We do 
\emph on
not
\emph default
 specify the variable of integration for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
numerical_integral()
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
The result consists of two numbers.
 The second one is in a kind of scientific notation, which in this case
 you should recall as being approximately 
\begin_inset Formula $4.525\times10^{-6}$
\end_inset

.
\end_layout

\begin_layout Standard
What we're receiving as our answer here is an ordered pair.
 The first value is Sage's approximation of the integral; the second is
 an estimate of the error.
 In other words, our answer is certainly correct up to the 4th decimal place,
 though rounding prompted by the 6th decimal place (where the error may
 occur) creates some ambiguity in the 5th.
 We can say that the integral lies within the interval 
\begin_inset Formula $\left(4.8442195,4.8442286\right)$
\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
A, err = numerical_integral(sqrt(1+(df(x))**2), -2, 2)
\end_layout

\begin_layout SageInput
A - err, A + err
\end_layout

\begin_layout SageOutput
(4.844219532650363, 4.844228583440528)
\end_layout

\end_deeper
\begin_layout Section*
Mathematical structures in Sage
\end_layout

\begin_layout Standard
This is an opportune time to introduce you to one of the more powerful features
 of a computer algebra system: its ability to work in different mathematical
 contexts.
 In this course we will focus especially on 
\emph on
rings
\begin_inset Index idx
status open

\begin_layout Plain Layout
ring
\end_layout

\end_inset


\emph default
 and 
\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout
field
\end_layout

\end_inset

fields:
\end_layout

\begin_layout Description
A
\begin_inset space ~
\end_inset

ring is a set where addition and multiplication behave according to the
 properties you'd expect:
\end_layout

\begin_deeper
\begin_layout Description
Closure Adding or multiplying two elements of the ring gives another element
 of the ring.
\end_layout

\begin_layout Description
Associative The result of adding or multiplying three elements doesn't depend
 on which two you add or multiply first: 
\begin_inset Formula $a+\left(b+c\right)=\left(a+b\right)+c$
\end_inset

 and 
\begin_inset Formula $a\left(bc\right)=\left(ab\right)c$
\end_inset

.
\end_layout

\begin_layout Description
Identities You can find two elements 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

, for which adding
\begin_inset space ~
\end_inset


\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 changes no element of the ring, and multiplying by
\begin_inset space ~
\end_inset


\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 changes no element of the ring: 
\begin_inset Formula $a+0=a=0+a$
\end_inset

 and 
\begin_inset Formula $a\times1=a=1\times a$
\end_inset

.
\end_layout

\begin_layout Description
Distributive You can distribute multiplication over addition: 
\begin_inset Formula $a\left(b+c\right)=ab+ac$
\end_inset

.
\end_layout

\begin_layout Standard
Addition enjoys two additional properties:
\end_layout

\begin_layout Description
Commutative
\begin_inset space ~
\end_inset

addition The result of adding two elements of the ring doesn't depend on
 their order in the sum: 
\begin_inset Formula $a+b=b+a$
\end_inset

.
\end_layout

\begin_layout Description
Additive
\begin_inset space ~
\end_inset

inverses You can find the 
\begin_inset Quotes eld
\end_inset

opposite
\begin_inset Quotes erd
\end_inset

 of any element, so that adding them returns 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

: 
\begin_inset Formula $d+b=0=b+d$
\end_inset

.
 We usually denote this opposite as a negative, so that 
\begin_inset Formula $a+\left(-a\right)=0=\left(-a\right)+a$
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
You can also think of this property as 
\begin_inset Quotes eld
\end_inset

closure under subtraction,
\begin_inset Quotes erd
\end_inset

 but people don't usually speak of it in such terms.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Notice that a ring 
\emph on
might not
\emph default
 have commutative multiplication or multiplicative inverses.
 Omitting this allows us to organize sets of matrices as rings, as matrices
 satisfy the properties listed above, but do not satisfy the other two.
\end_layout

\begin_layout Description
A
\begin_inset space ~
\end_inset

field is a commutative ring where you can also 
\begin_inset Quotes eld
\end_inset

divide,
\begin_inset Quotes erd
\end_inset

 by which we mean, you can find a 
\begin_inset Quotes eld
\end_inset

multiplicative inverse
\begin_inset Quotes erd
\end_inset

 for every nonzero element, by which we mean, for each nonzero 
\begin_inset Formula $a$
\end_inset

 you can find a 
\begin_inset Formula $b$
\end_inset

 
\emph on
in the same ring
\emph default
 such that 
\begin_inset Formula $ab=1$
\end_inset

.
 The analogy to division is only that: an analogy; we 
\emph on
do not
\emph default
 typically use the division symbol outside of the systems you're accustomed
 to; we write them with an exponent of 
\begin_inset Formula $-1$
\end_inset

: rather than 
\begin_inset Formula $a/b$
\end_inset

, we write 
\begin_inset Formula $a\cdot b^{-1}$
\end_inset

.
\end_layout

\begin_layout Subsection*
The usual suspects
\end_layout

\begin_layout Standard
You have already spent 
\emph on
a lot
\emph default
 of time working in rings and fields, though you probably were not told
 this.
 Sage offers you a number of rings and fields directly:
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Set
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Traditional
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Structure
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sage symbol
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
mathematical
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
symbol
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
integers!integer ring
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
integers|seealso
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZZ
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

Integers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{Z}$
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZZ
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ZZ@
\begin_inset Formula $\mathbb{Z}$
\end_inset

|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

integers, integer ring
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ring
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ZZ
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
rational numbers!rational field
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
rational numbers|seealso
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
QQ
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

Rational numbers
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{Q}$
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
QQ@
\begin_inset Formula $\mathbb{Q}$
\end_inset

|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

rational numbers
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
field
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
QQ
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(integer fractions)
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
real numbers|seealso
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
real numbers!real field
\end_layout

\end_inset

Real numbers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{R}$
\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
RR@
\begin_inset Formula $\mathbb{R}$
\end_inset

|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

real numbers
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset

 (but see below)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Complex
\begin_inset Index idx
status open

\begin_layout Plain Layout
complex numbers!complex field
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
complex numbers|seealso
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

 numbers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{C}$
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
CC@
\begin_inset Formula $\mathbb{C}$
\end_inset

|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

complex numbers
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
field
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset

 (but see below)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
QQ
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Common rings and fields in Sage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
When you type some value, Sage makes an educated guess as to which type
 of object you want.
 You can find this using a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type()
\end_layout

\end_inset


\end_layout

\end_inset

 statement:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = 1
\end_layout

\begin_layout SageInput
type(a)
\end_layout

\begin_layout SageOutput
<type 'sage.rings.integer.Integer'>
\end_layout

\begin_layout SageInput
b = 2/3
\end_layout

\begin_layout SageInput
type(b)
\end_layout

\begin_layout SageOutput
<type 'sage.rings.rational.Rational'>
\end_layout

\begin_layout SageInput
c = 2./3
\end_layout

\begin_layout SageInput
type(c)
\end_layout

\begin_layout SageOutput
<type 'sage.rings.real_mpfr.RealLiteral'>
\end_layout

\begin_layout SageInput
d = 1 + I
\end_layout

\begin_layout SageInput
type(d)
\end_layout

\begin_layout SageOutput
<type 'sage.symbolic.expression.Expression'>
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage does not seem to report the last one to be a complex number, but a
 symbolic expression.
 While 
\begin_inset Formula $1+i$
\end_inset

 is in fact a symbolic expression, and that will suffice for most of our
 purposes, we can compel Sage to view it as an element of 
\begin_inset Formula $\mathbb{C}$
\end_inset

.
 We do this by typing 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset

, followed by parentheses, in which we type the complex number we want to
 work with.
 The drawback is that we lose the precision of 
\emph on
symbolic
\emph default
 computation:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
d2 = CC(1+I)
\end_layout

\begin_layout SageInput
type(d2)
\end_layout

\begin_layout SageOutput
<type 'sage.rings.complex_number.ComplexNumber'>
\end_layout

\begin_layout SageInput
d3 = d2 + (1 - I)
\end_layout

\begin_layout SageInput
d3
\end_layout

\begin_layout SageOutput
2.00000000000000
\end_layout

\end_deeper
\begin_layout Standard
Do you see what happened? Instead of receiving the 
\emph on
exact
\emph default
 value
\begin_inset space ~
\end_inset

2, we received an approximation of
\begin_inset space ~
\end_inset

2.
 In this case, the approximation looks exact, but that's beside the point;
 work it hard enough, and error will start to creep in.
 For instance:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
d3 - 1.999999999999
\end_layout

\begin_layout SageOutput
1.00008890058234e-12
\end_layout

\end_deeper
\begin_layout Standard
Why did this happen? In order to compute effectively in the real and complex
 fields, Sage resorts to approximations of the numbers involved.
 You'll see this right away if you look at 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d2
\end_layout

\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
d2
\end_layout

\begin_layout SageOutput
1.00000000000000 + 1.00000000000000*I
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The very process of converting 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d2
\end_layout

\end_inset

 into a 
\begin_inset Quotes eld
\end_inset

complex
\begin_inset Quotes erd
\end_inset

 number means we have surrendered some precision.
 The same will happen if you work in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset

.
 Sometimes you just have to do that, but it's a fact you have to keep in
 mind.
 Forgetting it can lead to puzzling results, such as:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
2.99 - 2.9
\end_layout

\begin_layout SageOutput
0.0900000000000003
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Oops!
\end_layout

\begin_layout Standard
It is often useful to separate the real and imaginary parts of a complex
 number.
 Sage provides two useful commands to do this.
 They work whether the complex number is a symbolic expression or the number
 lies in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
complex number!real and imaginary parts|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
real_part()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
imag_part()
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
real_part()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
real_part(
\end_layout

\end_inset


\emph on
z
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
real part of 
\emph on
z
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
imag_part()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
imag_part(
\end_layout

\end_inset


\emph on
z
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
imaginary part of 
\emph on
z
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
real_part(12-3*I)
\end_layout

\begin_layout SageOutput
12
\end_layout

\begin_layout SageInput
imag_part(CC(12-3*I))
\end_layout

\begin_layout SageOutput
-3.00000000000000
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The norm of a complex number is also available.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
norm()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
norm(
\end_layout

\end_inset


\emph on
z
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
norm of 
\emph on
z
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
If you are unfamiliar with the norm of a complex number, it is comparable
 to the absolute value of a real number, in that it gives an idea of the
 number's size.
 Speaking precisely, the norm is
\begin_inset Index idx
status open

\begin_layout Plain Layout
complex numbers!norm
\end_layout

\end_inset


\begin_inset Formula 
\[
\left\Vert a+bi\right\Vert =a^{2}+b^{2}.
\]

\end_inset

If this reminds you of the Pythagorean Theorem, it should, as it is nearly
 identical to the Euclidean distance formula.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
norm(2+3*I)
\end_layout

\begin_layout SageOutput
13
\end_layout

\end_deeper
\begin_layout Standard
You can sometimes convert from reals to integers, but not always.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!Attempt to coerce@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Attempt to coerce \SpecialChar ldots

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = ZZ(1.0)
\end_layout

\begin_layout SageInput
a
\end_layout

\begin_layout SageOutput
1
\end_layout

\begin_layout SageInput
b = ZZ(1.2)
\end_layout

\begin_layout SageError
TypeError: Attempt to coerce non-integral RealNumber to Integer
\end_layout

\end_deeper
\begin_layout Standard
Another symbol you will encounter from time to time is 
\begin_inset Formula $\mathbb{N}$
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
NN@
\begin_inset Formula $\mathbb{N}$
\end_inset

|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

natural numbers
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

, the set of nonnegative integers, also called the 
\series bold
natural numbers
\series default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
natural numbers
\end_layout

\end_inset

 This is not a ring because, for instance, 
\begin_inset Formula $1\in\mathbb{N}$
\end_inset

 but 
\begin_inset Formula $-1\not\in\mathbb{N}$
\end_inset

.
\end_layout

\begin_layout Subsection*
The unusual suspects
\end_layout

\begin_layout Standard
A 
\emph on
lot
\emph default
 of the applications of mathematics of the last half-century arise in the
 context of 
\begin_inset Quotes eld
\end_inset

modular arithmetic.
\begin_inset Quotes erd
\end_inset

 Without going into too much detail, modular arithmetic consists of performing
 an operation, then taking the remainder after division by a fixed number,
 called the modulus.
 A very old example of this arises when dealing with time:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
current_hour = 8
\end_layout

\begin_layout SageInput
hours_busy = 20
\end_layout

\begin_layout SageInput
time_free = current_hour + hours_busy
\end_layout

\begin_layout SageInput
time_free
\end_layout

\begin_layout SageOutput
28
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The problem here is obvious: there is no 
\begin_inset Quotes eld
\end_inset

28th
\begin_inset Quotes erd
\end_inset

 hour of the day.
 We can find the correct time by dividing by 12, and taking the remainder:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
time_free = (current_hour + hours_busy) % 12
\end_layout

\begin_layout SageInput
time_free
\end_layout

\begin_layout SageOutput
4
\end_layout

\end_deeper
\begin_layout Standard
\noindent
It is now obvious that the individual in question is not free until 4:00.
\end_layout

\begin_layout Standard
Explicitly asking for modular arithmetic in each operation is burdensome.
 It turns out that modular arithmetic makes for a perfectly acceptable ring,
 so that we can add one new row to our table of rings and fields:
\begin_inset Index idx
status open

\begin_layout Plain Layout
modular arithmetic|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

integers
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Set
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Traditional
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Structure
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sage symbol
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
mathematical
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
symbol
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
integers!modulo 
\begin_inset Formula $n$
\end_inset


\end_layout

\end_inset

Integers modulo 
\begin_inset Formula $n$
\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ring
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
quo@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.quo()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ZZ.quo(
\end_layout

\end_inset


\emph on
n
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(
\begin_inset Formula $n>1$
\end_inset

)
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="middle" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Common rings and fields in Sage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Let's see how this works in practice.
 We'll test our previous problem by working in 
\begin_inset Formula $\mathbb{Z}_{12}$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Z_12 = ZZ.quo(12)
\end_layout

\begin_layout SageInput
current_hour = Z_12(8)
\end_layout

\begin_layout SageInput
hours_busy = Z_12(20)
\end_layout

\begin_layout SageInput
time_free = current_hour + hours_busy
\end_layout

\begin_layout SageInput
time_free
\end_layout

\begin_layout SageOutput
4
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The advantages to this approach will not look as apparent here as they are
 in practice, but they really are there: exponentiation by large numbers,
 for instance, is much faster when we go this way.
 Because modular arithmetic is a powerful tool, we will have you work with
 it quite a lot from here on.
\end_layout

\begin_layout Subsection*
The even-more-unusual suspects
\end_layout

\begin_layout Standard
The ring structures you've seen here describe a 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 of data.
 For instance, Sage views elements of 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZZ
\end_layout

\end_inset

 as types of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sage.rings.integer.Integer
\end_layout

\end_inset

, which we can abbreviate as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
integers!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
type(Integer(3))
\end_layout

\begin_layout SageOutput
<type 'sage.rings.integer.Integer'>
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Now, bare-bones Python does not understand Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 type, but uses another type to represent integers, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
integers!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset


\end_layout

\end_inset

.
 Sage is smart enough to recognize when an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 and an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 have the same value, and you can convert between the two without too much
 trouble (at least in 
\begin_inset Quotes eld
\end_inset

ordinary
\begin_inset Quotes erd
\end_inset

 usage).
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
type(int(3))
\end_layout

\begin_layout SageOutput
<type 'int'>
\end_layout

\begin_layout SageInput
int(3) == Integer(3)
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
type(int(3)) == type(Integer(3))
\end_layout

\begin_layout SageOutput
False
\end_layout

\begin_layout SageInput
Integer(int(Integer(int(3))))
\end_layout

\begin_layout SageOutput
3
\end_layout

\end_deeper
\begin_layout Standard
You might wonder why Sage implements its own 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 type.
 One reason is that older versions of Python placed a maximum size on an
 integer; for instance, 64-bit machines would have worked only with integers
 
\begin_inset Formula $\left[-2^{64},2^{64}-1\right]$
\end_inset

.
 Newer versions of Python allow objects of type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 to be any size, so this isn't so important any more, but it is still necessary.
 The details aren't important, but you should know that this alternate represent
ation of integers exists.
\begin_inset Foot
status open

\begin_layout Plain Layout
Basically, Sage works with rings, and an element of a ring is called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Element
\end_layout

\end_inset

.
 Since this is special to Sage, which uses Python 
\emph on
but is not the same thing
\emph default
, a Python 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 cannot 
\emph on
be
\emph default
 an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Element
\end_layout

\end_inset

.
 On the other hand, Sage can 
\begin_inset Quotes eld
\end_inset

wrap
\begin_inset Quotes erd
\end_inset

 Python 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 as an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

, but for more somewhat complicated reasons Sage cannot consider that an
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

, either.
 In any case, Sage actually implements 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 using a system called 
\begin_inset CommandInset href
LatexCommand href
name "GMP"
target "https://gmplib.org/"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the same way, there are at least two ways to represent approximations
 to real numbers in Sage.
 One consists of elements of 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
floating point!
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset


\end_layout

\end_inset

, which strictly speaking is of type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sage.rings.real_mpfr.RealLiteral
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
floating point!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
RealLiteral
\end_layout

\end_inset


\end_layout

\end_inset

.
 (You can't abbreviate it easily, but you can use 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset

 in conversions.) A second is of type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
RealNumber
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
floating point!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
RealNumber
\end_layout

\end_inset


\end_layout

\end_inset

.
 From Python Sage inherits a third, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
float
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
floating point!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
float
\end_layout

\end_inset


\end_layout

\end_inset

.
 Again, these three types are different, but you can convert between them
 and 
\emph on
generally
\emph default
 work without issue.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
type(float(3))
\end_layout

\begin_layout SageOutput
<type 'float'>
\end_layout

\begin_layout SageInput
type(RR(3))
\end_layout

\begin_layout SageOutput
<type 'sage.rings.real_mpfr.RealLiteral'>
\end_layout

\begin_layout SageInput
type(RR(3)) == type(3.0)
\end_layout

\begin_layout SageOutput
False
\end_layout

\begin_layout SageInput
type(RR(3)) == type(float(3))
\end_layout

\begin_layout SageOutput
False
\end_layout

\begin_layout SageInput
RR(3) == float(3) == RealNumber(3)
\end_layout

\begin_layout SageOutput
True
\end_layout

\end_deeper
\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Although it works for exponentiation, you should avoid using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
^
\end_layout

\end_inset

 symbol in that context.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
6 // 4 == 1 and 6 % 4 == 2
\end_layout

\end_inset

 .
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 Although 
\begin_inset Formula $i$
\end_inset

 is a fixed mathematical constant and Sage provides the symbol 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
I
\end_layout

\end_inset

 to represent it, you cannot always count on the equation 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
I**2 == -1
\end_layout

\end_inset

 to be true in Sage.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 You use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
var()
\end_layout

\end_inset

 command to create new variables.
 You create new indeterminates by assigning values to them.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 If you assign 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
e = 7
\end_layout

\end_inset

 and later want to restore 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
e
\end_layout

\end_inset

 to its original value, so that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ln(e) == 1
\end_layout

\end_inset

, use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
reset('e')
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 The name 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
l337
\end_layout

\end_inset

 satisfies the requirements for a Sage identifier.
 (The first symbol is a lower-case L.)
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 The name 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
1337
\end_layout

\end_inset

 satisfies the requirements for a Sage identifier.
 (The first symbol is the number 1.)
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 In Sage, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(
\begin_inset Formula $a$
\end_inset

) == ln(
\begin_inset Formula $a$
\end_inset

)
\end_layout

\end_inset

 for any value of 
\begin_inset Formula $a$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 Before defining a function with the indeterminate 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
w
\end_layout

\end_inset

, you have to define the indeterminate 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
w
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10 If a one-sided 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit()
\end_layout

\end_inset

 returns 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset

, then the actual limit is 
\begin_inset Formula $\infty$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
11.
 If a two-sided 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit()
\end_layout

\end_inset

 returns 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset

, then you need to check the limit from both sides.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
12.
 Sage can simplify all integrals to elementary form using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
integral()
\end_layout

\end_inset

 command.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
13.
 An indefinite integral has infinitely many solutions, but Sage provides
 only one.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
14.
 Sage cannot handle definite integrals when there is an asymptote in the
 interval.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
15.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Z_12(12) == 0
\end_layout

\end_inset

 , where 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Z_12
\end_layout

\end_inset

 is defined as above.
\end_layout

\begin_layout Standard

\emph on
Bonus:
\emph default
 The answer to all these True/False questions is 
\begin_inset Quotes eld
\end_inset

False.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection*
Multiple Choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 If you encounter an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
AttributeError
\end_layout

\end_inset

 while working in Sage, which of the following is 
\emph on
not
\emph default
 an appropriate course of action?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Ask your instructor.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Look in the index to see if something like it is covered somewhere in the
 text.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\color red
PANIC!
\color inherit

\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 When all else fails, inquire at the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sage-support
\end_layout

\end_inset

 website.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 For which of the following expressions does Sage 
\emph on
seem
\emph default
 to return a nonzero value?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
e**(I*pi) + 1
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
I**2 + 1
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(cos(pi/3)+I*sin(pi/3))**6 - 1
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sin(pi/4)**2 + cos(pi/4)**2 - 1
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 Which of the following options does Sage 
\emph on
not
\emph default
 offer, even though many programming languages do?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 constants
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 variables
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 identifiers
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 indeterminates
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
4.
 Which of the following identifier names is probably not the wisest idea
 for the 
\begin_inset Formula $i$
\end_inset

th value of 
\begin_inset Formula $a$
\end_inset

 in a sequence?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a_curr
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ai
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a_i
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
5.
 Which of the following identifier names might not be the wisest idea for
 the value of a function at a point 
\begin_inset Formula $x_{0}$
\end_inset

?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y0
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y_0
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
function_value
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
yval
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
6.
 One way to compute an approximate value of 
\begin_inset Formula $\log_{10}3$
\end_inset

 in Sage by typing 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log_b(3.,10.)
\end_layout

\end_inset

.
 Which of the following would also work?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(3.)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(3.)/log(10.)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(10.)/log(3.)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
log(10.^3)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
7.
 Which of the following methods of substituting 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2
\end_layout

\end_inset

 for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 in a mathematical 
\emph on
function
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 is guaranteed to work in every circumstance?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(x=2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f.subs(x=2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f({x:2})
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
8.
 Which of the following methods of substituting 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2
\end_layout

\end_inset

 for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 in a mathematical 
\emph on
expression
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 is guaranteed to work in every circumstance?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(x=2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f.subs(x=2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f({x:2})
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
9.
 Which of the following would you expect as the result of the command, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit(x/abs(x), x=0)
\end_layout

\end_inset

?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ind
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
und
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 Which of the following would you expect as the result of the command, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit(1/(x-1), x=1, dir='right')
\end_layout

\end_inset

?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ind
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
und
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
11.
 Which of the following would you expect as the result of the command, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
limit(sin(1/x), x=0, dir='right')
\end_layout

\end_inset

?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
+Infinity
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ind
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
und
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
12.
 Sage will do your Calculus homework for you on the following integrals:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 99.
A.
 Exact integrals, because Sage can simplify every integral to elementary
 form.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
B.
 Approximate integrals, because Sage only provides one answer for an indefinite
 integral, rather than all possible answers.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
C.
 Any kind of integral, because Newton figured those out centuries ago, though
 computers have only now become efficient enough to do them.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
D.
 None of them, because a good Calculus teacher checks the steps, not just
 the answer, and Sage doesn't show the steps.
\begin_inset Foot
status open

\begin_layout Plain Layout
\SpecialChar ldots
and every Calculus teacher is good, 
\emph on
right?
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
13.
 Which of the following is not a guaranteed property of a ring?
\begin_inset Foot
status open

\begin_layout Plain Layout
Be careful on this one; we're being a bit tricky — but only a bit.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Closure of multiplication
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Existence of a smallest element
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Existence of an additive identity
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Closure of subtraction
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
14.
 Which of the following is not a good reason to perform arithmetic integers
 modulo 
\begin_inset Formula $n$
\end_inset

?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Confusing other people
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Modeling 
\begin_inset Quotes eld
\end_inset

real world
\begin_inset Quotes erd
\end_inset

 problems
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Faster solution to some problems
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Mathematical curiosity
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
15.
 If 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
R
\end_layout

\end_inset

 is a variable that references a ring, which command will compel Sage to
 view the number referenced by the variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 as an element of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
R
\end_layout

\end_inset

, rather than as an integer?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
R(a)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
R a
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a: R
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
R: a
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.

\emph on
Bonus:
\emph default
 Which answer is correct?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 All of them.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Some of them.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 At least one of them.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Any that is not wrong.
\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Describe another situation where modular arithmetic would come in useful.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 For Multiple Choice question #2, the full simplification is in fact zero
 for all four answers, but that Sage doesn't perform that simplification
 automatically.
 What command(s) could you issue to make Sage detect this?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Let's revisit this Sage interaction that appears earlier in the notes.
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
d2 = CC(1+I)
\end_layout

\begin_layout SageInput
type(d2)
\end_layout

\begin_layout SageOutput
<type 'sage.rings.complex_number.ComplexNumber'>
\end_layout

\begin_layout SageInput
d3 = d2 + (1 - I)
\end_layout

\begin_layout SageInput
d3
\end_layout

\begin_layout SageOutput
2.00000000000000
\end_layout

\begin_layout SageInput
d3 - 1.999999999999
\end_layout

\begin_layout SageOutput
1.00008890058234e-12
\end_layout

\end_deeper
\begin_layout Standard
Sage reports that the difference between 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d3
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
1.999999999999
\end_layout

\end_inset

 is 
\begin_inset Formula $1.00008890058234\times10^{-12}$
\end_inset

.
 This is slightly wrong; the correct answer should be a clean 
\begin_inset Formula $1\times10^{-12}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(a) Describe a sequence of commands that use exact arithmetic to give us
 the correct answer.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Why might someone not care very much that the approach using the ring
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset

 is slightly wrong?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 In a number of situations, you have to raise a number 
\begin_inset Formula $a$
\end_inset

 to a large exponent 
\begin_inset Formula $b$
\end_inset

, modulo another value 
\begin_inset Formula $n$
\end_inset

.
 Choose a not-too-large number 
\begin_inset Formula $a$
\end_inset

 (double digits is fine) and raise it to larger and larger exponents 
\begin_inset Formula $b$
\end_inset

, modulo 
\begin_inset Formula $n$
\end_inset

 using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%
\end_layout

\end_inset

 operator, until you see a noticeable slow down.
 (Don't get too carried away, as once it slows down, it 
\emph on
really
\emph default
 starts to slow down.) Then compare that operation when Sage performs it
 in the ring 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

.
 Write down these values for 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, and 
\begin_inset Formula $n$
\end_inset

, and indicate whether it really is faster using the ring than using the
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%
\end_layout

\end_inset

 operator.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 
\begin_inset CommandInset label
LatexCommand label
name "exc: Checking whether ZZn is a field, long way"

\end_inset

We claimed only that 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 is a ring, but for some values of 
\begin_inset Formula $n$
\end_inset

 it's actually a field.
 There is no question of whether multiplication is commutative (it is) but
 whether every element has a multiplicative inverse is not so clear.
 Check this for the values 
\begin_inset Formula $n=2,3,4,5,6,7,8,9,10$
\end_inset

 by testing as many products 
\begin_inset Formula $ab$
\end_inset

 as needed to decide the question.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Do you see a pattern in the values of 
\begin_inset Formula $n$
\end_inset

 for which 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 is a field?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) When 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 is 
\emph on
not
\emph default
 a field, do you see a pattern in the values of 
\begin_inset Formula $a$
\end_inset

 for which you can find a multiplicative inverse 
\begin_inset Formula $b$
\end_inset

?
\end_layout

\begin_layout Standard

\emph on
Hint:
\emph default
 We don't require a multiplicative inverse for 0, 1 is its own inverse (after
 all, 
\begin_inset Formula $1\times1=1$
\end_inset

), and in 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 we conveniently have 
\begin_inset Formula $n=0$
\end_inset

.
 Along with the commutative property, this means you need check at most
 
\begin_inset Formula $\frac{\left(n-2\right)\left(n-1\right)}{2}$
\end_inset

 products; with 
\begin_inset Formula $n=10$
\end_inset

 you need check only 35.
 So if you're clever about it, it's not as burdensome a problem as you might
 think.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
In the worst case, then, you only have to check the values 
\begin_inset Formula $2,3,\ldots,n-1$
\end_inset

.
 That is, for each 
\begin_inset Formula $a=2,3,\ldots,n-1$
\end_inset

 you need to find 
\begin_inset Formula $b$
\end_inset

 such that 
\begin_inset Formula $ab=1$
\end_inset

.
 We need only check 
\begin_inset Formula $a<b<n$
\end_inset

, since if 
\begin_inset Formula $b$
\end_inset

 is the inverse of 
\begin_inset Formula $a$
\end_inset

, then likewise 
\begin_inset Formula $a$
\end_inset

 is the inverse of 
\begin_inset Formula $b$
\end_inset

.
 That is, finding the inverse of 
\begin_inset Formula $a$
\end_inset

 also finds the inverse of 
\begin_inset Formula $a$
\end_inset

's inverse.
 So we 
\emph on
really
\emph default
 need check only 
\begin_inset Formula $a$
\end_inset

 when 
\begin_inset Formula $1<a\leq\frac{n}{2}$
\end_inset

, then check values 
\begin_inset Formula $b$
\end_inset

 when 
\begin_inset Formula $a\leq b<n$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Bonus:
\emph default
 Why were we able to say, with confidence, that in #5 we need at most 
\begin_inset Formula $\frac{\left(n-2\right)\left(n-1\right)}{2}$
\end_inset

 products to determine whether 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 is a field?
\end_layout

\begin_layout Chapter
Pretty (and not-so-pretty) pictures
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: plotting"

\end_inset

Visualization often provides insights we do not obtain by other methods.
 This doesn't apply merely to mathematics; hence, the saying, 
\begin_inset Quotes eld
\end_inset

A picture is worth a thousand words.
\begin_inset Quotes erd
\end_inset

 Many of the exercises and labs we assign will ask you to produce some pictures,
 then draw conclusions from them.
\end_layout

\begin_layout Standard
Sage offers a very nice set of tools to draw graphs, along with an intuitive
 interface for using them.
 This chapter takes a look at the two-dimensional objects you might have
 to use.
 Everything we do here is strictly Cartesian geometry; that is, we assume
 that we're working on a Cartesian plane.
\end_layout

\begin_layout Standard
Starting in this chapter, we won't merely list commands with a short explanation
; rather, we'll list the commands 
\emph on
and their options.

\emph default
 Keep in mind that the description we give of the options may not be complete:
\end_layout

\begin_layout Itemize
We focus only on a few aspects of the command that we think are most useful
 for the tasks at hand and for what you'd need in the future.
\end_layout

\begin_layout Itemize
Sage is bound to change in the future, and it's unlikely 
\emph on
every
\emph default
 Sage command would long remain the same as what it is now.
\end_layout

\begin_layout Standard
Remember that every Sage command will offer you a fuller explanation and
 list of options if you simply type its name, followed by the question mark.
 For instance:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
point?
\end_layout

\begin_layout SageOutput
Signature:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

point(points, **kwds)
\end_layout

\begin_layout SageOutput
Docstring:
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Returns either a 2-dimensional or 3-dimensional point or sum of
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

points.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
and so forth.
\end_layout

\begin_layout Section*
2D objects
\end_layout

\begin_layout Standard
We start with a look at some fundamental two-dimensional objects.
\end_layout

\begin_layout Subsection*
\begin_inset Quotes eld
\end_inset

Straight
\begin_inset Quotes erd
\end_inset

 stuff
\end_layout

\begin_layout Standard
You can illustrate an awful lot of mathematics just by looking at points
 and line segments.
 Sage offers three commands to graph such things: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow()
\end_layout

\end_inset

.
 Strictly speaking, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

 produces a 
\emph on
crooked
\emph default
 line 
\emph on
segment,
\emph default
 not necessarily a 
\emph on
straight line.
\end_layout

\begin_layout Standard
Every description starts with a template for the command, listing required
 information and optional information (usually named 
\emph on
options
\emph default
), followed by a bulleted list describing the information.
 You don't necessarily have to give all the information, so for each piece
 of information, we add in parentheses the value Sage assumes for that informati
on when you omit it.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(
\end_layout

\end_inset


\emph on
position
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
position
\emph default
 is
\end_layout

\begin_deeper
\begin_layout Itemize
an ordered pair, 
\emph on
or
\end_layout

\begin_layout Itemize
a collection of ordered pairs
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
options
\emph default
 include:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pointsize =
\end_layout

\end_inset


\emph on
size
\emph default
 (10)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:point()"

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(
\end_layout

\end_inset


\emph on
points
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
points
\emph default
 is a collection of ordered pairs
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
thickness =
\end_layout

\end_inset


\emph on
thickness
\emph default
 (1)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow(
\end_layout

\end_inset


\emph on
tailpoint
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
headpoint
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
or
\emph default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow(
\end_layout

\end_inset


\emph on
path
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
tailpoint
\emph default
 is an ordered pair; the arrow starts here
\end_layout

\begin_layout Itemize

\emph on
headpoint
\emph default
 is an ordered pair; the arrow ends here
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrowsize =
\end_layout

\end_inset


\emph on
arrowhead's size
\emph default
 (5)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
head =
\end_layout

\end_inset


\emph on
arrowhead's location
\emph default
 (1)
\end_layout

\begin_deeper
\begin_layout Itemize
0 means 
\begin_inset Quotes eld
\end_inset

at tailpoint
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
1 means 
\begin_inset Quotes eld
\end_inset

at headpoint
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
2 means 
\begin_inset Quotes eld
\end_inset

both endpoints
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
width =
\end_layout

\end_inset


\emph on
stem
\emph default
 
\emph on
width 
\emph default
(2)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
The following options are common to all 2D objects:
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\emph on
transparency
\emph default
 (1.0)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset


\emph on
color, which we discuss in a dedicated section
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'blue'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(0,0,1)
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
linestyle
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
linestyle
\end_layout

\end_inset


\end_layout

\end_inset


\emph on

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset

drawing style of the line, which can be
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'dashdot'
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'dashed'
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'dotted'
\end_layout

\end_inset

, or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'solid'
\end_layout

\end_inset

 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'solid'
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset


\end_layout

\end_inset


\emph on

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset

distance to viewer, compared to other objects
\emph default
 (depends on object)
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: common options"

\end_inset

Options common to all 2D objects
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

 commands refer to 
\begin_inset Quotes eld
\end_inset

collections
\begin_inset Index idx
status open

\begin_layout Plain Layout
collection
\end_layout

\end_inset

.
\begin_inset Quotes erd
\end_inset

 We cover collections in depth later on, but for now you can use tuples,
 a sequence of objects enclosed in parentheses.
 For instance, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(2,3)
\end_layout

\end_inset

 is a tuple of integers.
 In this case, there are only two elements in the tuple, so we also call
 it an ordered pair.
 Tuples can be much longer: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(x, x**2, x**3, x**4)
\end_layout

\end_inset

 is a tuple of symbolic expressions, though 
\emph on
not
\emph default
 an ordered pair.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: common options"

\end_inset

 lists some common options for all two-dimensional objects.
 In this section, we'll discuss all the options but 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

; we dedicate a special page to that.
\end_layout

\begin_layout Standard
In addition to illustrating the objects, our first example will show how
 intuitive it is to combine several images into one: simply add them with
 the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
+
\end_layout

\end_inset

 operator.
 To aid in readability, we will assign several objects to variables and
 combine them at the end.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = point(((1,3),(4,0)), color='red', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

pointsize=60)
\end_layout

\begin_layout SageInput
p2 = line(((1,3),(4,0)), color='black', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2)
\end_layout

\begin_layout SageInput
p1 + p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/(1,3),(4,0)_points_and_line.pdf
	lyxscale 50
	height 1.25in

\end_inset


\end_layout

\begin_layout Standard
\noindent
We have a nice, black line that connects two red dots.
 (Notice the use of the line break to start a new line.
 Remember that you don't have to do this, especially in the likely circumstance
 that you have more space than we do.)
\end_layout

\begin_layout Standard
If you look closely, you'll notice that red dots lie underneath the black
 line.
 Most people don't think that looks very good, and there's a surefire way
 to fix it; this is where the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset


\end_layout

\end_inset

 option comes in.
 We've already noted that an object's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset

 indicates how close it should seem, relative to other objects in the image.
 The larger the number, the 
\begin_inset Quotes eld
\end_inset

closer
\begin_inset Quotes erd
\end_inset

 to the viewer.
 You can think of the number 0 as being a 
\begin_inset Quotes eld
\end_inset

middle location;
\begin_inset Quotes erd
\end_inset

 positive numbers will appear 
\begin_inset Quotes eld
\end_inset

in front of
\begin_inset Quotes erd
\end_inset

 zero, and negative numbers will appear 
\begin_inset Quotes eld
\end_inset

behind
\begin_inset Quotes erd
\end_inset

 it.
\end_layout

\begin_layout Standard
We can use this to 
\begin_inset Quotes eld
\end_inset

lift
\begin_inset Quotes erd
\end_inset

 the points over the line.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = point(((1,3),(4,0)), color='red', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

pointsize=60, zorder=5)
\end_layout

\begin_layout SageInput
p2 = line(((1,3),(4,0)), color='black', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, zorder=0)
\end_layout

\begin_layout SageInput
p1 + p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/(1,3),(4,0)_points_above_line.pdf
	lyxscale 50
	height 1.25in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Sage now considers the points to be at level 5, closer to the viewer, while
 the line remains at level 0, farther away.
 This is why the points now lie above the line.
\end_layout

\begin_layout Standard
Why this option called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset

? This will make sense if you're acquainted with 3-dimensional graphs: it
 indicates the 
\begin_inset Formula $z$
\end_inset

-value of the graphics object, when viewed from above the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane.
 We illustrate this with a 3D image:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/how_zorder_works_trans_nopersp.pdf
	lyxscale 50
	height 2in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Imagine yourself standing above this, looking down: you would see the red
 dots, at 
\begin_inset Formula $z=5$
\end_inset

, in front of the line, at 
\begin_inset Formula $z=0$
\end_inset

.
 (The dashed lines illustrate that the red points lie above the endpoints
 of the line.)
\end_layout

\begin_layout Standard
We mentioned earlier that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

 command really produces a 
\begin_inset Quotes eld
\end_inset

crooked
\begin_inset Quotes erd
\end_inset

 line segment.
 Here's an example of this at work.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
line(((0,0),(1,4),(3,3),(4,1),(0,0)), color='green')
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/green_line.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
In this case, we've used the line to draw a closed figure.
 While you can do this, it would be more convenient to use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset


\family typewriter

\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(
\end_layout

\end_inset


\emph on
points
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
points
\emph default
 is a collection of ordered pairs
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color =
\end_layout

\end_inset


\emph on
fill color
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'blue'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(0,0,1)
\end_layout

\end_inset

)
\begin_inset Newline newline
\end_inset


\emph on
note that this differs from the usual interpretation of color
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
edgecolor =
\end_layout

\end_inset


\emph on
edge color
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'blue'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(0,0,1)
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill =
\end_layout

\end_inset


\emph on
whether to fill the polygon
\emph default
 (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
thickness =
\end_layout

\end_inset


\emph on
edge thickness
\emph default
 (1)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\family default
 command, especially if you wanted to fill the object.
 With a polygon, you don't have to specify the first point again as the
 last point, because the implicit meaning of a polygon is a closed figure.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
polygon(((0,0),(1,4),(3,3),(4,1)), color='green')
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/green_polygon.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
You don't 
\emph on
have
\emph default
 to fill a polygon, though.
 Let's add another polygon beneath this one.
 While we're at it, we'll add a red edge to this one, just to make it stand
 out.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = polygon(((0,0),(1,4),(3,3),(4,1)), color='green', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

edgecolor='red', thickness=2)
\end_layout

\begin_layout SageInput
p2 = polygon(((1,0),(2,5),(3,0)), thickness=4, fill=False, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

zorder=-5)
\end_layout

\begin_layout SageInput
p1 + p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/green_polygon_and_blue.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
In some situations, we want to 
\begin_inset Quotes eld
\end_inset

see through
\begin_inset Quotes erd
\end_inset

 the top figure, to see the one underneath.
 This is where the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset


\end_layout

\end_inset

 option comes into play.
 This option controls the transparency of an object.
 Its values range from 0 (invisible) to 1 (opaque).
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = polygon(((0,0),(1,4),(3,3),(4,1)), color='green', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

edgecolor='red', thickness=2, alpha=0.5)
\end_layout

\begin_layout SageInput
p2 = polygon(((1,0),(2,5),(3,0)), thickness=4, fill=False, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

zorder=-5)
\end_layout

\begin_layout SageInput
p1 + p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/green_poly_transparent_and_blue.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
That's a little 
\emph on
too 
\emph default
transparent.
 We just want a hint that something lies underneath; we don't want to make
 the blue triangle seem as if it's actually on top.
 We modify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset

 accordingly.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = polygon(((0,0),(1,4),(3,3),(4,1)), color='green', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

edgecolor='red', thickness=2, alpha=0.8)
\end_layout

\begin_layout SageInput
p2 = polygon(((1,0),(2,5),(3,0)), thickness=4, fill=False, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

zorder=-5)
\end_layout

\begin_layout SageInput
p1 + p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/green_poly_less_transparent_and_blue.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Be careful with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset

 command.
 It can't read your mind; it follows the points in the precise order you
 specify.
 It doesn't take much to change a pentagon to a pentagram.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
polygon(((1,0), (cos(2*pi/5),sin(2*pi/5)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(cos(4*pi/5),sin(4*pi/5)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(cos(6*pi/5),sin(6*pi/5)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(cos(8*pi/5),sin(8*pi/5))), thickness=2)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/pentagon.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
polygon(((1,0), (cos(4*pi/5),sin(4*pi/5)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(cos(8*pi/5),sin(8*pi/5)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(cos(2*pi/5),sin(2*pi/5)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(cos(6*pi/5),sin(6*pi/5))), thickness=2)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/pentagram.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
We won't illustrate arrows as defined in this section; see an example in
 a following section.
 Feel free to experiment with them on your own.
\end_layout

\begin_layout Subsection*
\begin_inset Quotes eld
\end_inset

Curvy
\begin_inset Quotes erd
\end_inset

 stuff
\end_layout

\begin_layout Standard
We consider three more objects: circles, ellipses, and arcs.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
circle()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
circle(
\end_layout

\end_inset


\emph on
center
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
radius
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
center
\emph default
 is an ordered pair
\end_layout

\begin_layout Itemize

\emph on
radius
\emph default
 is a real number
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill =
\end_layout

\end_inset


\emph on
whether to fill the circle
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
edgecolor =
\end_layout

\end_inset


\emph on
color of the circle's edge
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'blue'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(1,0,0)
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
facecolor =
\end_layout

\end_inset


\emph on
color used to fill the circle
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'blue'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(1,0,0)
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
if you specify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

, then Sage ignores 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
edgecolor
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
facecolor
\end_layout

\end_inset

 
\emph on
even if you specify them explicitly
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
circle()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ellipse()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ellipse(
\end_layout

\end_inset


\emph on
center
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
hradius
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
vradius
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\emph on
,
\end_layout

\end_inset

options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
center
\emph default
 is an ordered pair
\end_layout

\begin_layout Itemize

\emph on
hradius
\emph default
 and 
\emph on
vradius 
\emph default
are real numbers (horizontal and vertical radius)
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill =
\end_layout

\end_inset


\emph on
whether to fill the circle
\emph default
 (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
edgecolor =
\end_layout

\end_inset


\emph on
color of the circle's edge
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'blue'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(1,0,0)
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
facecolor =
\end_layout

\end_inset


\emph on
color used to fill the circle
\emph default
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'blue'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(1,0,0)
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
if you specify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

, then Sage ignores 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
edgecolor
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
facecolor
\end_layout

\end_inset

 
\emph on
even if you specify them explicitly
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ellipse()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arc()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arc(
\end_layout

\end_inset


\emph on
center
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
radius
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
center
\emph default
 is an ordered pair
\end_layout

\begin_layout Itemize

\emph on
radius
\emph default
 is a real number
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
angle =
\end_layout

\end_inset


\emph on
angle between arc's axis and 
\begin_inset Formula $x$
\end_inset

-axis; length of this axis will be 
\emph default
radius (0)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
r2 =
\end_layout

\end_inset


\emph on
a second radius, for the arc of an ellipse; perpendicular to 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
angle
\end_layout

\end_inset

 (equal to 
\emph on
radius,
\emph default
 obtaining the arc of a circle)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sector =
\end_layout

\end_inset

an ordered pair, indicating the angles that define the beginning and the
 end of the sector (
\begin_inset Formula $\left(0,2\pi\right)$
\end_inset

)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arc()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first example is an arc, primarily to illustrate the relationship between
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
angle
\end_layout

\end_inset

, 
\emph on
radius
\emph default
, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
r2
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sector
\end_layout

\end_inset

.
 To that end, we'll add some dashed lines to help illustrate, obtaining
 the added benefit of illustrating the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
linestyle
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
linestyle
\end_layout

\end_inset

 option.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = arc((0,0), 2, angle=pi/6, r2=4, sector=(pi/4,5*pi/6), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2)
\end_layout

\begin_layout SageInput
p2 = line(((0,0), (2*cos(pi/6),2*sin(pi/6))), color='red', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

linestyle='dashed')
\end_layout

\begin_layout SageInput
p3 = line(((0,0), (4*cos(pi/6+pi/2),4*sin(pi/6+pi/2))), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='red',linestyle='dashed')
\end_layout

\begin_layout SageInput
p4 = ellipse((0,0),2,4,pi/6,color='red',zorder=-5)
\end_layout

\begin_layout SageInput
p1 + p2 + p3 + p4
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/arc_along_ellipse.pdf
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Notice that the ellipse's 
\begin_inset Quotes eld
\end_inset

horizontal
\begin_inset Quotes erd
\end_inset

 axis is tilted at the angle 
\begin_inset Formula $\nicefrac{\pi}{6}$
\end_inset

, as illustrated by the dashed red line in the first quadrant.
 The 
\begin_inset Quotes eld
\end_inset

vertical
\begin_inset Quotes erd
\end_inset

 axis is likewise tilted; so the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
angle
\end_layout

\end_inset

 option has effectively rotated the entire affair by 
\begin_inset Formula $\nicefrac{\pi}{6}$
\end_inset

.
 To draw the arc, we specified the sector 
\begin_inset Formula $\left(\nicefrac{\pi}{4},\nicefrac{\pi}{6}\right)$
\end_inset

.
 This starts the arc at the angle 
\begin_inset Formula $\nicefrac{\pi}{4}+\nicefrac{\pi}{6}=\nicefrac{5\pi}{12}$
\end_inset

.
\end_layout

\begin_layout Standard
You may be wondering how that last statement can be true when the blue arc
 clearly starts in the second quadrant, rather than the first quadrant —
 after all, 
\begin_inset Formula $\nicefrac{5\pi}{12}<\nicefrac{6\pi}{12}=\nicefrac{\pi}{2}$
\end_inset

, and 
\begin_inset Formula $\nicefrac{\pi}{2}$
\end_inset

 is the vertical axis.
 The answer lies in the distortion caused be the ellipse's 
\begin_inset Quotes eld
\end_inset

vertical
\begin_inset Quotes erd
\end_inset

 axis; it pulls the arc's endpoint 
\begin_inset Quotes eld
\end_inset

upward,
\begin_inset Quotes erd
\end_inset

 but since the ellipse rotated, 
\begin_inset Quotes eld
\end_inset

upward
\begin_inset Quotes erd
\end_inset

 effectively means to the north-by-northwest, obtaining a point in the second
 quadrant.
 Don't take our word for it, though; try it with a circle by omitting any
 specification of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
r2
\end_layout

\end_inset

, and see how things make more sense.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = arc((0,0), 2, angle=pi/6, sector=(pi/4,5*pi/6), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2)
\end_layout

\begin_layout SageInput
p2 = line(((0,0), (2*cos(pi/6),2*sin(pi/6))), color='red', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

linestyle='dashed')
\end_layout

\begin_layout SageInput
p3 = line(((0,0), (2*cos(pi/6+pi/2),2*sin(pi/6+pi/2))), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='red', linestyle='dashed')
\end_layout

\begin_layout SageInput
p4 = circle((0,0),2,color='red',zorder=-5)
\end_layout

\begin_layout SageInput
p1 + p2 + p3 + p4
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/arc_along_circle.pdf
	height 1.5in

\end_inset


\end_layout

\begin_layout Subsection*
An aside, for those who lack confidence in their trigonometry (as well as
 for those who don't, but should)
\end_layout

\begin_layout Standard
If you're wondering where we came up with the ordered pairs for the lines,
 let's review some trigonometry.
 Recall first that, in radian notation, 
\emph on
a full turn
\emph default
 is considered to have an angle of 
\begin_inset Formula $2\pi$
\end_inset

, rather than 180
\begin_inset Formula $^{\circ}$
\end_inset

.
 We traditionally split the full turn from there into a half turn (
\begin_inset Formula $\nicefrac{2\pi}{2}=\pi$
\end_inset

), a quarter turn (
\begin_inset Formula $\nicefrac{2\pi}{4}=\nicefrac{\pi}{2}$
\end_inset

), a sixth of a turn (
\begin_inset Formula $\nicefrac{2\pi}{6}=\nicefrac{\pi}{3}$
\end_inset

), and a twelfth of a turn (
\begin_inset Formula $\nicefrac{2\pi}{12}=\nicefrac{\pi}{6}$
\end_inset

).
\end_layout

\begin_layout Standard
Meanwhile, the functions 
\begin_inset Index idx
status open

\begin_layout Plain Layout
cosine
\end_layout

\end_inset


\begin_inset Formula $\cos\alpha$
\end_inset

 and 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sine
\end_layout

\end_inset


\begin_inset Formula $\sin\alpha$
\end_inset

 represent the 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-values of a point on the unit circle that lies at angle 
\begin_inset Formula $\alpha$
\end_inset

 from the horizontal.
 For example, the point on the unit circle at an angle of 
\begin_inset Formula $\nicefrac{\pi}{3}$
\end_inset

 from the horizontal would be
\begin_inset Formula 
\[
\left(\cos\left(\frac{\pi}{3}\right),\cos\left(\frac{\pi}{3}\right)\right)=\left(\frac{1}{2},\frac{\sqrt{3}}{2}\right).
\]

\end_inset

What if you want a circle of different radius? In this case, the relationship
 between cosine, sine, and the triangle formed by the radius and the 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-values mean you should scale the point by multiplying by the circle's radius.
 For example, the point on a centered circle of radius
\begin_inset space ~
\end_inset

2 at an angle of 
\begin_inset Formula $\nicefrac{\pi}{6}$
\end_inset

 from the horizontal would be
\begin_inset Formula 
\[
\left(2\cos\left(\frac{\pi}{6}\right),2\sin\left(\frac{\pi}{6}\right)\right)=\left(\sqrt{3},1\right).
\]

\end_inset

One point of a computer algebra system is to save us the trouble of simplifying.
 Rather than work out 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(sqrt(3),1)
\end_layout

\end_inset

 as a point on the line, we fed Sage the expression 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(2*cos(pi/6), 2*sin(pi/6))
\end_layout

\end_inset

 and let Sage figure out the rest on our behalf.
\end_layout

\begin_layout Standard
Likewise, when we wanted to place a point along the angle for the ellipse's
 
\begin_inset Quotes eld
\end_inset

vertical
\begin_inset Quotes erd
\end_inset

 axis, rather than figure out the simplified value, we simply asked Sage
 to do the rotation, then find the corresponding points:
\begin_inset Formula 
\[
\left(4\cos\left(\underset{\textrm{start}}{\underbrace{\frac{\pi}{6}}}\underset{\textrm{rotate}}{\underbrace{+\frac{\pi}{2}}}\right),4\sin\left(\underset{\textrm{start}}{\underbrace{\frac{\pi}{6}}}\underset{\textrm{rotate}}{\underbrace{+\frac{\pi}{2}}}\right)\right).
\]

\end_inset

We can illustrate this in Sage:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = circle((0,0),2)
\end_layout

\begin_layout SageInput
p2 = arrow((0,0),(2*cos(pi/6),2*sin(pi/6)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

linestyle='dashed', color='red')
\end_layout

\begin_layout SageInput
p3 = arrow((0,0), (2*cos(pi/6+pi/2), 2*sin(pi/6+pi/2)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

linestyle='dashed', color='red')
\end_layout

\begin_layout SageInput
p4 = arc((0,0), 2, angle=pi/6, sector=(0,pi/2), color='red',
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, zorder=5)
\end_layout

\begin_layout SageInput
p1 + p2 + p3 + p4
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/angle_rotation.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Notice the use of both 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow()
\end_layout

\end_inset


\end_layout

\end_inset

 and the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
linestyle
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
linestyle
\end_layout

\end_inset

 option.
\end_layout

\begin_layout Subsection*
Text
\end_layout

\begin_layout Standard
Wouldn't it be nice to add some labels to that last picture? The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
text()
\end_layout

\end_inset

 command lets us put labels into an image.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
text
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
text()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(
\end_layout

\end_inset


\emph on
text string
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
position
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
text string
\emph default
 is the label, enclosed in either single or double quotes
\end_layout

\begin_layout Itemize

\emph on
position
\emph default
 is an ordered pair
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fontsize =
\end_layout

\end_inset


\emph on
size of text
\emph default
 (10)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
rotation =
\end_layout

\end_inset


\emph on
angle to rotate text, 
\series bold
in degrees
\series default
\emph default
 (0)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
text()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 Our example reuses the images from the previous example.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p5 = p1 + p2 + p3 + p4
\end_layout

\begin_layout SageInput
p6 = text('pi/2', (.5,1.5), color='red', fontsize=18, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

rotation=30)
\end_layout

\begin_layout SageInput
p5 + p6
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/pi:2_rotation.pdf
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
That looks okay, but wouldn't it be nice if it looked a little more 
\begin_inset Quotes eld
\end_inset

professional
\begin_inset Quotes erd
\end_inset

? Wouldn't it be nicer to have the Greek letter 
\begin_inset Formula $\pi$
\end_inset

 instead of a couple of Latin characters? One way to accomplish this would
 be to change the keyboard layout on your computer so that you can type
 Greek letters, but it still wouldn't look like a real fraction.
\begin_inset Foot
status open

\begin_layout Plain Layout
Plus, we tried it.
 It doesn't work.
\end_layout

\end_inset

 Instead, Sage offers an elegant mathematical solution via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
latex@
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

|(
\end_layout

\end_inset

Without getting 
\emph on
too
\emph default
 far into the weeds, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 is a kind of 
\begin_inset Quotes eld
\end_inset

markup language
\begin_inset Quotes erd
\end_inset

 developed during the 1970s and 1980s.
 It is extremely common for mathematicians to type papers and books in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 (you're reading an example) because it offers extremely intuitive and flexible
 commands to indicate what you mean to write, and automatically arranges
 the text in a manner consistent with mathematical tradition, with appropriate
 placement of exponents, stretching of grouping symbols, etc.
\end_layout

\begin_layout Standard
Sage doesn't offer the full range of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 markup; it offers only a subset, but that subset suffices for practical
 work in graphics.
 To use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 markup, you basically need to perform only two tasks:
\end_layout

\begin_layout Itemize
enclose the substring of mathematics in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 delimiters 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
$
\end_layout

\end_inset

 and 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
$
\end_layout

\end_inset

; and
\end_layout

\begin_layout Itemize
use appropriate 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 markup, as described in Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap: Useful LaTeX"

\end_inset

.
\end_layout

\begin_layout Paragraph*
An aside.
\end_layout

\begin_layout Standard
Users of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 will notice that we use double backslashes when ordinarily they'd expect
 single backslashes.
 This is because the single backslash is a control command in Sage
\begin_inset Foot
status open

\begin_layout Plain Layout
This is because Sage is built on Python.
\end_layout

\end_inset

 strings: 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
n
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
r
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
t
\end_layout

\end_inset

 all have special meanings (as do others).
 You might get away with a single backslash sometimes, but it can also wreak
 havoc at the most inconvenient of times.
 Using a double backslash consistently avoids potential ambiguities.
\end_layout

\begin_layout Paragraph*
And yet\SpecialChar ldots

\end_layout

\begin_layout Standard
If you look at Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig: LaTeX commands"

\end_inset

, you'll notice we used single backslashes.
 The reason is that we later talk about inserting 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 into the worksheet, and in that case a double backslash is 
\emph on
in
\emph default
appropriate.
 It's a rather unfortunate bit of confusion to the learner, but the basic
 rule is pretty simple: the markup requires a single backslash, but in a
 string of text that means you need a double backslash.
\end_layout

\begin_layout Paragraph*
In addition\SpecialChar ldots

\end_layout

\begin_layout Standard
You can use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 in a worksheet's HTML cells, too! (See p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "par: HTML cells"

\end_inset

 for an explanation on how to create an HTML cell.) Enclose the text in dollar
 signs, in 
\begin_inset Quotes eld
\end_inset

backslashed
\begin_inset Quotes erd
\end_inset

 parentheses, or in backslashed brackets, and you can use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 markup to your heart's content.
\begin_inset Foot
status open

\begin_layout Plain Layout
Well, maybe not to your heart's content, in more ways than one.
 Within reason, anyway.
\end_layout

\end_inset

 For instance, the following code will give you a nice layout of the definition
 of the integral:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%html
\begin_inset Newline newline
\end_inset

The definition of the <b>derivative</b> is <i>the limit of the slopes of
 the secant lines as the distance between the points approaches 0;</i> or,
\backslash
[
\backslash
frac{d}{dx}f(x) = 
\backslash
lim_{
\backslash
Delta x
\backslash
rightarrow
\backslash
infty}
\backslash
frac{f(x+
\backslash
Delta x)-f(x)}{
\backslash
Delta x}
\backslash
]
\end_layout

\end_deeper
\begin_layout Paragraph*
Back to our regularly scheduled programming
\end_layout

\begin_layout Standard
Let's revisit that previous image, using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 this time to make it look good.
 If you look at Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: LaTeX commands"

\end_inset

, you'll find 
\begin_inset Formula $\pi$
\end_inset

 in the row on Greek letters; to get the Greek symbol, you'd want the markup
 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
pi
\end_layout

\end_inset

, which in a Sage string we write as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\backslash

\backslash
pi
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p7 = text('$
\backslash

\backslash
pi/2$', (.5,1.5), color='red', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

fontsize=18, rotation=30)
\end_layout

\begin_layout SageInput
p5 + p7
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/pi:2_rotation_greek.pdf
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
That looks a 
\emph on
lot
\emph default
 better.
 But maybe you'd like it to look like a real fraction, instead of a simple
 division? Look at Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: LaTeX commands"

\end_inset

 again, and you'll see a 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
frac
\end_layout

\end_inset

 markup.
 This translates to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\backslash

\backslash
frac
\end_layout

\end_inset

 in a Sage string, but it also illustrates something else about 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 markup: some commands require additional information.
 This information is usually passed in pairs of braces, sometimes multiple
 pairs.
 For a fraction, this should make sense: a fraction requires both a numerator
 and a denominator, so it requires two items of information, so two pairs
 of braces.
 We illustrate this in the example below, which differs slightly from the
 ones before.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p8 = text('Rotation of $
\backslash

\backslash
frac{
\backslash

\backslash
pi}{2}$', (.5,1.5), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='red', fontsize=18)
\end_layout

\begin_layout SageInput
p5 + p8
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/pi:2_rotation_greek_fraction.pdf
	height 1.5in

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
latex@
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

|)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Colors
\end_layout

\begin_layout Standard
There are several ways to define colors in Sage.
 One is by name, and Sage offers an 
\emph on
awful
\emph default
 lot of colors by name, with intriguing options such as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'chartreuse'
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'lavenderblush'
\end_layout

\end_inset

.
 You can get a full list of names by typing the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
colors.keys()
\end_layout

\begin_layout SageOutput
dict_keys(['automatic', 'aliceblue', 'antiquewhite', 'aqua', 'aquamarine',
 \SpecialChar ldots

\end_layout

\end_deeper
\begin_layout Standard
\noindent
At the present time there are nearly
\begin_inset space ~
\end_inset

150 predefined colors, so we've left out an awful lot.
\end_layout

\begin_layout Standard
You can actually obtain several million colors (at least 16
\begin_inset space ~
\end_inset

million or thereabouts) by manipulating what are called 
\begin_inset Quotes eld
\end_inset

RGB values.
\begin_inset Quotes erd
\end_inset

 Visible light can be broken into three components — red, green, and blue
 — and we can ask Sage to assign each of these components, called 
\emph on
channels,
\emph default
 a value from
\begin_inset space ~
\end_inset

0 to
\begin_inset space ~
\end_inset

1.
 You can think of 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 as meaning the channel is completely off, and 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 as meaning the channel is completely full.
 That leads us to the following:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
G
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
interpretation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
result
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
full red, no green or blue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
red
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
full red and green, no blue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yellow
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
half-power red, green, blue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gray
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
eight-tenths power red, green, blue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lighter gray
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
To use colors this way in Sage, simply pass the three numbers, enclosed
 in parentheses, as a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

 option.
\begin_inset Foot
status open

\begin_layout Plain Layout
It would be more precise to specify it as the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
rgbcolor
\end_layout

\end_inset

 option, but Sage interprets 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

 as rgb, which is fairly standard, anyway.
 If you are familiar with the Hue-Saturation-Value model of color, you can
 use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
hsvcolor
\end_layout

\end_inset

 option instead, but we don't cover that here.
\end_layout

\end_inset

 To illustrate this, we revisit our pentagon from before.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
polygon(((0,0),(1,4),(3,3),(4,1)), color=(0.8,0.8,0.8))
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/gray_polygon.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection*
Other options for 2D objects
\end_layout

\begin_layout Standard
Some options for 2D objects are more appropriately manipulated after adding
 them together.
 There are several ways to manipulate them; you can, for instance, add each
 option below directly to an individual plot command.
 When you have several plots, the most convenient may be through the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 command, which offers several options to fine tune an image.
 We list the ones of most interest to us in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: messages to manipulate 2d objects"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

!graphics object
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show(
\end_layout

\end_inset


\emph on
graphics object
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymax =
\end_layout

\end_inset


\emph on
largest visible 
\begin_inset Formula $y$
\end_inset

-value 
\emph default
(determined by object)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymin =
\end_layout

\end_inset


\emph on
smallest visible 
\begin_inset Formula $y$
\end_inset

-value 
\emph default
(determined by object)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmax =
\end_layout

\end_inset


\emph on
largest visible 
\begin_inset Formula $y$
\end_inset

-value 
\emph default
(determined by object)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmin =
\end_layout

\end_inset


\emph on
smallest visible 
\begin_inset Formula $y$
\end_inset

-value
\emph default
 (determined by object)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
aspect_ratio =
\end_layout

\end_inset


\emph on
ratio of 1 
\begin_inset Formula $y$
\end_inset

-unit to 1 
\begin_inset Formula $x$
\end_inset

-unit
\emph default
 (determined by object)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
axes =
\end_layout

\end_inset

whether to show the axes (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

)
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: messages to manipulate 2d objects"

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 We put these to work on 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p5
\end_layout

\end_inset

, the image above of the circle with the rotation.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
show(p5, ymax=1, aspect_ratio=2)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/circle_stretched_cutoff.pdf
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
You can see that the largest visible 
\begin_inset Formula $y$
\end_inset

-value is 
\begin_inset Formula $y=1$
\end_inset

, and the circle seems to have been stretched vertically, so that a unit
 of
\begin_inset space ~
\end_inset

1 on the 
\begin_inset Formula $y$
\end_inset

-axis is twice as long as a unit of
\begin_inset space ~
\end_inset

1 on the 
\begin_inset Formula $x$
\end_inset

-axis.
\end_layout

\begin_layout Standard
It is often convenient to show graphics without the axes; show offers the
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
axes
\end_layout

\end_inset

 option for this.
 We illustrate this later, but you might try reworking some of the graphics
 listed here to see it in action.
 There are other options to control the axes that we do not review here;
 most of them can also be controlled via a plot object's methods.
 You can read about them by typing the name of a plot object, followed by
 the dot, followed by the tab key; select one of interest, type the question
 mark, and execute the command to see its help (as explained earlier).
\end_layout

\begin_layout Section*
2D plots
\end_layout

\begin_layout Standard
By now, you should have learned three basic ways we represent two-dimensional
 relations we want to plot.
 They are:
\end_layout

\begin_layout Itemize
Cartesian coordinates, either
\end_layout

\begin_deeper
\begin_layout Itemize
with 
\begin_inset Formula $y$
\end_inset

 as a function of 
\begin_inset Formula $x$
\end_inset

;
\end_layout

\begin_layout Itemize
as an equation in terms of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 only, but not necessarily a function; or
\end_layout

\begin_layout Itemize
with 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 in terms of a third variable, 
\begin_inset Formula $t$
\end_inset

, called a parameter;
\end_layout

\begin_layout Standard
and
\end_layout

\end_deeper
\begin_layout Itemize
polar coordinates.
\end_layout

\begin_layout Standard
Sage offers commands for each of these representations.
\end_layout

\begin_layout Subsection*
Generic plots
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot(
\end_layout

\end_inset


\begin_inset Formula $f\left(x\right)$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
xmin
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
xmax
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $f\left(x\right)$
\end_inset

 is a function or expression in one variable
\end_layout

\begin_layout Itemize

\emph on
xmin
\emph default
 is the smallest 
\begin_inset Formula $x$
\end_inset

-value to use for plotting
\end_layout

\begin_layout Itemize

\emph on
xmax
\emph default
 is the largest 
\begin_inset Formula $x$
\end_inset

-value to use for plotting
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
detect_poles =
\end_layout

\end_inset

one of the following (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

):
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 (draw directly)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 (detect division by zero and sketch appropriately)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'show'
\end_layout

\end_inset

 (same as 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

, but include an asymptote)
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill =
\end_layout

\end_inset

one of the following (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 (do not fill)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'axis'
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 (fill to the 
\begin_inset Formula $x$
\end_inset

-axis)
\end_layout

\begin_layout Itemize
\begin_inset Formula $g\left(x\right)$
\end_inset

 (fill to the function 
\begin_inset Formula $g\left(x\right)$
\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'min'
\end_layout

\end_inset

 (fill from the curve to its minimum value)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'max'
\end_layout

\end_inset

 (fill from the curve to its maximum value)
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillcolor =
\end_layout

\end_inset


\emph on
color used for the fill, or 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'automatic'
\end_layout

\end_inset

 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'automatic'
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillalpha =
\end_layout

\end_inset


\emph on
transparency of the fill, from 0 to 1
\emph default
 (0.5)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points =
\end_layout

\end_inset


\emph on
number of points to use when generating an 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 table
\emph default
 (200)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

The one you'll use most often is the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 command, which accepts a function, or at least an expression in one variable,
 and produces a plot where the 
\begin_inset Formula $y$
\end_inset

 value is determined by the 
\begin_inset Formula $x$
\end_inset

-values, as by an 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 table.
 This description is quite literal; the command works by creating a number
 of 
\begin_inset Formula $\left(x,y\right)$
\end_inset

-pairs and connecting the dots.
 Its 
\emph on
options
\emph default
 include those listed in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig: common options"

\end_inset

.
 One thing to watch for is that 
\emph on
xmin
\emph default
 and 
\emph on
xmax
\emph default
 do 
\emph on
not
\emph default
 mean the same thing here as they do in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 command.
 Here, they correspond to the smallest and largest 
\begin_inset Formula $x$
\end_inset

-values for which 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 generates an 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 pair.
 It is quite possible to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 more or less than this amount by setting 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmax
\end_layout

\end_inset

 to different values in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 command.
\end_layout

\begin_layout Standard
We illustrate this command on a function which has poles.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p = plot(x^2 - 3/(x-1), -5, 5, detect_poles='show')
\end_layout

\begin_layout SageInput
show(p, ymin=-10, ymax=10, aspect_ratio=1/2)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/asymptotic_parabola.pdf
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Were we not to constrain the 
\begin_inset Formula $y$
\end_inset

-values, the image would look very different.
 (You might want to try the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 command without 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymin
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymax
\end_layout

\end_inset

 values, to see this for yourself.) Likewise, if you leave out 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
detect_poles
\end_layout

\end_inset

 Sage will mistakenly connect the two points closest to the pole, which
 usually looks like an asymptote.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p = plot(x^2 - 3/(x-1), -5, 5)
\end_layout

\begin_layout SageInput
show(p)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/asymptotic_parabola_arghackle.pdf
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
As we hinted above, this is 
\emph on
technically
\emph default
 wrong, because that apparently vertical line is not; it connects two points.
 If you saw this happen in real life, you might conclude that this was an
 asymptote, but you might also be wrong to do so; there could well be some
 interesting feature of the function taking place there.
\end_layout

\begin_layout Subsection*
Parametric plots
\end_layout

\begin_layout Standard
Closely related to the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 command is the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot()
\end_layout

\end_inset

 command.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot( (
\end_layout

\end_inset


\begin_inset Formula $x\left(t\right)$
\end_inset

 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $y\left(t\right)$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
) , (
\end_layout

\end_inset


\emph on
t
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
tmin
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
tmax
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
) ,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $x\left(t\right)$
\end_inset

 and 
\begin_inset Formula $y\left(t\right)$
\end_inset

 are functions or expressions in terms of a parameter 
\begin_inset Formula $t$
\end_inset

, which define the 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-value of a point
\end_layout

\begin_layout Itemize

\emph on
t
\emph default
 is the parameter
\end_layout

\begin_layout Itemize

\emph on
tmin
\emph default
 is the smallest 
\begin_inset Formula $t$
\end_inset

-value to use
\end_layout

\begin_layout Itemize

\emph on
tmax
\emph default
 is the largest 
\begin_inset Formula $t$
\end_inset

-value to use
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill =
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\family typewriter
 
\family default
\emph on
(to axis) or 
\emph default

\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\emph on
 (none) 
\emph default
(
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillcolor
\end_layout

\end_inset


\emph on
, as in 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillalpha
\end_layout

\end_inset

, as in 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 Parametric plots are frequently used in situations where the values for
 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 depend on the particular time, which happens in physics and engineering.
 In many cases, 
\begin_inset Formula $t\in\left[0,1\right]$
\end_inset

, where 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 indicates 
\begin_inset Quotes eld
\end_inset

start position
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 indicates 
\begin_inset Quotes eld
\end_inset

end position,
\begin_inset Quotes erd
\end_inset

 but there are perfectly good reasons to use other values.
 The following uses 
\begin_inset Formula $t\in\left[0,2\pi\right]$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('t')
\end_layout

\begin_layout SageInput
parametric_plot((cos(4*t),sin(t)), (t,0,2*pi))
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/parametric_but_not_a_spiral.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
This is the 
\emph on
entire
\emph default
 graph of this parametric function.
 Play around with different values of 
\emph on
tmin
\emph default
 and 
\emph on
tmax
\emph default
 to determine the smallest interval 
\begin_inset Formula $\left[a,b\right]$
\end_inset

 that gives us a complete wave.
\end_layout

\begin_layout Standard
The following example demonstrates the use of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill
\end_layout

\end_inset

 option.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
parametric_plot((t*cos(4*t),t*sin(2*t)),(t,0,2*pi),fill=True)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/parametric_spiralish_and_filled.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
This is already neat, but you can obtain a neater picture yet if you double
 that curve in different ways.
 Try it and see what happens.
\end_layout

\begin_layout Subsection*
Polar plots
\end_layout

\begin_layout Standard
We turn to polar coordinates.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polar_plot(
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polar_plot()
\end_layout

\end_inset


\end_layout

\end_inset


\family typewriter
 
\family default

\begin_inset Formula $r\left(\theta\right)$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
, (
\end_layout

\end_inset


\begin_inset Formula $\theta$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $\theta_{min}$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $\theta_{max}$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
) ,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $r\left(\theta\right)$
\end_inset

 is a function or expression defined in terms of another variable 
\begin_inset Formula $\theta$
\end_inset

, for which you can use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\theta$
\end_inset

 is the independent variable representing the angle
\end_layout

\begin_layout Itemize
\begin_inset Formula $\theta_{min}$
\end_inset

 is the smallest angle to use
\end_layout

\begin_layout Itemize
\begin_inset Formula $\theta_{max}$
\end_inset

 is the largest angle to use
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill =
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\family typewriter
 
\family default
\emph on
(to axis) or 
\emph default

\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\emph on
 (none) 
\emph default
(
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillcolor
\end_layout

\end_inset


\emph on
, as in 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillalpha
\end_layout

\end_inset

, as in 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polar_plot()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 These are commonly used when it's more convenient to describe how an object's
 position changes as it rotates around the origin.
 A number of images that are difficult to describe in 
\begin_inset Formula $\left(x,y\right)$
\end_inset

-pairs become quite easy with polar coordinates, such as the abstract 
\emph on
fleur-de-lis
\emph default
 below.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
polar_plot(cos(2*x)*sin(3*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/fleur-de-lis.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Section*
Animation
\end_layout

\begin_layout Standard
Animation both in film and in computer programming consists of swapping
 several images several times a second.
 Sage offers an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate()
\end_layout

\end_inset

 command that accepts a collection as input and creates an animation that
 we can then 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

.
 In this case, the options we supply to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 are a little different.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate(
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate()
\end_layout

\end_inset


\end_layout

\end_inset


\family typewriter
 
\family default
\emph on
collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
collection
\emph default
 can be a list, set, or tuple of plots
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmax
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymin
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymax
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
aspect_ratio
\end_layout

\end_inset

, as in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show(
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

!animation
\end_layout

\end_inset


\emph on
 animation
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
animation
\emph default
 is an animation generated using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate()
\end_layout

\end_inset

 command
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
delay =
\end_layout

\end_inset

 hundredths of a second before moving to the next frame (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
20
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
iterations =
\end_layout

\end_inset

number of times to repeat the animation from the beginning, where 0 indicates
 
\begin_inset Quotes eld
\end_inset

forever
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
0
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
gif =
\end_layout

\end_inset

whether to produce a GIF animation or a WEBM animation (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 It's important to observe that 
\emph on
we do not
\emph default
 specify the traditional 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 options 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmax
\end_layout

\end_inset

, etc.
 when we 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 an animation; those really are more appropriate in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate()
\end_layout

\end_inset

 command, which has to put all the frames together, and so needs to know
 what the largest and smallest 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-values should be.
 Rather, the options show expects are options that apply to 
\emph on
showing
\emph default
 an animation, and which are not proper to the animation itself.
 That is, it makes sense to show the same animation with a different delay
 between frames, as the frames themselves don't change.
 It doesn't make sense to say that the 
\begin_inset Quotes eld
\end_inset

same
\begin_inset Quotes erd
\end_inset

 animation would have a different 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

 value; the frames themselves have changed in this case.
\end_layout

\begin_layout Standard
To illustrate how the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate()
\end_layout

\end_inset

 command works, we'll play around with our 
\emph on
fleur-de-lis
\emph default
 from the previous section.
\begin_inset CommandInset label
LatexCommand label
name "pg: demonstration of animate() with fleur-de-lis"

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = polar_plot(cos(2*x)*sin(3*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False)
\end_layout

\begin_layout SageInput
p2 = polar_plot(cos(3*x)*sin(4*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False)
\end_layout

\begin_layout SageInput
p3 = polar_plot(cos(4*x)*sin(5*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False)
\end_layout

\begin_layout SageInput
p4 = polar_plot(cos(5*x)*sin(6*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False)
\end_layout

\begin_layout SageInput
p5 = polar_plot(cos(6*x)*sin(7*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False)
\end_layout

\begin_layout SageInput
p6 = polar_plot(cos(7*x)*sin(8*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False)
\end_layout

\begin_layout SageInput
panim = animate((p1, p2, p3, p4, p5, p6), xmin=-1, xmax=1, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

ymin=-0.5, ymax=1.5, aspect_ratio=1)
\end_layout

\begin_layout SageInput
show(panim, gif=True)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You should obtain an animation as a result.
 
\emph on
If you view this text in Acrobat Reader,
\emph default
 you should see that animation below; if you are looking at a paper copy
 of the text, you should instead see the animation's individual frames:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifx 
\backslash
onlineordeadtree 
\backslash
online
\backslash
animategraphics[autopause,autoplay,controls,final,width=0.9
\backslash
columnwidth]{2}{graphics/animations/fleur_de_lis/fdl_anim_}{0}{5} 
\backslash
else 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_0.pdf}
\backslash
quad
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_1.pdf}
\backslash
quad
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_2.pdf}
\backslash

\backslash

\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_3.pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_4.pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_5.pdf}
\backslash
fi
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout

\backslash
string"graphics/plotting graphics/fleur-de-lis
\backslash
string".pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You should take a moment to toy with the options a little bit.
 For instance, see what happens when you change the final line of that sequence
 to
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
show(panim, gif=True, delay=10)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
or to
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
show(panim, gif=True, delay=40)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You should notice a definite change in behavior.
\end_layout

\begin_layout Standard
Another thing to try is to remove the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
gif=True
\end_layout

\end_inset

 option.
 We used it because some common web browsers do not support the WEBM format
 at the time of this writing.
 See what happens when you remove it.
\end_layout

\begin_layout Standard
Using the approach we've shown here makes it a little burdensome to create
 plots for all but the most trivial animations.
 In a later chapter we'll show how you can use loops to speed up the process.
\end_layout

\begin_layout Section*
Implicit plots
\end_layout

\begin_layout Standard
Some Cartesian plots are easily described as 
\emph on
relations
\emph default
 in terms of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, but are difficult to describe as 
\emph on
functions
\emph default
.
 Geometrically, they do not satisfy the 
\begin_inset Quotes eld
\end_inset

vertical line test
\begin_inset Quotes erd
\end_inset

 that determines a function, and it isn't very easy to rewrite them in parametri
c or polar form.
\end_layout

\begin_layout Standard
Consider the circle.
 One relation that is 
\emph on
not
\emph default
 a good example of this difficulty is the circle 
\begin_inset Formula $x^{2}+y^{2}=a^{2}$
\end_inset

, where 
\begin_inset Formula $a$
\end_inset

 is any constant you like (within reason).
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Within reason?
\begin_inset Quotes erd
\end_inset

 you are likely muttering.
 
\begin_inset Quotes eld
\end_inset

What on earth does that mean?
\begin_inset Quotes erd
\end_inset

 We mean 
\begin_inset Formula $a\neq0$
\end_inset

.
 And finite.
 And real, definitely real.
 Complex would be bad, at least for our purposes.
 So, basically, 
\begin_inset Formula $a\in\mathbb{R}\backslash\left\{ 0\right\} $
\end_inset

.
\end_layout

\end_inset

 We can actually express this curve using a parameter 
\begin_inset Formula $t$
\end_inset

:
\begin_inset Formula 
\[
\left(x,y\right)=\left(a\cos t,a\sin t\right)
\]

\end_inset

or using polar coordinates:
\begin_inset Formula 
\[
r=a.
\]

\end_inset

Nevertheless, the traditional equation of a circle is useful in this respect:
 it does not admit a function 
\begin_inset Formula $y$
\end_inset

 in terms of 
\begin_inset Formula $x$
\end_inset

; after all, if we solve for 
\begin_inset Formula $y$
\end_inset

, we have
\begin_inset Formula 
\[
y=\pm\sqrt{a^{2}-x^{2}}\;,
\]

\end_inset

and having a choice of two 
\begin_inset Formula $y$
\end_inset

 values is a bit of a bummer for a function.
 At the very least, it is inconvenient.
\end_layout

\begin_layout Standard
One solution is to plot it using parametric or polar plots, but this isn't
 always available, or not easily.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot(
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\end_inset


\family typewriter
 
\family default
\emph on
relation
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
, (
\end_layout

\end_inset


\emph on
xvar
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
xmin
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
xmax
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
) , (
\end_layout

\end_inset


\emph on
yvar
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
ymin
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
ymax
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
) ,
\end_layout

\end_inset


\emph on
options
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
relation
\emph default
 is an equation in terms of two variables
\end_layout

\begin_layout Itemize

\emph on
xvar
\emph default
 and 
\emph on
yvar
\emph default
 are the indeterminates in the function for which you want to plot along
 the 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-axis, respectively
\end_layout

\begin_layout Itemize

\emph on
xmin
\emph default
 and 
\emph on
xmax
\emph default
 are the smallest and largest 
\begin_inset Formula $x$
\end_inset

-values to use to generate points
\end_layout

\begin_layout Itemize

\emph on
ymin
\emph default
 and 
\emph on
ymax
\emph default
 are the smallest and largest 
\begin_inset Formula $y$
\end_inset

-values to use to generate points
\end_layout

\begin_layout Itemize

\emph on
options
\emph default
 include
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill =
\end_layout

\end_inset


\emph on
whether to fill the 
\begin_inset Quotes eld
\end_inset

interior
\begin_inset Quotes erd
\end_inset

 of the relation; that is, 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 pairs where the transformed relation turns negative
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points =
\end_layout

\end_inset


\emph on
number of points to use on each axis when generating the plot
\emph default
 (150)
\end_layout

\end_deeper
\begin_layout Plain Layout
Note that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillcolor
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fillalpha
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
thickness
\end_layout

\end_inset

 are 
\emph on
not
\emph default
 valid options for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

An alternative is to plot the curve 
\emph on
implicitly;
\emph default
 in this case, you specify an equation, its variables, and their range.
 Sage then transforms the equation
\begin_inset Formula 
\[
f\left(x,y\right)=g\left(x,y\right)\quad\textrm{to}\quad f\left(x,y\right)-g\left(x,y\right)=0,
\]

\end_inset

builds a grid along the window you've specified, checks to see which grid
 points come 
\emph on
reasonably close to zero
\emph default
, then connects them in a clever fashion to obtain the correct graph of
 the function.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('y')
\end_layout

\begin_layout SageInput
implicit_plot(x**2 + y**2 == 6, (x, -3, 3), (y, -3, 3), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

fill=True)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/filled_circle_implicit.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Let's clarify how Sage decided which points lie in the interior.
 We are asking it to graph the equation
\begin_inset Formula 
\[
x^{2}+y^{2}=6,
\]

\end_inset

so
\begin_inset Formula 
\[
f\left(x,y\right)=x^{2}+y^{2}\quad\textrm{and}\quad g\left(x,y\right)=6.
\]

\end_inset

Sage rewrites this as
\begin_inset Formula 
\[
f\left(x,y\right)-g\left(x,y\right)=0,
\]

\end_inset

or more precisely
\begin_inset Formula 
\[
x^{2}+y^{2}-6=0.
\]

\end_inset

Sage then divides the 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-intervals 
\begin_inset Formula $\left(-3,3\right)$
\end_inset

 into 150 subintervals, which sets up a grid on the plane, and substitutes
 each 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 pair on the grid into the left-hand side of the equation.
 Some of these points may match
\begin_inset space ~
\end_inset

0 exactly, but most will not; for instance, 
\begin_inset Formula $\left(1.5,1.92\right)$
\end_inset

 and 
\begin_inset Formula $\left(1.5,1.96\right)$
\end_inset

 lie 
\emph on
close
\emph default
 to the circle, but the former gives a negative value (
\begin_inset Formula $-.0636$
\end_inset

) when substituted into 
\begin_inset Formula $x^{2}+y^{2}-6$
\end_inset

, while the second gives a positive value (
\begin_inset Formula $.0916$
\end_inset

).
 This tells Sage three things:
\end_layout

\begin_layout Itemize
The circle 
\emph on
should
\emph default
 pass between these two points; after all, its points have value 0 when
 substituted into 
\begin_inset Formula $x^{2}+y^{2}-6$
\end_inset

.
\end_layout

\begin_layout Itemize
Of these two points, the point 
\begin_inset Formula $\left(1.5,1.96\right)$
\end_inset

 lies closer to the circle than 
\begin_inset Formula $\left(1.5,1.92\right)$
\end_inset

, so it's best to connect this approximation with other, nearby approximations
 to the curve.
\end_layout

\begin_layout Itemize
Because its value was negative, the point 
\begin_inset Formula $\left(1.5,1.96\right)$
\end_inset

 lies inside the circle, and should be filled if 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill=True
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
To see this in action, we can experiment with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points
\end_layout

\end_inset

 option.
 We'll plot two unfilled circles, each with a very different number of plot
 points.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = implicit_plot(x^2+y^2-6, (-3,3), (-3,3), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

plot_points=5, zorder=5)
\end_layout

\begin_layout SageInput
p2 = implicit_plot(x^2+y^2-6, (-3,3), (-3,3), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='red', zorder=-5, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

plot_points=300)
\end_layout

\begin_layout SageInput
p1 + p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/circles_with_different_plot_points.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
The blue graph, which was pointed with only 6 plot points on each axis (the
 subinterval's endpoints add 1 to the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points
\end_layout

\end_inset

 option), looks jagged and uneven, while the red graph looks smooth, despite
 being generated the same way.
 This illusion of smoothness is due to the much higher number of points
 connected to make the graph.
\end_layout

\begin_layout Standard
To drive home the importance of the number of plot points in practical situation
s, let's look at a different example.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
implicit_plot(x*cos(x*y)-y, (x,-15,15), (y,-15,15))
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/strange_implicit_plot.pdf
	lyxscale 50
	height 2in

\end_inset


\end_layout

\begin_layout Standard
\noindent
That curve looks just plain\SpecialChar ldots
 
\series bold
\emph on
awesome.

\series default
\emph default
 But is it one, connected curve? It seems to have a large number of jagged
 elements.
 Some parts are also disconnected; this isn't bad in itself, but along with
 the jaggedness, it suggests a problem.
 This is one case where you would expect an increase in the number of plot
 points to be extremely useful, and so it is.
 If you increase the number of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points
\end_layout

\end_inset

 by about 50 or so, over and over until things start to become clear, eventually
 you come to something like this:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
implicit_plot(x*cos(x*y)-y, (x,-20,20), (y,-20,20), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

plot_points=500)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/strange_implicit_plot_hires.pdf
	lyxscale 50
	height 2in

\end_inset


\end_layout

\begin_layout Standard
\noindent
There's quite a difference in this image, isn't there! What's more, there's
 quite a difference in the time it took to plot them, isn't there? Some
 things still seem a little unclear, so we can take this a bit further:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
implicit_plot(x*cos(x*y)-y, (x,-20,20), (y,-20,20), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

plot_points=1000)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/plotting graphics/strange_implicit_plot_hidef.pdf
	lyxscale 50
	height 2in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Notice the tradeoff: more plot points resolves more discrepancies, but also
 leads to longer time.
 At this point, there's no cause to increase 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points
\end_layout

\end_inset

 higher, as there's no reason to think we've lost any interesting features.
\end_layout

\begin_layout Standard
We conclude with some words of warning.
 It may happen that you neglect to specify 
\emph on
xvar
\emph default
 and 
\emph on
yvar
\emph default
 when creating your implicit plot; it's a rather natural error to make,
 especially since 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 doesn't require you to specify a variable.
 In this case, you'll receive a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Unnamed ranges for more than one variable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
implicit_plot(x**2 + y**2 - 6, (-3,3), (-3,3))
\end_layout

\begin_layout SageError
DeprecationWarning: Unnamed ranges for more than one variable is deprecated
 and will be removed from a future release of Sage; you can used named ranges
 instead, like (x,0,2)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The warning here is both explicit and helpful: it tells you what the problem
 is, and suggests the workaround.
 The correct usage is the one we described above, and repeat here for good
 measure:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
implicit_plot(x**2 + y**2 - 6, (x,-3,3), (y,-3,3))
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You will also encounter problem if you neglect to define 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

 as an indeterminate, or if you neglect to specify the ranges for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

; these lead to 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
NameError
\end_layout

\end_inset

 (because 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

 is unknown) and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

 warnings (because Sage expects a different number of arguments).
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
NameError
\end_layout

\end_inset

!name is not defined@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
name \SpecialChar ldots
 is not defined
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!takes exactly argument@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
\SpecialChar ldots
 takes exactly \SpecialChar ldots
 argument (\SpecialChar ldots
 given)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 We have listed all possible options to the plotting commands.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 You don't have to provide values for all the arguments we list for a command..
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 The values for RGB colors range from 0 to 255.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 No matter what you do, you're stuck with axes in every Sage plot.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset

 options helps place objects 
\begin_inset Quotes eld
\end_inset

on top of
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

in front of
\begin_inset Quotes erd
\end_inset

 each other.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 One reason to use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset

 command instead of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

 command is that you don't have to re-specify the starting point as the
 end point.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 The transparency of a fill can differ from the transparency of the curve
 being filled.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 Sage generates plots the same way we learn to do so: connecting the dots
 between 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 pairs.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 Like a graphing calculator, Sage is unable to detect places where asymptotes
 occur.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 The best way to graph the curve 
\begin_inset Formula $y^{2}=x^{3}+x+1$
\end_inset

 is to solve for 
\begin_inset Formula $y$
\end_inset

 by taking the square root, plot the positive and negative branches separately
 using a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 command, then combine them using addition — much as you do it on a graphing
 calculator.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
11.
 
\emph on
Bonus:
\emph default
 When you don't know the answer to a True/False question, the best strategy
 is to answer, 
\begin_inset Quotes eld
\end_inset

Arguable,
\begin_inset Quotes erd
\end_inset

 then pray for partial credit.
\end_layout

\begin_layout Subsection*
Multiple Choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 If an object's 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-coordinates are functions of time, the best choice for plotting a graph
 of its motion is probably:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polar_plot()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 If an object's distance from a central point varies as it rotates around
 the center, the best choice for plotting a graph of its motion is probably:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polar_plot()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 If a function is well-defined by one variable, the best choice for plotting
 its graph is probably:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polar_plot()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
4.
 To change how transparent a graphics object is, we use this option:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
opacity
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
transparency
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
5.
 To change which object seems 
\begin_inset Quotes eld
\end_inset

on top of
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

in front of
\begin_inset Quotes erd
\end_inset

 another, we use this option:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
depth
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
level
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
6.
 What aspect of a plot might suggest you need to increase the value of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points
\end_layout

\end_inset

?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 It looks as if it has an asymptote.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Jagged lines or 
\begin_inset Quotes eld
\end_inset

crooked
\begin_inset Quotes erd
\end_inset

 curves appear when you expect smoothness.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 One equation produces two or more curves.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 We have an approximate curve instead of the exact curve.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
7.
 If a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 produces an image, part of which resembles a vertical line, which option
 should you modify to test for an asymptote?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
detect_poles
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
draw_asymptotes
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_points
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zorder
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
8.
 If you get a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
NameError
\end_layout

\end_inset

 when making an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset

, then in all likelihood you made the following error:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 You forgot to specify an equation in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

, rather than an expression in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 alone
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 You misspelled the name of an option to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 You forgot to define the indeterminate 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

 using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
var()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 You forgot to specify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

 as 
\emph on
xvar
\emph default
 and 
\emph on
yvar
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
9.
 If you get a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

 when making an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset

, then in all likelihood you made the following error:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 You misspelled the name, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 You misspelled the name of an option to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 You forgot to define the indeterminate 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

 using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
var()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 You forgot to specify ranges for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
10.
 If we are teaching Calculus, and want to illustrate how to find the area
 between the curves 
\begin_inset Formula $x^{2}$
\end_inset

 and 
\begin_inset Formula $x$
\end_inset

 on 
\begin_inset Formula $\left[0,1\right]$
\end_inset

, which command would show the region we want? (The plot should also include
 both curves that define the region.)
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot(x**2-x, 0, 1, fill=True)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot(x**2, 0, 1, fill=x)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot(x**2, 0, 1, fill=True) - plot(x, 0, 1, fill=True)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot(x**2, 0, 1, fill=x) + plot(x, 0, 1)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.

\emph on
Bonus:
\emph default
 You are stranded on a desert island.
 Which of these items would you rather have with you?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a towel
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a can opener
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a bottle of sunscreen
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a working laptop with Sage installed
\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Professor Proofsrock avers that we can view the curve 
\begin_inset Formula $y=x^{2}$
\end_inset

 as a parametric curve 
\begin_inset Formula $y=t^{2}$
\end_inset

, 
\begin_inset Formula $x=t$
\end_inset

.
 Plot both curves, using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 for the former and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot()
\end_layout

\end_inset

 for the latter.
 Do you agree with his averral? What, besides the plots, makes you agree?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Why do you think that the default values for the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 options 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymax
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymin
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
aspect_ratio
\end_layout

\end_inset

 depend on the object being shown, rather than on specific values? Give
 a brief explanation for each option.
\end_layout

\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 
\begin_inset CommandInset label
LatexCommand label
name "programming: plot x, x^2, log x, e^x and compare"

\end_inset

Use Sage to plot the following functions over the interval 
\begin_inset Formula $\left[1,5\right]$
\end_inset

 on the same graph.
 Give each a different color, and label it by name with a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
text()
\end_layout

\end_inset

 object.
\begin_inset Formula 
\[
x,\quad x^{2},\quad\log_{10}x,\quad e^{x}
\]

\end_inset

Rank the functions according to which one grows fastest in the long run.
 Then use Sage's Calculus facilities to confirm that your ranking is correct
 at 
\begin_inset Formula $x=10$
\end_inset

 and also at 
\begin_inset Formula $x=100$
\end_inset

.
 
\emph on
Hint:
\emph default
 The derivative tells you the rate of change at a point.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Using your knowledge of Calculus, do the following:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Choose a transcendental function 
\begin_inset Formula $f\left(x\right)$
\end_inset

 and a point 
\begin_inset Formula $x=a$
\end_inset

 at which the function is defined.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Compute the derivative of 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

.
 If the derivative is
\begin_inset space ~
\end_inset

0, return to step (a) and choose a different point.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Plot 
\begin_inset Formula $f$
\end_inset

 in a neighborhood of 
\begin_inset Formula $a$
\end_inset

.
 Make this curve black, of thickness
\begin_inset space ~
\end_inset

2.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Add to this a plot of the line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

.
 Make this line blue, and dashed.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(e) Add to this a plot of the 
\emph on
normal line
\emph default
 at 
\begin_inset Formula $x=a$
\end_inset

.
 Make this line green, and dashed.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 The normal line passes through 
\begin_inset Formula $x=a$
\end_inset

 and is perpendicular to the tangent line.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(f) Add a big red point at 
\begin_inset Formula $\left(a,f\left(a\right)\right)$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(g) Add labels for the point, the curve, and the line.
 Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

.
 Each label's color should correspond to that of the object it labels.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(h) 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 the image at an aspect ratio appropriate to a pleasing result.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 The Mean Value Theorem of Calculus states that if 
\begin_inset Formula $f$
\end_inset

 is a continuous function on the interval 
\begin_inset Formula $\left[a,b\right]$
\end_inset

, then we can find some 
\begin_inset Formula $c\in\left(a,b\right)$
\end_inset

 such that 
\begin_inset Formula 
\[
f\left(c\right)=\frac{1}{b-a}\int_{a}^{b}f\left(x\right)dx,
\]

\end_inset

and this 
\begin_inset Formula $y$
\end_inset

-value (
\begin_inset Formula $f\left(c\right)$
\end_inset

) is in fact an 
\begin_inset Quotes eld
\end_inset

average
\begin_inset Quotes erd
\end_inset

 value of the function on the interval.
 In this problem, you will illustrate this result.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Choose some quadratic function 
\begin_inset Formula $f\left(x\right)$
\end_inset

.
 Choose a reasonable interval 
\begin_inset Formula $\left[a,b\right]$
\end_inset

.
 Plot the graph of 
\begin_inset Formula $f$
\end_inset

 over 
\begin_inset Formula $\left[a,b\right]$
\end_inset

, filling to both the minimum and maximum 
\begin_inset Formula $y$
\end_inset

-values.
 (This technically requires you to create two plots, then combine them.)
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Solve for the value of 
\begin_inset Formula $c$
\end_inset

 that satisfies the Mean Value Theorem.
 (You'll have to do this by hand, as we haven't yet discussed how to use
 Sage to solve problems.
 It's a quadratic equation, though, so it shouldn't be that hard.)
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Add the line 
\begin_inset Formula $y=f\left(c\right)$
\end_inset

 to your filled plot of 
\begin_inset Formula $f\left(x\right)$
\end_inset

.
 Also add a line from 
\begin_inset Formula $\left(c,0\right)$
\end_inset

 to 
\begin_inset Formula $\left(c,f\left(c\right)\right)$
\end_inset

.
 These lines should have a color different from the plot or its fill.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Explain how this final image illustrates the Mean Value Theorem.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 
\begin_inset CommandInset label
LatexCommand label
name "complex plane"

\end_inset

A complex number has the form 
\begin_inset Formula $a+bi$
\end_inset

.
 The 
\emph on
complex plane
\emph default
 is a representation of the field 
\begin_inset Formula $\mathbb{C}$
\end_inset

 in the Cartesian plane, with the point 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 corresponding to the number 
\begin_inset Formula $a+bi$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Choose three complex numbers 
\begin_inset Formula $a+bi$
\end_inset

, with each corresponding point of the complex plane in a different quadrant.
 Create arrows connecting the origin to each point, each arrow in a different
 color.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Use Sage to evaluate the product 
\begin_inset Formula $i\left(a+bi\right)$
\end_inset

 for each of the points you just chose.
 Create three new arrows connecting the origin to each point, in a color
 corresponding to the color you used for the original point.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Plot all six arrows simultaneously.
 What is the 
\emph on
geometric
\emph default
 effect of multiplying 
\begin_inset Formula $\left(a+bi\right)$
\end_inset

 by 
\begin_inset Formula $i$
\end_inset

?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
5.
 A great deal of higher mathematics is concerned with 
\emph on
elliptic curves
\emph default
, which are 
\emph on
smooth,
\emph default
 non-self-intersecting curves with the general form
\begin_inset Formula 
\[
y^{2}=x^{3}+ax+b.
\]

\end_inset

Graph several curves of this form, using different values for 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

.
 Which value(s) produce(s) elliptic curves? Which value(s) do(es) not? Describe
 the general pattern of what happens as the values of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 change.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 We build on the previous problem.
 A great deal of higher mathematics considers elliptic curves over a finite
 field, such as 
\begin_inset Formula $\mathbb{Z}_{p}$
\end_inset

 where 
\begin_inset Formula $p$
\end_inset

 is prime.
 Choose one of the elliptic curves from the previous problem.
 Let 
\begin_inset Formula $p=5$
\end_inset

, and substitute all possible values of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 into the equation.
 (There are only 25, so this isn't 
\emph on
too
\emph default
 burdensome, and you can probably do a lot of them in your head.
 Just don't forget to do them modulo
\begin_inset space ~
\end_inset

5.) Plot the points in the plane.
 Does this curve bear any resemblance to the one you had before?
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Bonus:
\emph default
 Why were we able to say, with confidence, that in #6 there are 25 possible
 values of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 to substitute? What if we had chosen 
\begin_inset Formula $p=7$
\end_inset

; how would the number of points have changed?
\end_layout

\begin_layout Chapter
Defining your own procedures
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: procedures"

\end_inset

Solving more difficult problems requires a bit more than a simple, straightforwa
rd list of commands.
 It is often helpful to organize many, oft-reused tasks into one command
 that gives us a convenient handle on all of them.
 Doing this would also allow us to deal with tasks more abstractly, helping
 us see the forest rather than the trees.
 It makes it easier to reuse the same code in different places, and likewise
 for someone else to read and, if desired, modify the code to their own
 purposes.
 This idea of 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
modularity
\end_layout

\end_inset

modularity
\series default
 makes us more 
\begin_inset Quotes eld
\end_inset

productive,
\begin_inset Quotes erd
\end_inset

 in the sense that we become better problem-solvers.
\end_layout

\begin_layout Standard
Technically, you've already been doing this: each Sage command you've been
 using to simplify expressions and draw pictures is really a package of
 other commands that was designed (usually carefully) to tackle that particular
 task.
 You can actually view some of the code for most Sage commands using a double
 question mark:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
simplify??
\end_layout

\begin_layout SageOutput
Signature: simplify(f)
\end_layout

\begin_layout SageOutput
Source:
\end_layout

\begin_layout SageOutput
def simplify(f):
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

r"""
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Simplify the expression `f`.
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

EXAMPLES: We simplify the expression `i + x - x`.
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

::
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sage: f = I + x - x; simplify(f)
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

I
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

In fact, printing `f` yields the same thing - i.e., the
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

simplified form.
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

"""
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

try:
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return f.simplify()
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

except AttributeError:
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return f
\end_layout

\begin_layout SageOutput
File: /Applications/sage-6.7-untouched/local/lib/python2.7/ site-packages/sage/cal
culus/functional.py
\end_layout

\begin_layout SageOutput
Type: function
\end_layout

\end_deeper
\begin_layout Standard
This actually gives us a little more than the code.
 It first lists the command's 
\emph on
signature,
\emph default
 a template for how the command is used.
 It then lists the 
\begin_inset Quotes eld
\end_inset

source code,
\begin_inset Quotes erd
\end_inset

 the list of commands that define the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
simplify()
\end_layout

\end_inset

 command.
 These commands start after the line labeled 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Source:
\end_layout

\end_inset

 and continue until the line labeled 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
File:
\end_layout

\end_inset

; this latter line indicates the file on disk where the command is found.
 Were you to open that file, you would find the same source listed above
 therein.
 Notice that most of the source code in this case consists of the same documenta
tion you see when you type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
simplify?
\end_layout

\end_inset


\begin_inset space ~
\end_inset

, reflecting that Sage's documentation is embedded in the code itself.
\end_layout

\begin_layout Standard
Much of the rest of this text is dedicated to helping you understand what
 all that source code means, and how to use it to your own ends.
 We don't expect you to become a full-fledged Sage developer by the time
 you're done (that would go far beyond its scope) but we do expect you to
 be able to write new, simple commands that accomplish specific tasks that
 would be useful for research and education.
 That requires some dedication on your part, but don't fret: it requires
 dedication on our part, too, for which we now roll back our figurative
 sleeves and delve in.
\end_layout

\begin_layout Section*
Defining a procedure
\end_layout

\begin_layout Standard
The commands you define in Sage are often called 
\emph on
functions,
\emph default
 which agrees with the mathematical use in that you provide 
\emph on
arguments
\emph default
 to a function, and it provides some result.
 However, a Sage function and a mathematical function are not quite the
 same thing, so to keep matters clear we will adopt the term 
\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout
procedure
\end_layout

\end_inset

procedure
\emph default
 for a new command that you define in Sage.
\end_layout

\begin_layout Subsection*
The basic format
\end_layout

\begin_layout Standard
To define a procedure, we use the following format:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def procedure_name(arguments):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

first_statement
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

second_statement
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can think of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\end_layout

\end_inset

 as shorthand for 
\begin_inset Quotes eld
\end_inset

define.
\begin_inset Quotes erd
\end_inset

 It is an example of a 
\emph on
keyword
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword
\end_layout

\end_inset


\emph default
 or a reserved word
\begin_inset Index idx
status open

\begin_layout Plain Layout
reserved word
\end_layout

\end_inset

, a sequence of characters which carries special meaning in a programming
 language, and which the programmer cannot assign some other meaning.
 What follows next is a valid identifier name (review the rules on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "subsec:valid identifier names"

\end_inset

) and is the name of your new procedure.
 You must next open and close parentheses.
 Optionally, you can include additional identifiers within the parentheses;
 while this is not required, it gives the best, most reliable way to pass
 information to the your procedure.
 We call these identifiers 
\emph on
arguments
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
argument
\end_layout

\end_inset

,
\begin_inset Foot
status open

\begin_layout Plain Layout
Aptly named, as writing a program so often feels like an argument with the
 computer.
 Computer science texts often call arguments 
\begin_inset Quotes eld
\end_inset

parameters.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 and will look at them more carefully in a moment.
\end_layout

\begin_layout Standard
The next thing to notice is that the 
\begin_inset Quotes eld
\end_inset

statements
\begin_inset Quotes erd
\end_inset

 are indented.
 This is an important principle that Sage inherits from Python, which you'll
 recall is the programming language we use to interact with Sage: whenever
 we come to a point in a program where we need to organize statements 
\begin_inset Quotes eld
\end_inset

within
\begin_inset Quotes erd
\end_inset

 other statements, or where some commands 
\begin_inset Quotes eld
\end_inset

depend
\begin_inset Quotes erd
\end_inset

 on others, we indicate which statements depend on the others using indentation.
\begin_inset Foot
status open

\begin_layout Plain Layout
Most computer languages do not require indentation, but designate keywords
 or special characters to indicate where a control structure begins and
 ends.
 For instance, many languages follow C in the use of braces 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
{
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset

 to open and close a structure; others use variations on 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
BEGIN
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
END
\end_layout

\end_inset

.
\end_layout

\end_inset

 This setup is called a control structure; here, the control structure is
 the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset

 statement, which defines a procedure, which for our purposes can be considered
 a shorthand for a list of other statements.
\end_layout

\begin_layout Standard
For now, let's look at a fairly simple procedure.
 It takes no arguments, but is not entirely useless.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def greetings():
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('Greetings!')
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can use either single or double quotes around the word 
\begin_inset Quotes eld
\end_inset

Greetings,
\begin_inset Quotes erd
\end_inset

 but be sure to do it consistently.
\end_layout

\begin_layout Standard
If you've typed this correctly, Sage will accept it silently.
 If you type something wrong and Sage detects it, it will report an error.
 For instance, if you forget to indent, you will see this:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
IndentationError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
expected an indented block
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def greetings():
\end_layout

\begin_layout SageMoreInput
print(''Greetings!'')
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

File "<ipython-input-33-33dcc1adcd0e>", line 2
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print("Greetings!")
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

^
\end_layout

\begin_layout SageOutput
IndentationError: expected an indented block
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageOutput
If you want to paste code into IPython, try the %paste and %cpaste magic
 functions.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
It's somewhat unlikely that you'll see an 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
IndentationError
\end_layout

\end_inset

 if you type your program in a worksheet or at the command line, as Sage
 automatically indents for you at times you should do it.
\end_layout

\begin_layout Standard
Here's another error you may see:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invalid syntax
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def greetings()
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

File "<ipython-input-34-583f0b909fc6>", line 1
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def greetings()
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

^
\end_layout

\begin_layout SageOutput
SyntaxError: invalid syntax
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Do you see the problem here? If not, spend a few minutes comparing this
 attempt with the successful one.
 In particular, look at the end of the line, which is where the carat symbol
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
^
\end_layout

\end_inset

 is pointing.
 That position is where Sage encounters its problems.
\end_layout

\begin_layout Standard
We now return to the assumption that you've defined the procedure successfully.
 You can use your new procedure by typing it, followed by a pair of parentheses,
 and executing the line.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
greetings()
\end_layout

\begin_layout SageOutput
Greetings!
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage has done what you requested.
 It looked up the procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
greetings()
\end_layout

\end_inset

, saw that this procedure needs to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print('Greetings!')
\end_layout

\end_inset

, and does what was requested.
\end_layout

\begin_layout Subsection*
An aside
\end_layout

\begin_layout Standard
The meaning of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset


\end_layout

\end_inset

 command is hopefully obvious: it prints whatever follows.
\end_layout

\begin_layout Standard
In older versions of Sage, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

was keyword; you could not assign it a new value:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invalid syntax
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
print = 2
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

File "<ipython-input-38-7c34f307b821>", line 1
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print = Integer(2)
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

^
\end_layout

\begin_layout SageOutput
SyntaxError: invalid syntax
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Now, however, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 is one of Sage's 
\begin_inset Quotes eld
\end_inset

standard procedures
\begin_inset Quotes erd
\end_inset

; a name which you can reassign to rather unfortunate ends if you're not
 careful:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
print = 2
\end_layout

\begin_layout SageInput
print
\end_layout

\begin_layout SageOutput
2
\end_layout

\begin_layout SageInput
print(3)
\end_layout

\begin_layout SageOutput
TypeError Traceback (most recent call last)
\end_layout

\begin_layout SageOutput
<ipython-input-8-fd56b57ba354> in <module>()
\end_layout

\begin_layout SageOutput
----> 1 print(Integer(3))
\end_layout

\begin_layout SageOutput
TypeError: 'sage.rings.integer.Integer' object is not iterable
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you do inadvertently redefine a standard procedure, remember that the
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
reset
\end_layout

\end_inset

 command will return it to its original meaning:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
reset(
\begin_inset ERT
status open

\begin_layout Plain Layout

\begin_inset Quotes eld
\end_inset


\end_layout

\end_inset

print
\begin_inset ERT
status open

\begin_layout Plain Layout

\begin_inset Quotes eld
\end_inset


\end_layout

\end_inset

)
\end_layout

\begin_layout SageInput
print(3)
\end_layout

\begin_layout SageOutput
3
\end_layout

\end_deeper
\begin_layout Standard
Alas, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 does not cooperate with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

, so you can't generate pretty output that way.
 To do that, you have to use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash
 
\end_layout

\end_inset

from an HTML cell (see p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "par: HTML cells"

\end_inset

), or create a plot.
\end_layout

\begin_layout Subsection*
Another aside
\end_layout

\begin_layout Standard
Programmers commonly leave comments in code to explain how a procedure is
 supposed to work.
 The main way of doing this in Sage is with the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
#
\end_layout

\end_inset

 symbol; whenever Sage sees this symbol, it ignores everything that follows.
 For instance, the following implementation of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
greetings()
\end_layout

\end_inset

 is equivalent to the one above.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def greetings():
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# greet the user
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('Greetings!')
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage simply ignores the line that begins with the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
#
\end_layout

\end_inset

 symbol, and moves immediately to the next one.
\end_layout

\begin_layout Standard
It is a 
\emph on
very good idea
\emph default
 to leave comments in procedures, especially at the beginning of a sequence
 of complicated lines.
 The authors can attest to the fact that they have written code one year
 that seemed obvious in the moment of programming it, then returned to it
 weeks, months, or even years later and wondered, 
\begin_inset Quotes eld
\end_inset

What on earth did I do 
\emph on
that
\emph default
 for?
\begin_inset Quotes erd
\end_inset

 This then requires several minutes, hours, or even days of puzzling over
 the code to figure out how it worked.
 Most of the procedures we write in this text are not very long, but we
 will still include comments in many of them as a way to illustrate the
 need.
\end_layout

\begin_layout Section*
Arguments
\end_layout

\begin_layout Standard
An 
\emph on
argument
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument
\end_layout

\end_inset


\emph default
 is a variable that a procedure uses to receive necessary or merely useful
 information.
 We can view an argument as a placeholder for data; its name exists only
 inside the procedure, and the information is forgotten once the procedure
 terminates.
 An argument contains only a 
\emph on
copy
\emph default
 of the information sent — not the original information itself.
 We can illustrate the basic idea by modifying the procedure of the previous
 section:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def greetings(name):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('Greetings,', name)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Here, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
name
\end_layout

\end_inset

 is an argument to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
greetings()
\end_layout

\end_inset

.
 It's also a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument!mandatory
\end_layout

\end_inset


\emph on
mandatory
\emph default
 argument, as we specified no default value.
 We'll discuss mandatory v.
\begin_inset space ~
\end_inset

optional arguments presently; for now, it suffices to understand that you
 
\emph on
must
\emph default
 supply a value for mandatory arguments.
 For example, the following usage of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
greetings()
\end_layout

\end_inset

 is legitimate in Sage:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
greetings('Pythagoras')
\end_layout

\begin_layout SageOutput
Greetings, Pythagoras
\end_layout

\end_deeper
\begin_layout Standard
\noindent
What happened? When Sage reads the command, it sees that you want to call
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
greetings()
\end_layout

\end_inset

 with one argument, which is the string 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'Pythagoras'
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
 It copies that information into the variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
name
\end_layout

\end_inset


\begin_inset space ~
\end_inset

, then proceeds to execute all the commands indented beneath the definition
 of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
greetings()
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
On the other hand, now that we have redefined 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
greetings()
\end_layout

\end_inset

, the following usage results in an error, even though it worked fine earlier:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!takes exactly argument@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
\SpecialChar ldots
 takes exactly \SpecialChar ldots
 argument (\SpecialChar ldots
 given)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
greetings()
\end_layout

\begin_layout SageError
TypeError Traceback (most recent call last)
\end_layout

\begin_layout SageError
<ipython-input-44-deb3f0bd6096> in <module>()
\end_layout

\begin_layout SageError
----> 1 greetings()
\end_layout

\begin_layout SageError
\begin_inset space ~
\end_inset


\end_layout

\begin_layout SageError
TypeError: greetings() takes exactly 1 argument (0 given)
\end_layout

\end_deeper
\begin_layout Subsection*
A particular example: the equation of a tangent line
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec: equation of tangent line"

\end_inset

We'll focus on a particular usage for this: suppose you want to write a
 procedure that automatically computes the equation at a point 
\begin_inset Formula $x=a$
\end_inset

 of a line tangent to a curve defined by a function 
\begin_inset Formula $f\left(x\right)$
\end_inset

.
 You will recall that the equation of a line with slope 
\begin_inset Formula $m$
\end_inset

 and through a point 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 has the form
\begin_inset Formula 
\[
y-b=m\left(x-a\right),
\]

\end_inset

which we can rewrite as
\begin_inset Formula 
\[
y=m\left(x-a\right)+b.
\]

\end_inset

In this case, 
\begin_inset Formula $m$
\end_inset

 is the derivative of 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

; or, 
\begin_inset Formula $m=f'\left(a\right)$
\end_inset

.
 So we can rewrite the equation as
\begin_inset Formula 
\[
y=f'\left(a\right)\cdot\left(x-a\right)+b.
\]

\end_inset

We want a procedure that produces such an equation, or at least the right-hand
 side of it.
\end_layout

\begin_layout Standard
To define this procedure, we have to answer several questions:
\end_layout

\begin_layout Itemize
What information does the procedure need?
\end_layout

\begin_deeper
\begin_layout Standard
We need the function 
\begin_inset Formula $f\left(x\right)$
\end_inset

, and the 
\begin_inset Formula $x$
\end_inset

-value 
\begin_inset Formula $a$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
How do we use that information to obtain the result we want?
\end_layout

\begin_deeper
\begin_layout Itemize
We first need to compute 
\begin_inset Formula $f'\left(a\right)$
\end_inset

.
 That requires computing 
\begin_inset Formula $f'\left(x\right)$
\end_inset

, then substituting 
\begin_inset Formula $x=a$
\end_inset

.
\end_layout

\begin_layout Itemize
We also need to compute 
\begin_inset Formula $b$
\end_inset

.
 That is the 
\begin_inset Formula $y$
\end_inset

-value at 
\begin_inset Formula $x=a$
\end_inset

, so it suffices to compute 
\begin_inset Formula $f\left(a\right)$
\end_inset

; that is, substituting 
\begin_inset Formula $x=a$
\end_inset

 into 
\begin_inset Formula $f\left(x\right)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
How do we communicate the result to the client?
\end_layout

\begin_deeper
\begin_layout Standard
For now we'll just 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 it, but eventually we'll discuss a better way.
\end_layout

\end_deeper
\begin_layout Standard
Putting this information together leads us to the following definition:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def tangent_line(f, a):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('The line tangent to', f, 'at x =', a, 'is',)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(result, '.')
\end_layout

\end_deeper
\begin_layout Standard
Let's put this into practice.
 A simple example that you can verify by hand is the equation of a line
 tangent to 
\begin_inset Formula $y=x^{2}$
\end_inset

 at 
\begin_inset Formula $x=1$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
tangent_line(x**2, 1)
\end_layout

\begin_layout SageError
/Applications/sage-6.7-untouched/src/bin/sage-ipython:1: DeprecationWarning:
 Substitution using function-call syntax and unnamed arguments is deprecated
 and will be removed from a future release of Sage; you can use named arguments
 instead, like EXPR(x=..., y=...)
\end_layout

\begin_layout SageError
See http://trac.sagemath.org/5930 for details.
\end_layout

\begin_layout SageError
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

#!/usr/bin/env python
\end_layout

\begin_layout SageOutput
The line tangent to x^2 at x = 1 is 2*x - 1 .
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Oops! we encountered that 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Substitution using function-call syntax
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

 again.
 This is a one-time thing in each Sage session, and we do get the right
 answer in the end (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2*x
\begin_inset space ~
\end_inset

-
\begin_inset space ~
\end_inset

1
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Even so, we ought to change it.
 Only, where is it occurring? We have to check each statement of the procedure:
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df(x) = diff(f,x)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This can't be the problem, as it 
\emph on
defines
\emph default
 a procedure.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
m = df(a)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This uses 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df
\end_layout

\end_inset

 in function-call syntax, so it's a candidate for the problem.
 However, it can't actually be the problem, because we defined 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df
\end_layout

\end_inset

 properly as a function.
 It 
\emph on
is
\emph default
 appropriate to use function-call syntax with functions.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b = f(a)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
This uses 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 in function-call syntax, so it's a candidate for the problem.
 As 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 is an argument, into which Sage copied the value supplied when we called
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

, we have to look outside the procedure to see if it is indeed the problem.
 We called it using the command,
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line(x**2, 1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This must be the problem, as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x**2
\end_layout

\end_inset

 is an 
\emph on
expression
\emph default
, not a 
\emph on
function
\emph default
.
\end_layout

\end_deeper
\begin_layout Standard
So one way to avoid this warning is to define a function before calling
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

, as follows:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = x**2
\end_layout

\begin_layout SageInput
tangent_line(f, 1)
\end_layout

\begin_layout SageOutput
The line tangent to x |--> x^2 at x = 1 is 2*x - 1 .
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This isn't very convenient, though, as it requires a lot more typing.
 It also imposes a condition on the client.
\end_layout

\begin_layout Standard
A much better solution is to adjust the program itself, so that it does
 not assume it receives a function when, in fact, it does not.
\begin_inset Foot
status open

\begin_layout Plain Layout
If you are accustomed to typed languages such as C, Java, or Eiffel, you
 will notice that this is one case where the use of types — which can often
 seem overly constrictive — actually helps the programmer.
 Not only does Sage not 
\emph on
require
\emph default
 types, it really offers no facility for them at all, unless you use Cython.
 We discuss Cython at the end of the text.
\end_layout

\end_inset

 We can do this by changing the line 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b = f(a)
\end_layout

\end_inset

 to use an explicit substitution, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b = f(x=a)
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
 Let's try that.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def tangent_line(f, a):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(x=a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('The line tangent to', f, 'at x =', a, 'is',)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(result, '.')
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Now we try to execute it:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
tangent_line(x^2, 1)
\end_layout

\begin_layout SageOutput
The line tangent to x^2 at x = 1 is 2*x - 1 .
\end_layout

\end_deeper
\begin_layout Standard
Since a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

 appears only once, it may not be obvious that we have actually fixed the
 problem, as Sage may be suppressing the warning again.
 You can verify this by restarting Sage: in worksheet mode, click on the
 Restart button; on the command line, type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
exit
\end_layout

\end_inset

, then restart Sage.
\end_layout

\begin_layout Subsection*
Optional arguments
\end_layout

\begin_layout Standard
Sage also allows 
\emph on
optional
\emph default
 arguments
\begin_inset Index idx
status open

\begin_layout Plain Layout
arguments!optional
\end_layout

\end_inset

.
 In this case, it often makes sense to supply a default value
\begin_inset Index idx
status open

\begin_layout Plain Layout
argument!default value
\end_layout

\end_inset

 for an argument.
 This way, you need not supply 
\begin_inset Quotes eld
\end_inset

obvious
\begin_inset Quotes erd
\end_inset

 values for the general case; you can supply them only when necessary.
\end_layout

\begin_layout Standard
You have already encountered this.
 Look back at, for instance, Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig:point()"

\end_inset

 and Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig: common options"

\end_inset

.
 Both of them speak of options, which are really optional arguments to the
 procedures.
 For example, you can type
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
point((3,2))
\end_layout

\end_deeper
\begin_layout Standard
\noindent
or you can type
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
point((3,2), pointsize=10, color='blue', alpha=1, zorder=0)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
as both mean the same thing.
\end_layout

\begin_layout Standard
This example also illustrates how optional arguments allow the client to
 focus on the problem.
 You often don't care a hoot what color a point is, what size it is, and
 so on; you just want to see where it's located, typically relative to something
 else.
 
\emph on
If useful,
\emph default
 you might want to specify some of those other options; for instance, you
 could be looking at several points on a curve, and to help distinguish
 them you'd color them differently.
 But this might be completely unnecessary, and even if you wanted to specify
 the color, the precise size, transparency, and 
\begin_inset Formula $z$
\end_inset

-order still might not matter.
 Making these arguments optional means you don't have to specify them.
\end_layout

\begin_layout Standard
So how do you name an optional argument when writing your own procedures?
 After the variable's name, place an equals sign, followed by the default
 value that it should take on.
 Let's see how we can do this in our procedure to greet someone: perhaps
 we'd like the default value to be 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'Leonhard Euler'
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def greetings(name='Leonhard Euler'):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('Greetings,', name)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The argument 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
name
\end_layout

\end_inset

 is now optional.
 As with the previous version, we can now supply a name:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
greetings('Pythagoras')
\end_layout

\begin_layout SageOutput
Greetings, Pythagoras
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
and you can also name the optional argument explicitly (this is useful when
 there are multiple optional arguments, and you don't want to worry about
 listing them in the correct order):
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
greetings(name='Pythagoras')
\end_layout

\begin_layout SageOutput
Greetings, Pythagoras
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
but 
\emph on
unlike
\emph default
 the previous version, we can use the procedure without a default value:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
greetings()
\end_layout

\begin_layout SageOutput
Greetings, Leonhard Euler
\end_layout

\end_deeper
\begin_layout Subsection*
Supplying indeterminates as default arguments
\end_layout

\begin_layout Standard
It is often useful to supply an indeterminate as a default argument.
 To see an example, we return to our example with the tangent lines.
 It works just fine if the expression is defined in terms of 
\begin_inset Formula $x$
\end_inset

, but many expressions are more aptly defined in terms of another indeterminate,
 such as 
\begin_inset Formula $t$
\end_inset

.
 Will our procedure still compute tangent lines for those expressions?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('t')
\end_layout

\begin_layout SageInput
tangent_line(t**2, 1)
\end_layout

\begin_layout SageOutput
The line tangent to t^2 at x = 1 is t^2 .
\end_layout

\end_deeper
\begin_layout Standard
\noindent

\emph on
That's
\emph default
 definitely not right.
 The answer should have been 
\begin_inset Formula $2t-1$
\end_inset

, not 
\begin_inset Formula $t^{2}$
\end_inset

.
 What went wrong? Several things:
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df(x) = diff(f, x)
\end_layout

\end_inset

 differentiates 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 with respect to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

, not with respect to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
t
\end_layout

\end_inset

.
 The result is that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df(x)
\end_layout

\end_inset

 ends up being
\begin_inset space ~
\end_inset

0, rather than 
\begin_inset Formula $2t$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
m = df(a)
\end_layout

\end_inset

 is working with the wrong value of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df(x)
\end_layout

\end_inset

, so we end up with 
\begin_inset Formula $m=0$
\end_inset

 instead of 
\begin_inset Formula $m=2$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b = f(x=a)
\end_layout

\end_inset

 asks Sage to substitute 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 in place of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

, not in place of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
t
\end_layout

\end_inset

.
 The substitution effectively does nothing, with the result that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 ends up being 
\begin_inset Formula $t^{2}$
\end_inset

, rather than 1.
\end_layout

\begin_layout Itemize
Put it all together with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
m*(x - a) - b
\end_layout

\end_inset

 and it becomes clear why Sage returns 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
t^2
\end_layout

\end_inset

 instead of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2*t - 1
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
One way to fix this would be to write a new procedure that did its work
 with respect to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
t
\end_layout

\end_inset

 instead of with respect to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

.
 This is a terrible idea, though: the number of possible identifiers is
 quite large; aside from all
\begin_inset space ~
\end_inset

52 upper- and lower-case letters of the Latin alphabet, one can also have
 combinations of these letters with numbers and the underscore.
 All of the following names of indeterminates could be used in some perfectly
 legitimate mathematical context:
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x0
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x_0
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xi
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x_i
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\SpecialChar ldots
and that's just indeterminates that start with 
\begin_inset Formula $x$
\end_inset

.
 You can play this game with 
\begin_inset Formula $y$
\end_inset

, 
\begin_inset Formula $t$
\end_inset

, 
\begin_inset Formula $a$
\end_inset

, \SpecialChar ldots
 you get the idea.
\end_layout

\begin_layout Standard
So that approach is impractical.
 The proper way to do it is to specify the indeterminate as an argument
 to the procedure itself, something like 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line(f,
\begin_inset space ~
\end_inset

1,
\begin_inset space ~
\end_inset

t)
\end_layout

\end_inset

.
 
\emph on
Even better
\emph default
 would be to make the indeterminate an 
\emph on
optional
\emph default
 argument, with default value 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

, so that the client need only specify the indeterminate when necessary.
 That way, the statements 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line(f,
\begin_inset space ~
\end_inset

1)
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line(f,
\begin_inset space ~
\end_inset

1,
\begin_inset space ~
\end_inset

x)
\end_layout

\end_inset

 mean the same thing.
 A naïve approach to this would be the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def tangent_line(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(x=a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('The line tangent to', f, 'at', x, '=', a, 'is',)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(result, '.')
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The statement 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x=x
\end_layout

\end_inset

 may look odd, but it makes perfect sense: the first 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 specifies the name of the argument in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

, while the second 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 specifies its default value.
 Essentially, it states that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 has an optional argument named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 whose default value is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
This sort of construction occurs in the Sage source code not infrequently.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So what happens when we try it?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
tangent_line(t**2, 1, t)
\end_layout

\begin_layout SageOutput
The line tangent to t^2 at t = 1 is t^2 + 2*t - 2 .
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\size huge
\color red
PANIC!
\end_layout

\begin_layout Standard
\noindent
\SpecialChar ldots
Well, no, 
\emph on
don't
\emph default
 panic.
 Let's analyze instead what happened, and try to fix the issue.
 To do this, we introduce a classical debugging technique of desperation,
 which goes by the technical name,
\end_layout

\begin_layout Standard
\align center

\size huge
\color red
print
\end_layout

\begin_layout Standard
\noindent
What does that mean? We print everything that Sage computes in the procedure,
 and try from there to see what went wrong.
 Rewrite the procedure as follows:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def tangent_line(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(x=a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(b)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(df)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(m)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('The line tangent to', f, 'at', x, '=', a, 'is',)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(result, '.')
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can see that we have a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 statement after almost every original statement.
 We left off 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

 because that's already printed on the following line.
 What happens when we execute this version of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
tangent_line(t**2, 1, t)
\end_layout

\begin_layout SageOutput
t^2
\end_layout

\begin_layout SageOutput
t |--> 2*t
\end_layout

\begin_layout SageOutput
2
\end_layout

\begin_layout SageOutput
The line tangent to t^2 at t = 1 is t^2 + 2*t - 2 .
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We see that:
\end_layout

\begin_layout Itemize
\noindent
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df
\end_layout

\end_inset

 is 
\emph on
correctly
\emph default
 computed as 
\begin_inset Formula $2t$
\end_inset

;
\end_layout

\begin_layout Itemize
\noindent
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

 is 
\emph on
correctly
\emph default
 computed as 2; but
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 is 
\emph on
incorrectly
\emph default
 computed as 
\begin_inset Formula $t^{2}$
\end_inset

 — as if the substitution didn't take! 
\emph on
Again!
\end_layout

\begin_layout Standard
Notice the subtle difference this time: one substitution actually 
\emph on
did
\emph default
 work.
 The other one did not.
 The difference is that one is a mathematical function defined inside our
 Sage procedure; the other is an expression defined outside our Sage procedure.
\end_layout

\begin_layout Standard
The apparent solution is to redefine 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 inside our procedure, as a mathematical function.
 We then rely exclusively on function notation.
 There is no danger in this; thanks to the rules of scope, changing the
 value of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 inside 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 does not change its original value outside.
 The successful procedure adds one line:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def tangent_line(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('The line tangent to', f, 'at', x, '=', a, 'is',)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(result, '.')
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That first line redefines the argument 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 as a function.
 If 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 is an expression, we have avoided the 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
DeprecationWarning
\end_layout

\end_inset

; if it is a function, Sage will have no trouble assigning it to itself.
 Try it out:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
tangent_line(t**2, 1, t)
\end_layout

\begin_layout SageOutput
The line tangent to t |--> t^2 at t = 1 is 2*t - 1 .
\end_layout

\end_deeper
\begin_layout Section*
An end to dysfunctional communication
\end_layout

\begin_layout Standard
So far we've been displaying the result of a computation using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 command.
 While this is useful for demonstrating the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 command, as well as for displaying output, it's an obstacle to efficient
 automation.
 You don't want your code to wait for you to see the printed result of some
 procedure, then type it into another procedure.
 Rather than exhaust yourself this way, it would be much better to have
 the procedures communicate directly.
 That way, you could call one procedure inside another and sidestep yourself
 entirely.
 You can start a computation, walk away, grab a cup of a caffeinated drink,
\begin_inset Foot
status open

\begin_layout Plain Layout
This originally referred to a particular caffeinated drink, while taking
 potshots at another, more popular one, because one of the authors is a
 little immature.
 A second author commented ZOMGPONIES and subsequently convinced the first
 to change it to the current, generic discourse on caffeinated drinks.
\end_layout

\end_inset

 then come back and find your procedures have completed their tasks and
 are waiting happily for you, tails a-waggin'.
\end_layout

\begin_layout Subsection*
Local v.
\begin_inset space ~
\end_inset

global scope
\end_layout

\begin_layout Standard
Suppose, for instance, you would like to write a procedure that plots a
 mathematical function 
\begin_inset Formula $f\left(x\right)$
\end_inset

 and the line tangent to 
\begin_inset Formula $f$
\end_inset

 at that point.
 You could, of course, have it compute the tangent line by copying and pasting
 the code in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 into the new procedure, but that both wastes resources and makes the new
 procedure harder to read.
 You could instead employ 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
modularity
\end_layout

\end_inset

modularity
\series default
 by letting 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 compute the tangent line, and letting your procedure focus purely on plotting
 the function and the line — but how would the new procedure use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

's result? On the one hand, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 has a variable called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

, so perhaps we could do something like this?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def plot_tangent_line(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# use tangent_line() to find the line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

tangent_line(f, a, x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

plot(result, a-1, b-1)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That won't work, and if we were to try it, we would encounter the following
 error:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
NameError
\end_layout

\end_inset

!global name@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
global name \SpecialChar ldots
 is not defined
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
plot_tangent_line(x^2, 1)
\end_layout

\begin_layout SageError
NameError: global name 'result' is not defined
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This error tells us that if 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

 exists anywhere, it doesn't exist in the 
\begin_inset Quotes eld
\end_inset

global
\begin_inset Quotes erd
\end_inset

 Sage environment,
\begin_inset Index idx
status open

\begin_layout Plain Layout
variable!global v.
\begin_inset space ~
\end_inset

local
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
local variable|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

variable, global v.
\begin_inset space ~
\end_inset

local
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
global variable
\end_layout

\end_inset

 so we use its name in vain.
 We only defined 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

 in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 procedure, so it remained 
\series bold
local
\series default
 to that procedure.
\end_layout

\begin_layout Standard
There are two ways around this.
 One of them is declare 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

 as a global variable in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 procedure using the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset

 keyword; afterwards, result would be accessible outside it, as well:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def tangent_line(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

global result
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\end_deeper
\begin_layout Standard
\noindent
However, this is a 
\emph on
terrible
\emph default
 idea, for several reasons.
 First, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

 is about as uninformative a name as you could give.
 If every procedure placed its result in a variable named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

 — well, it could work, actually, but it would be rather chaotic.
 Besides, there's a better way.
\end_layout

\begin_layout Subsection*
Returning from chaos
\end_layout

\begin_layout Standard
Sage provides a convenient command for this with another keyword, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset


\end_layout

\end_inset

.
 Every Sage procedure returns some value, even if you omit this keyword.
 You can verify this with the procedures we have defined, using a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type()
\end_layout

\end_inset

 statement:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
nothing = tangent_line(f, 1, t)
\end_layout

\begin_layout SageOutput
The line tangent to t |--> t^2 at x = 1 is 2*t - 1 .
\end_layout

\begin_layout SageInput
type(nothing)
\end_layout

\begin_layout SageOutput
<type 'NoneType'>
\end_layout

\end_deeper
\begin_layout Standard
\noindent
What Sage returns in these instances is an object called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset

.
 Programmers often use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Or the analog in other languages: 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
NULL
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
NIL
\end_layout

\end_inset

, \SpecialChar ldots

\end_layout

\end_inset

 to indicate that something has not been initialized, but that is a different
 discussion.
\end_layout

\begin_layout Standard
Unlike other computer languages, Sage does not constrain you to return only
 one result; it is possible to return several results at once.
 Simply list them after the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 keyword, separating them with commas.
 For instance, the following program will return both the derivative 
\emph on
and
\emph default
 the antiderivative of a procedure, assuming both exist:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def deriv_and_integ(f, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# BOOOO-RING
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f, x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

F(x) = integral(f, x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return df, F
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If this reminds you of how Sage allows you to assign to more than one variable
 in one statement (see p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "assignment to multiple variables"

\end_inset

), you are correct! You could use the procedure above in the following way:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = x**2
\end_layout

\begin_layout SageInput
df, F = deriv_and_integ(f)
\end_layout

\begin_layout SageInput
df
\end_layout

\begin_layout SageOutput
x |--> 2*x
\end_layout

\begin_layout SageInput
F
\end_layout

\begin_layout SageOutput
x |--> 1/3*x^3
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you've had experience with languages that don't allow this, you understand
 how complicated, and somewhat unintuitive, it can be to return more than
 one value at a time.
\begin_inset Foot
status open

\begin_layout Plain Layout
For instance, in C++ one can either pass arguments by reference, resulting
 in the signature
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
void deriv_and_integ(Function f, Function & df, Function & F, Indeterminate
 x=x);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
or create a 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
struct
\end_layout

\end_inset

 or 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
class
\end_layout

\end_inset

 that contains fields for both answers:
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
struct DandI_result { Function df; Function F; };
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
DandI_result deriv_and_integ(Function f, Indeterminate x=x);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
but the Python approach seems more elegant.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
What we want to do is modify the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 procedure to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 the line, rather than 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 it.
 This is fairly straightforward:
\end_layout

\begin_layout SageInteraction
\begin_inset CommandInset label
LatexCommand label
name "sage: tangent line function that prints results"

\end_inset


\end_layout

\begin_deeper
\begin_layout SageInput
def tangent_line(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\end_deeper
\begin_layout Standard
\noindent
It's that simple.
 What happens when you use it?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
tangent_line(t**2, 1, t)
\end_layout

\begin_layout SageOutput
2*t - 1
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The output may not seem as informative as before, but that's because we've
 pruned it to its essence.
 You could change the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 statement to include the text information we had before, but the bare essence
 is much more useful.
 Why? we can now do the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p1 = plot(t**2, 0, 2, color='black', thickness=2)
\end_layout

\begin_layout SageInput
par_line = tangent_line(t**2, 1, t)
\end_layout

\begin_layout SageInput
p2 = plot(par_line, 0, 2, color='red', linestyle='dashed')
\end_layout

\begin_layout SageInput
p1 + p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/function graphics/tangent_line.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Notice what we're doing: we're taking the result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

, assigning its value to a variable named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
par_line
\end_layout

\end_inset

, then passing that as an argument to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

.
 You can do this 
\emph on
even if you did not envision plotting the result of 
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset


\emph on
!
\emph default
 Indeed, you'll notice we didn't mention the possibility of plotting the
 tangent line at all before this point.
 Much of the power of procedures lies in the fact that you can use them
 in situations not imagined when the procedures were designed; clients still
 enjoy the benefits of having the code already written for them.
\end_layout

\begin_layout Section*
Pseudocode
\end_layout

\begin_layout Standard
People who are serious about working on a computer have to communicate their
 ideas to each other.
 Not everyone uses the same programming language, and for the sake of abstractio
n and communication it's a good idea to avoid reliance on a particular language
 to describe the solution to a problem.
 For this reason, mathematicians often use 
\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudocode
\end_layout

\end_inset

pseudocode
\emph default
 to describe a computer program — or, to be more precise, the algorithm
 used in the program.
 An 
\emph on
algorithm
\begin_inset Index idx
status open

\begin_layout Plain Layout
algorithm
\end_layout

\end_inset


\emph default
 is a sequence of steps with well-defined input
\begin_inset Index idx
status open

\begin_layout Plain Layout
input
\end_layout

\end_inset

 (information used) and output
\begin_inset Index idx
status open

\begin_layout Plain Layout
output
\end_layout

\end_inset

 (information returned).
\end_layout

\begin_layout Standard
There are different ways of expressing pseudocode; some examples appear
 in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: examples of pseudocode"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="2.125in">
<column alignment="center" valignment="top" width="4in">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphics/function graphics/BlinkovGerdt_pseudocode.tiff
	lyxscale 50
	width 2in

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphics/function graphics/bigatti_pseudocode.tiff
	lyxscale 50
	width 4in

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Appears in 
\begin_inset CommandInset citation
LatexCommand cite
key "BlinkovGerdtInvBases98"
literal "true"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Appears in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bigatti97"
literal "true"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphics/function graphics/DamianoGentiliStruppa_pseudocode.tiff
	lyxscale 50
	width 1.25in

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename graphics/function graphics/BigattiCaboaraRobbiano_pseudocode.tiff
	lyxscale 50
	width 4in

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Appears in 
\begin_inset CommandInset citation
LatexCommand cite
key "DamianoGentiliStruppaQuaternionicPolys09"
literal "true"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Appears in 
\begin_inset CommandInset citation
LatexCommand cite
key "BigattiCaboaraRobbiano10"
literal "true"

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: examples of pseudocode"

\end_inset

Pseudocode from various mathematical publications
\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudocode!other examples
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

You should notice several properties they all share:
\end_layout

\begin_layout Itemize
All of them specify the algorithm's name, required information (
\begin_inset Quotes eld
\end_inset

input
\begin_inset Quotes erd
\end_inset

), and promised result (
\begin_inset Quotes eld
\end_inset

output
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
All of them use some form of indentation to show how some code depends on
 others.
\end_layout

\begin_layout Itemize
All of them rely on 
\begin_inset Quotes eld
\end_inset

plain
\begin_inset Quotes erd
\end_inset

 English and mathematical symbols to communicate what is to be done.
\end_layout

\begin_layout Itemize

\emph on
None
\emph default
 of them resembles computer code in a particular computer language.
\end_layout

\begin_layout Standard
This text will provide pseudocode for you to implement, and will ask you
 to write your own pseudocode on occasion.
 We have to adopt some standard, and we will do the following:
\begin_inset Index idx
status open

\begin_layout Plain Layout
pseudocode!our standard
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Identifiers for variables or names of algorithms appear in italics.
\end_layout

\begin_layout Itemize
Keywords for control structures and fundamental information will appear
 in 
\series bold
bold type
\series default
.
 Right now, we introduce the following keywords:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
algorithm
\series default
 appears at the beginning, and declares the name of an algorithm
\end_layout

\begin_layout Itemize

\series bold
inputs
\series default
 appears immediately after 
\series bold
algorithm
\series default
, and below it comes an indented list of the required information, 
\emph on
along with the sets they come from
\end_layout

\begin_layout Itemize

\series bold
outputs
\series default
 appears immediately below the list of 
\series bold
inputs
\series default
, and below it comes an indented list of promised information, 
\emph on
along with how it relates to the inputs
\end_layout

\begin_layout Itemize

\series bold
do
\series default
 appears immediately below the list of 
\series bold
outputs
\series default
, and below it comes an indented list of instructions
\end_layout

\begin_layout Itemize

\series bold
return
\series default
 appears as the last statement in the instructions
\begin_inset Foot
status open

\begin_layout Plain Layout
It is common to see 
\series bold
return
\series default
 placed in other places within the list of instructions, but we will adopt
 the convention that 
\series bold
return
\series default
 is always the last statement.
 While it is sometimes inconvenient to organize the code around this convention,
 it can help with both debugging and readability, which is important for
 those who are first learning.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
We can now describe our 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 procedure in pseudocode as follows:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
\color none
algorithm
\series default
 
\emph on
tangent_line
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a\in\mathbb{R}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $x$
\end_inset

, an indeterminate
\end_layout

\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

, a function in 
\begin_inset Formula $x$
\end_inset

 that is differentiable at 
\begin_inset Formula $x=a$
\end_inset


\end_layout

\begin_layout Standard

\series bold
outputs
\end_layout

\begin_layout Itemize
the line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset


\end_layout

\begin_layout Standard

\series bold
do
\end_layout

\end_deeper
\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $m=f'\left(a\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b=f\left(a\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $m\left(x-a\right)+b$
\end_inset


\end_layout

\begin_layout Standard
The following observations of this code are in order.
\end_layout

\begin_layout Itemize
We make assignments with the traditional mathematical 
\begin_inset Quotes eld
\end_inset

let
\begin_inset Quotes erd
\end_inset

 statement.
\begin_inset Foot
status open

\begin_layout Plain Layout
As you can tell from the samples in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: examples of pseudocode"

\end_inset

, there is quite a bit of variety here.
 Where we have 
\begin_inset Quotes eld
\end_inset

let 
\begin_inset Formula $m=f'\left(a\right)$
\end_inset

,
\begin_inset Quotes erd
\end_inset

 some would write 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $m\coloneqq f'\left(a\right)$
\end_inset


\begin_inset Quotes erd
\end_inset

 and some computer languages have adopted this convention so that assignment
 has the form 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
m := df(a)
\end_layout

\end_inset

 (for example, Pascal, Eiffel, Maple).
 Some will even simply write 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $m=f'\left(a\right)$
\end_inset

.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Not only does it not look much like our Sage code, we omit some Sage-specific
 tasks, such as assigning 
\begin_inset Formula $f'\left(x\right)$
\end_inset

 to a variable.
\begin_inset Foot
status open

\begin_layout Plain Layout
Technically, we don't have to do this in Sage, either, but it makes things
 a lot easier.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Both the inputs and some of the commands are listed in a different order.
\end_layout

\begin_layout Standard
As we go through the text, we will add additional pseudocode keywords, and
 discuss how to accomplish additional tasks.
\end_layout

\begin_layout Standard
In practice, we almost always formulate pseudocode 
\emph on
before
\emph default
 implementing it in code.
 We have reversed this practice here, mostly to get your hands wet from
 the start, but an important aspect of working with a computer is to think
 about 
\emph on
how
\emph default
 you solve the problem 
\emph on
before
\emph default
 actually writing up the solution — and, really, a program is nothing more
 than the writeup of a solution to the problem, 
\begin_inset Quotes eld
\end_inset

How do I do this, that, and the other, given such-and-such and so-and-so?
\begin_inset Quotes erd
\end_inset

 If you've had another programming class before, you may have been raised
 in the rather bad tradition of not thinking about what to do before doing
 it.
 Try to resist that; we'll help in the exercises, by requiring that you
 formulate pseudocode 
\emph on
as well as
\emph default
 writing a program.
\end_layout

\begin_layout Section*
Scripting
\end_layout

\begin_layout Standard
Many mathematicians have a set of tasks that they need to repeat whenever
 they work on something.
 Writing Sage procedures can help simplify this, but if you type them in
 a particular session, they apply only to that session, either on the command
 line or in a worksheet.
 If you quit the session or open a different one, Sage forgets those procedures,
 and you have to re-define them.
 It isn't very convenient to copy and paste or (worse) re-type these procedures
 whenever you start a new session, so it's convenient to keep a library
 of files that record them, and that we can load and use at will.
\end_layout

\begin_layout Standard
This is where Sage scripts come in.
 A 
\begin_inset Quotes eld
\end_inset

script
\begin_inset Quotes erd
\end_inset

 is basically a sequence of Sage statements saved to a file.
 It is convenient to load the file into Sage, thereby avoiding the hassle
 of retyping everything.
 The format of a Sage script is identical to whatever we'd write in a Sage
 cell: it can be a sequence of simple statements, but it can also define
 one or more procedures.
 Indeed, a large amount of Sage consists of Sage scripts that people have
 written on account of some need and, due to the task's usefulness, the
 script subsequently made its way into Sage itself.
\end_layout

\begin_layout Standard
To show how to create a Sage script, we recall our program on computing
 the line tangent to a curve:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
def tangent_line(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# point-slope form of a line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = m*(x - a) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\end_deeper
\begin_layout Standard
\noindent
To create a script, do one of the following.
\end_layout

\begin_layout Itemize
If you run Sage as a worksheet operated by an independent server, you'll
 have to speak to your instructor or to the server's administrator.
 This is not difficult to do, but it is a little complicated, so we leave
 it to them.
\end_layout

\begin_layout Itemize
If you run Sage from the command line, bring up a text editor on your computer,
 type the program above into the editor, then save the file with the name
 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
calc_utils.sage
\end_layout

\end_inset

.
 We recommend saving it to a special directory in your home directory titled,
 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
SageScripts
\end_layout

\end_inset

, but you should pick someplace that will be both easy to remember and easy
 to access.
\end_layout

\begin_layout Itemize
If you run Sage through the CoCalc server, open a project, then select from
 the top menu 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
New
\end_layout

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/screenshots/NewFileForScriptCoCalc.tiff
	lyxscale 50
	height 1in
	BoundingBox 0bp 500bp 825bp 688bp
	clip

\end_inset


\end_layout

\begin_layout Standard
In the textbox beneath the directions to, 
\begin_inset Quotes eld
\end_inset

Name your file, folder, or paste in a link,
\begin_inset Quotes erd
\end_inset

 type the name 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
calc_utils.sage
\end_layout

\end_inset

.
 Then click on 
\begin_inset Quotes eld
\end_inset

File
\begin_inset Quotes erd
\end_inset

 (over to the right) and Sage will bring up a new tab with that name.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/screenshots/EmptyFileForScriptCoCalc.tiff
	lyxscale 50
	height 1in

\end_inset


\end_layout

\begin_layout Standard
Go ahead and type the procedure.
 If you find the text too small, click on the 
\begin_inset Quotes eld
\end_inset

larger
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
A
\end_layout

\end_inset

 beneath 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Settings
\end_layout

\end_inset

 in the screenshot below.
 That will make the text larger.
\begin_inset Foot
status open

\begin_layout Plain Layout
One of the authors routinely clicks this six to eight times, and that's
 not because he's old.
 — Well, not 
\emph on
that
\emph default
 old.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/screenshots/WrittenScriptCoCalc.tiff
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
Save it.
 (It should actually save automatically every few moments, but it never
 hurts to give the button an extra click.)
\end_layout

\end_deeper
\begin_layout Standard
Once you have written and saved your script, you can turn to a Sage session
 (either at the command line or in the worksheet) and, at this point, type
 the following (don't actually type until you read what appears below):
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%attach /path/to/file/calc_utils.sage
\end_layout

\end_deeper
\begin_layout Standard
\noindent

\emph on
Before you actually do this,
\emph default
 we want to describe two potential errors, as well as indicate a convention
 you should be aware of.
\end_layout

\begin_layout Standard
First, the convention.
 We have written 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
/path/to/file/
\end_layout

\end_inset

 as a 
\begin_inset Quotes eld
\end_inset

template
\begin_inset Quotes erd
\end_inset

 for you to fill in.
 It's basically a fill-in-the-blank used commonly as an indication that
 you have to fill in the correct value:
\end_layout

\begin_layout Itemize
If you're using Sage from a worksheet from an independent server, you need
 to ask your instructor or the server's administrator.
\end_layout

\begin_layout Itemize
If you're using Sage from the command line, you should try 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
'~/SageScripts'
\end_layout

\end_inset

, as that corresponds to the directory we suggested earlier.
\begin_inset Foot
status open

\begin_layout Plain Layout
The tilde character (
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
~
\end_layout

\end_inset

) is a standard way to reference a user's home directory.
 We had suggested creating a directory named 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
SageScripts
\end_layout

\end_inset

 in your home directory, so that should do the trick.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you're using the CoCalc server 
\emph on
and
\emph default
 you followed our directions above, 
\emph on
you need not type 
\emph default

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
/path/to/file
\end_layout

\end_inset


\emph on
 at all!
\emph default
 Otherwise, if you created a special directory to keep your Sage scripts,
 you need to type the path to that directory.
\end_layout

\begin_layout Standard
Once we move past this convention, we move to the possible errors.
\end_layout

\begin_layout Standard
If you are in the wrong directory, or you typed the filename wrong, or you
 didn't follow our advice above to wait to type that in, you will likely
 see an error along these lines:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
IOError
\end_layout

\end_inset

!did not find file@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
did not find file \SpecialChar ldots
 to attach
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%attach /path/to/file/calc_util.sage
\end_layout

\begin_layout SageError
IOError: did not find file u'calc_util.sage' to attach
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This indicates that there is something wrong in what you filled in for 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
/path/to/file/
\end_layout

\end_inset

 or in the filename itself.
 In this particular example, both are wrong: we didn't actually change 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
/path/to/file/
\end_layout

\end_inset

 to the correct path, 
\emph on
and
\emph default
 we left the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
s
\end_layout

\end_inset

 off the filename 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
calc_utils.sage
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
\end_layout

\begin_layout Standard
Now for the second error.
 We sometimes type things wrong.
 That's alright; it's part of being human; no need to get worked up about
 it.
 After all, the computer will get worked up on its own.
 It is possible to type something wrong, and when that happens, you will
 get a Syntax error.
 A common one for beginners will likely be this one:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
IndentationError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
unindent does not match any outer indentation level
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%attach /path/to/file/calc_utils.sage
\end_layout

\begin_layout SageError
IndentationError: unindent does not match any outer indentation level
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In this case, pay attention to the line where Sage complained, and make
 sure the indentation lines up with a previous block of code.
 A similar error will be this one:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%attach /path/to/file/calc_utils.sage
\end_layout

\begin_layout SageError
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = f(a)
\end_layout

\begin_layout SageError
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

^
\end_layout

\begin_layout SageError
SyntaxError: invalid syntax
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This should 
\emph on
not
\emph default
 happen to you, but in case it does, and everything looks exactly perfect:
 the problem is that you copied and pasted text.
 Appearances in a text editor can be deceiving, and when you copy from one
 file to another, you can pick up hidden formatting characters, or something
 similar.
 The solution in this case is to eliminate the hidden formatting character
 by deleting those spaces, then retyping them.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
With those clarifications and errors out of the way, now try to load the
 file, remembering to change 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
/path/to/file/
\end_layout

\end_inset

 to the correct path to the file:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
can't assign to function call
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%attach /path/to/file/calc_utils.sage
\end_layout

\begin_layout SageError
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageError
SyntaxError: can't assign to function call
\end_layout

\end_deeper
\begin_layout Plain Layout
\align center

\size huge
\color red
PANIC!
\end_layout

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset

You're going to expect us to tell you that, no, let's not panic, but actually,
 yes, it's okay to panic here.
 Go ahead & panic some more.
 Then we'll get around to fixing this.
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC MORE
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\size huge
\color red
PANIC MORE!
\end_layout

\begin_layout Plain Layout
Once you're calm, let's get to the business of figuring out what happened.
 We actually like this error because it helps emphasize something about
 how Sage is built.
 Remember that Sage is built using a computer language named Python, and
 you actually interact with Sage through Python.
\begin_inset Foot
status open

\begin_layout Plain Layout
This is why Sage scripts end in 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
.py
\end_layout

\end_inset

, the traditional suffix for a Python script.
\end_layout

\end_inset

 Sage provides some 
\begin_inset Quotes eld
\end_inset

value-added
\begin_inset Quotes erd
\end_inset

 on top of Python, and part of that includes what is called 
\emph on
preprocessing:
\emph default
 when it reads your text from the command-line or worksheet, it rewrites
 some of it.
\end_layout

\begin_layout Plain Layout
One place Sage rewrites things that you have never noticed is when you works
 with integers: for instance,
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = 1
\end_layout

\begin_layout SageInput
type(a)
\end_layout

\begin_layout SageOutput
<type 'sage.rings.integer.Integer'>
\end_layout

\end_deeper
\begin_layout Plain Layout
\noindent
Python would not give the same answer.
 We can see this by examining the loop variable used for Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

 command, which is essentially Python's:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
[a for a in range(10)]
\end_layout

\begin_layout SageMoreInput
a
\end_layout

\begin_layout SageOutput
9
\end_layout

\begin_layout SageMoreInput
type(a)
\end_layout

\begin_layout SageOutput
<type 'int'>
\end_layout

\end_deeper
\begin_layout Plain Layout
\noindent

\emph on
These are not the same thing.

\emph default
 Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 type is much more flexible than Python's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

; the downside is that it's also a little slower, though not so much that
 we usually worry about it.
 The point, though, is that if we were running Python from the command line,
 the assignment 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a = 1
\end_layout

\end_inset

 would create a variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 that, when we then request to know 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type(a)
\end_layout

\end_inset

, we'd get 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
<type 'int'>
\end_layout

\end_inset

 just as we did when 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 was 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

's loop variable.
 In our case, Sage read 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a = 1
\end_layout

\end_inset

, figured we wanted an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 rather than an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

, and silently made the change on our behalf.
 If you really want an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

, you can get that in Sage, too:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = int(1)
\end_layout

\begin_layout SageInput
type(a)
\end_layout

\begin_layout SageOutput
<type 'int'>
\end_layout

\end_deeper
\begin_layout Plain Layout
\noindent
However, an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 only understands six methods,
\begin_inset Foot
status open

\begin_layout Plain Layout
These are 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.bit_length()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.conjugate()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.denominator()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.imag()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.numerator()
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.real()
\end_layout

\end_inset

.
 As always, you can discover these by typing 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
a.
\end_layout

\end_inset

 followed by pressing the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Tab
\end_layout

\end_inset

 key.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tab completion
\end_layout

\end_inset


\end_layout

\end_inset

 while an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 understands over one hundred!
\end_layout

\begin_layout Plain Layout
How does this enter into our syntax error? When we typed 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(x) = f
\end_layout

\end_inset

 in the worksheet or command line, Sage silently read that, figured that
 you wanted to create a procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 in the indeterminate 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

, and have it return the expression 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 (second 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 this time), and internally replaced that line with a sequence of two commands:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
from sage.symbolic.callable import CallableSymbolicExpressionRing_class
\end_layout

\begin_layout SageInput
f = CallableSymbolicExpressionRing([x], f)
\end_layout

\end_deeper
\begin_layout Plain Layout
\noindent
On the other hand, 
\emph on
Sage does not preprocess scripts.
\end_layout

\end_inset

With those clarifications out of the way, now try to load the file.
 If all goes well, Sage will remain silent.
 You should then be able to execute your procedure in the usual way:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%attach /path/to/file/calc_utils.sage
\end_layout

\begin_layout SageInput
tangent_line(x**2, 2)
\end_layout

\begin_layout SageOutput
4*x - 4
\end_layout

\end_deeper
\begin_layout Standard
Once you successfully attach 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
calc_utils.sage
\end_layout

\end_inset

 to a Sage session, you can make changes to it and Sage will automatically
 incorporate the changes, leaving a message along these lines:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageOutput
### reloading attached file calc_utils.sage modified at 08:39:00 ###
\end_layout

\end_deeper
\begin_layout Section*
Interactive worksheets
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
interactive worksheets|(
\end_layout

\end_inset

If you're working in a Sage worksheet, you have access to a feature that
 lets you create an easily-manipulated demonstration.
 We call this feature 
\emph on
interactive worksheets
\emph default
.
 An interactive worksheet has one or more 
\emph on
interactive procedures
\emph default
 that allow the user to manipulate their arguments in a 
\begin_inset Quotes eld
\end_inset

hands-on
\begin_inset Quotes erd
\end_inset

 way through interface objects like text boxes, sliders, and so forth.
 Aside from the procedure itself, there are two key steps to creating an
 interactive worksheet:
\end_layout

\begin_layout Itemize
On the line before the procedure, but in the same cell, type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
@interact
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
interact@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

"@
\end_layout

\end_inset

interact
\end_layout

\end_inset

|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

interactive worksheets
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Decide which of the following interface objects you want, and supply the
 procedure with 
\begin_inset Quotes eld
\end_inset

optional
\begin_inset Quotes erd
\end_inset

 arguments whose default values are initialized to these objects:
\end_layout

\begin_deeper
\begin_layout Itemize
an input box (to provide a value)
\end_layout

\begin_layout Itemize
a slider (to select a value from a range)
\end_layout

\begin_layout Itemize
a checkbox (to turn some property on or off)
\end_layout

\begin_layout Itemize
a selector (to select some property out of several)
\end_layout

\begin_layout Itemize
a color selector (to\SpecialChar ldots
 well, hopefully the reason for this is obvious)
\end_layout

\end_deeper
\begin_layout Standard
You will find templates for these object in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: templates for interface objects"

\end_inset

, and some common options for all the elements in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: options common to interface objects"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
input_box()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
a box for the user to type values, usually numbers; specific options include
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
width=
\end_layout

\end_inset


\emph on
box's width
\emph default
 (104)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
slider(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
a line with a knob the user can slide left and right, ranging from 
\begin_inset Formula $a$
\end_inset

 to 
\begin_inset Formula $b$
\end_inset

 with intermediate values
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
slider(
\end_layout

\end_inset


\emph on
a
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset

b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
, default=
\end_layout

\end_inset


\emph on
c
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
similar to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
slider(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, but the user can only slide in increments of 
\emph on
c
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
slider(
\end_layout

\end_inset


\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
similar to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
slider(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, but the user can only select options in the collection 
\emph on
L
\emph default
 (we are still not telling you what a collection is, but you can still use
 a tuple, as before)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range_slider(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
similar to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
slider(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, but the user selects a subinterval 
\begin_inset Formula $\left[c,d\right]$
\end_inset

 of 
\begin_inset Formula $\left[a,b\right]$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "25col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range_slider(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

default=(
\end_layout

\end_inset


\begin_inset Formula $c$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $d$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
))
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
similar to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range_slider(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, but the default subinterval is 
\begin_inset Formula $\left[c,d\right]$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
checkbox()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
a box that the user can click on or off
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
selector()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.15in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
a drop-down menu or button bar specific options include
\end_layout

\begin_layout Itemize

\emph on
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
values=
\end_layout

\end_inset

collection of values to select from
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
buttons=
\end_layout

\end_inset

whether to use buttons (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
nrows=
\end_layout

\end_inset


\emph on
number of rows if using buttons
\emph default
 (1)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ncols=
\end_layout

\end_inset


\emph on
number of columns if using buttons
\emph default
 (depends on number)
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
width=
\end_layout

\end_inset


\emph on
button's width, if buttons
\emph default
 (depends on value)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Color(
\end_layout

\end_inset


\emph on
name
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
a button that pops up a color chooser; default color is the one supplied
 by 
\emph on
name
\emph default
, such as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'red'
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Color(
\end_layout

\end_inset


\emph on
r
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
g
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "60col%"
special "none"
height "1.5in"
height_special "height"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
same as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Color(
\end_layout

\end_inset


\emph on
name
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

, but the default color is the red-green-blue combination given by 
\emph on
r
\emph default
, 
\emph on
g
\emph default
, 
\emph on
b
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: templates for interface objects"

\end_inset

Templates for interface objects in an interactive procedure
\begin_inset Index idx
status open

\begin_layout Plain Layout
interactive worksheets!available interface objects
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
label=
\end_layout

\end_inset


\emph on
string
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a label, placed to the left; it may include 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 between dollar signs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
default=
\end_layout

\end_inset


\emph on
value
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the object's initial value
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: options common to interface objects"

\end_inset

Options common to all interface objects in an interactive procedure 
\emph on
except
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Color()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 
\emph on
This list is not comprehensive,
\emph default
 as we have omitted some options that we think you are less likely to find
 useful.
 Other interface objects may also be available that we aren't aware of (they
 may have been added after we wrote this).
\end_layout

\begin_layout Standard
Sliders and selectors are similar in that they can let you choose from a
 small range of values; for instance, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
slider((0,
\begin_inset space ~
\end_inset

0.25,
\begin_inset space ~
\end_inset

0.5,
\begin_inset space ~
\end_inset

0.75,
\begin_inset space ~
\end_inset

1))
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
selector((0,
\begin_inset space ~
\end_inset

0.25,
\begin_inset space ~
\end_inset

0.5,
\begin_inset space ~
\end_inset

0.75,
\begin_inset space ~
\end_inset

1))
\end_layout

\end_inset

 both let you choose from the same list.
 In this case, however, a slider would be the better choice, as you can
 order the values from left to right, and a slider communicates that sense
 better.
 If the values do not fit well in a left-to-right paradigm, you'd be better
 off with a selector.
 Also, sliders don't label the individual values, so if you think it especially
 important that each value be labeled, it's best to use a selector even
 if the values 
\emph on
do
\emph default
 fit the left-to-right paradigm.
\begin_inset Foot
status open

\begin_layout Plain Layout
Of course someone will find an exception to each of these guidelines; they
 are merely recommendations.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We illustrate this on two examples.
 The first is quite simple, merely to illustrate the principle: it allows
 the user to type a function 
\begin_inset Formula $f$
\end_inset

, and plots both 
\begin_inset Formula $f$
\end_inset

 and its derivative on an interval 
\begin_inset Formula $\left[a,b\right]$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
@interact
\end_layout

\begin_layout SageMoreInput
def plot_f_and_df(f=input_box(default=x**3,label='$f$'),
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a=input_box(default=-5,label='$a$'), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b=input_box(default=5,label='$b$'), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

w=slider(-19,19,1,default=0, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

label='squash factor')):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = plot(f, a, b, color='black')
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df = diff(f)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = p + plot(df, a, b, color='red')
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

show(p, aspect_ratio=(20-w)/20)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you type this into a Sage worksheet correctly, you should see something
 akin to Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: squashed horizontally"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/function graphics/interactive_f_and_df.jpg
	lyxscale 50
	height 3in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: squashed horizontally"

\end_inset

An unfortunate squashing
\end_layout

\end_inset


\end_layout

\end_inset

 You can see that the input boxes have nicely-formatted labels.
 (As you may have guessed from our use of dollar signs, it's relying on
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

.) Unfortunately, that's not an especially clear plot; it's a bit too squashed
 horizontally.
 We can fix this by moving the squash factor right; if you slide the knob
 on the 
\begin_inset Quotes eld
\end_inset

squash factor
\begin_inset Quotes erd
\end_inset

 slider all the way to the right, you get a rather nice picture the moment
 you let go:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/function graphics/interactive_f_and_df_unsquashed.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
You can also change 
\begin_inset Formula $f$
\end_inset

, 
\begin_inset Formula $a$
\end_inset

, and 
\begin_inset Formula $b$
\end_inset

, but they're input boxes, so rather than sliding anything, you have to
 change the text.
 As 
\begin_inset Formula $a<b$
\end_inset

 you should get a reasonable-looking graph the moment something changes.
 Try another function, such as 
\begin_inset Formula $\sin x$
\end_inset

, with 
\begin_inset Formula $a=0$
\end_inset

 and 
\begin_inset Formula $b=2\pi$
\end_inset

, and the graph should change to this (make sure you also change the squash
 factor back to 0):
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/function graphics/interactive_f_and_df_sinx.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
You can of course call procedures you've defined from inside an interactive
 procedure.
 Let's write an interactive procedure that plots 
\begin_inset Formula $f$
\end_inset

 and its derivative on 
\begin_inset Formula $\left[a,b\right]$
\end_inset

, 
\emph on
as well as
\emph default
 a line tangent to 
\begin_inset Formula $f$
\end_inset

at a point 
\begin_inset Formula $c$
\end_inset

 somewhere between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

.
 We can call the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 procedure we already wrote to generate the tangent line.
 While we're at it, we'll switch the defaults to 
\begin_inset Formula $\sin\left(x\right)$
\end_inset

 over 
\begin_inset Formula $\left[0,2\pi\right]$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
@interact
\end_layout

\begin_layout SageMoreInput
def plot_f_and_df(f=input_box(default=sin(x),label='$f$'), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

subint=range_slider(-10,10,default=(0,2*pi), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

label='$(a,b)$'), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t=slider(0,1,default=0.375,label='$t$'), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

w=slider(-19,19,1,default=0,label='squash factor')):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(a,b) = subint
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = plot(f, a, b, color='black')
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df = diff(f)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = p + plot(df, a, b, color='red')
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# c tells us how far to move along the interval [a,b]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# 0 means a; 1 means b; values in between proportional
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = a + t*(b-a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = p + plot(tangent_line(f, c), a, b)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

show(p, aspect_ratio=(20-w)/20)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
When you try this in Sage, you should see the following:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/function graphics/interactive_f_and_df_sinx_parametric_c.jpg
	lyxscale 50
	height 3in

\end_inset


\end_layout

\begin_layout Standard
You may have noticed that we didn't have the user specify the point 
\begin_inset Formula $c$
\end_inset

 directly.
 Instead, she specifies 
\begin_inset Formula $c$
\end_inset

 
\emph on
indirectly,
\emph default
 by choosing a value 
\begin_inset Formula $t$
\end_inset

 from
\begin_inset space ~
\end_inset

0 to
\begin_inset space ~
\end_inset

1.
 The code then calculates a value of 
\begin_inset Formula $c$
\end_inset

 between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 using the following parametrization:
\begin_inset Formula 
\[
c=a+t\left(b-a\right).
\]

\end_inset

This parametrization is an enormously useful tool, in part because it is
 relatively easy:
\end_layout

\begin_layout Itemize
when 
\begin_inset Formula $t=0$
\end_inset

, then 
\begin_inset Formula $c=a+0=a$
\end_inset

;
\end_layout

\begin_layout Itemize
when 
\begin_inset Formula $t=1$
\end_inset

, then 
\begin_inset Formula $c=a+\left(b-a\right)=b$
\end_inset

;
\end_layout

\begin_layout Itemize
when 
\begin_inset Formula $t=.5$
\end_inset

, then 
\begin_inset Formula $c=a+.5\left(b-a\right)=.5a+.5b=\nicefrac{a+b}{2}$
\end_inset

, halfway between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

;
\end_layout

\begin_layout Itemize
and so forth.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/function graphics/interactive_f_and_df_sinx_parametric_c=0.pdf
	lyxscale 50
	height 2in

\end_inset


\begin_inset Graphics
	filename graphics/function graphics/interactive_f_and_df_sinx_parametric_c=0_5.pdf
	lyxscale 50
	height 2in

\end_inset


\begin_inset Graphics
	filename graphics/function graphics/interactive_f_and_df_sinx_parametric_c=1.pdf
	lyxscale 50
	height 2in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Experiment with the slider to see how various values of 
\begin_inset Formula $t$
\end_inset

 naturally let the user select a good point between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\begin_layout Standard
We haven't shown how all the interface objects work, but we have shown the
 ones we think are most important, as well as an elegant way to have the
 user select a point in an interval without having to check whether the
 point actually lies in the interval.
 We encourage you to experiment with the other objects, especially selecting
 a color.
\begin_inset Index idx
status open

\begin_layout Plain Layout
interactive worksheets|)
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Procedures allow us to reuse common groups of commands.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 If an argument holds the value of some variable outside the procedure,
 changing the argument's value also changes that variable's value.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 Sage allows you to specify optional arguments.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 If a Sage procedure does not explicitly 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 a value, then it returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 When we pass indeterminates as arguments to Sage procedures, we must redefine
 any mathematical functions that depend on them.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 User-defined procedures cannot use Sage procedures.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 No one uses pseudocode in real life.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 Pseudocode communicates ideas using 
\begin_inset Quotes eld
\end_inset

plain English
\begin_inset Quotes erd
\end_inset

 and mathematical symbols, rather than a particular language's symbols and
 formats.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 The best way to reuse a group of Sage procedures in different sessions
 is to copy-and-paste the code.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%attach
\end_layout

\end_inset

 command allows Sage to read and execute a script, as well as automatically
 reload it when you change it.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
11.
 You can use interactive procedures from command-line Sage.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
12.
 If the user has to select from 100 equally-spaced values on a number line,
 it's best to use a slider.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
13.
 If the user has to select a function from the set 
\begin_inset Formula $\left\{ \sin x,\cos x,\ln x,e^{x}\right\} $
\end_inset

, it's best to use a selector.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
14.
 To find the number one-fourth of the distance from 
\begin_inset Formula $2$
\end_inset

 to 
\begin_inset Formula $10$
\end_inset

, substitute 
\begin_inset Formula $t=0.25$
\end_inset

 into the expression 
\begin_inset Formula $2+8t$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
15.
 A disadvantage to interactive procedures is that you can't break up their
 tasks into tasks performed by other procedures.
\end_layout

\begin_layout Subsection*
Multiple Choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 We start the definition of a procedure in Sage using:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\series bold
algorithm
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 its type
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 its name
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 The format for an optional argument is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 not to list it
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 to preface its identifier with the keyword 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
optional
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 to preface the procedure name with the keyword 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 to place 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=
\end_layout

\end_inset

 after its identifier, followed by a default value
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 Which of the following is not an accurate description of an argument?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a stand-in for a variable outside the procedure, whose value the procedure
 can change
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a copy of some data outside the procedure
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a variable whose value you may not know in advance
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 information the procedure may or may not need to perform its tasks
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
4.
 The best way to report a procedure's result back to the client is to
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 list the result in a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 statement
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 assign the value to one of the arguments
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 assign it to a global variable called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 assign a value to the procedure's name
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
5.
 A procedure that lacks a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 statement:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 raises an error
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 returns the empty set
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 does nothing special
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
6.
 When a list of commands is subject to a keyword that starts a control structure
, such as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset

, you should:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 indent the commands in question
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 add a colon at the end of the control structure's statement
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 reverse the indentation when the list is finished
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 all of the above
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
7.
 Which of the following properties does our pseudocode standard share with
 Sage code?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Statements subject to control structures are indented.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 We can use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset

 in both pseudocode and Sage code.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 We specify the inputs' types in Sage, just as we specify which set an input
 comes from in pseudocode.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 all of the above
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
8.
 The best way in Sage to substitute for an indeterminate that was passed
 as an argument is by:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 function-call substitution
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 dictionary substitution
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 keyword assignment
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 function-call substitution 
\emph on
after
\emph default
 redefining the function
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
9.
 Which of the following identifiers can we 
\emph on
not
\emph default
 assign values to?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a valid identifier
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a keyword
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a constant
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 the name of a procedure that is already defined
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 When the user changes a setting in an interactive procedure, the only guarantee
d effect is to change what part of the procedure?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a global variable
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a local variable
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 an argument of the procedure
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 the procedure's name
\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Explain modularity and why it is a good practice when writing programs.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Are modularity and modular arithmetic the same thing?
\end_layout

\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Sage does not automatically add arrowheads to a curve.
 Since the derivative tells us the slope of the curve at a given point,
 we can determine what directions arrows at the end should point by computing
 derivatives at the endpoints and putting arrows there.
 Write a procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrowplot()
\end_layout

\end_inset

 that takes as argument a function 
\begin_inset Formula $f$
\end_inset

, two endpoints 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

, and an 
\begin_inset Quotes eld
\end_inset

arrow length
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\Delta x$
\end_inset

, then plots 
\begin_inset Formula $f$
\end_inset

 on 
\begin_inset Formula $\left[a,b\right]$
\end_inset

, adding arrowheads using the principle that 
\begin_inset Formula $\left(a,f\left(a\right)\right)$
\end_inset

 and 
\begin_inset Formula $\left(a-\Delta x,f\left(a\right)-f'\left(a\right)\Delta x\right)$
\end_inset

 would give us two points on a line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $a$
\end_inset

 (and which would specify a suitable arrow).
 (We leave it to you to modify this definition for an arrowhead at 
\begin_inset Formula $b$
\end_inset

.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 
\begin_inset CommandInset label
LatexCommand label
name "exc: normal line function"

\end_inset

Write pseudocode for a procedure that computes and returns the normal line
 to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=c$
\end_inset

.
 Then:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Implement this in Sage code.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Pick any transcendental function 
\begin_inset Formula $f$
\end_inset

, and any point 
\begin_inset Formula $c$
\end_inset

 where 
\begin_inset Formula $f$
\end_inset

 is transcendental.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Use this code and the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tangent_line()
\end_layout

\end_inset

 procedure to plot both the normal and tangent lines to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=c$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Write an interactive procedure to sketch the graph of a function, a
 tangent line at a point 
\begin_inset Formula $x=c$
\end_inset

, and the normal line at 
\begin_inset Formula $x=c$
\end_inset

.
 Aside from any obvious interface elements needed, include at least a slider
 to control the aspect ratio of the resulting graph.
\end_layout

\begin_layout Standard
Your implementation will sometimes fail; for instance, if you use 
\begin_inset Formula $f=\left(x-1\right)^{2}+2$
\end_inset

 and 
\begin_inset Formula $c=1$
\end_inset

, you should encounter a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\align center

\size huge
\color red
DON'T PANIC!
\end_layout

\begin_layout Standard
You should actually 
\emph on
expect
\emph default
 this error, since computing a perpendicular requires a reciprocal, which
 means division, which opens the possibility of division by zero.
 We address this issue in Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap: decision making"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on Decision-Making.
 Make sure your code works with functions and points that don't misbehave.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 Write pseudocode for a procedure named 
\emph on
avg_value
\emph default
 whose inputs are a function 
\begin_inset Formula $f$
\end_inset

, and indeterminate 
\begin_inset Formula $x$
\end_inset

, and the endpoints 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 of an interval 
\begin_inset Formula $I$
\end_inset

.
 The procedure returns the average value of 
\begin_inset Formula $f$
\end_inset

 on the interval.
 (You may need to review some calculus to solve this problem.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Let's define the operation 
\begin_inset Formula $a*b=ab+\left(a+2b+1\right)$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Write pseudocode for a procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
star()
\end_layout

\end_inset

that accepts two integers 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 and returns 
\begin_inset Formula $a*b$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Implement this pseudocode as a Sage procedure.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Test your procedure on several different values of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Is there a value of 
\begin_inset Formula $a$
\end_inset

 such that 
\begin_inset Formula $a*b=b$
\end_inset

, regardless of the value of 
\begin_inset Formula $b$
\end_inset

?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
5.
 Write a Sage procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
dotted_line_segment()
\end_layout

\end_inset

 that accepts seven arguments named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x1
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y1
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x2
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y2
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pointsize
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pointcolor
\end_layout

\end_inset

.
 The colors' default values should be 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'black'
\end_layout

\end_inset

, and the default color of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pointsize
\end_layout

\end_inset

 should be 60.
 The procedure returns the sum of:
\end_layout

\begin_deeper
\begin_layout Itemize
a line segment that connects those points and whose color is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

, and
\end_layout

\begin_layout Itemize
two points, both of color 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pointcolor
\end_layout

\end_inset

 and of size 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pointsize
\end_layout

\end_inset

, whose locations are 
\begin_inset Formula $\left(x_{1},y_{1}\right)$
\end_inset

 and 
\begin_inset Formula $\left(x_{2},y_{2}\right)$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(a) Use this procedure to plot a line segment connecting the points 
\begin_inset Formula $\left(0,0\right)$
\end_inset

 and 
\begin_inset Formula $\left(1,4\right)$
\end_inset

 whose color and point color are both black.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Use this procedure to plot a black line segment connecting the red points
 
\begin_inset Formula $\left(0,6\right)$
\end_inset

 and 
\begin_inset Formula $\left(2,0\right)$
\end_inset

.
\end_layout

\begin_layout Standard
You need not write pseudocode for this procedure.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 
\begin_inset CommandInset label
LatexCommand label
name "exc: taylor truncated 4"

\end_inset

Implement the following pseudocode in Sage.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Convert to lab
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Taylor_Truncated4
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a\in\mathbb{R}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $x$
\end_inset

, an indeterminate
\end_layout

\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

, a function in 
\begin_inset Formula $x$
\end_inset

 that is integrable at 
\begin_inset Formula $x=a$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
the truncated Taylor series for 
\begin_inset Formula $f\left(x\right)$
\end_inset

 around 
\begin_inset Formula $x=a$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
result
\emph default
 = 
\begin_inset Formula $f\left(a\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $f'\left(a\right)\cdot\left(x-a\right)$
\end_inset

 to 
\emph on
result
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Here's a hint on this one.
 To 
\begin_inset Quotes eld
\end_inset

add \SpecialChar ldots
 to result
\begin_inset Quotes erd
\end_inset

 use the construction 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result = result +
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $f''\left(a\right)\cdot\left(x-a\right)^{2}/2$
\end_inset

 to 
\emph on
result
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $f'''\left(a\right)\cdot\left(x-a\right)^{3}/6$
\end_inset

 to 
\emph on
result
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $f^{\left(4\right)}\left(a\right)\cdot\left(x-a\right)^{4}/24$
\end_inset

 to 
\emph on
result
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\emph on
result
\end_layout

\begin_layout Standard
Check it by finding the truncated Taylor series for 
\begin_inset Formula $e^{x}$
\end_inset

 at 
\begin_inset Formula $x=1$
\end_inset

, and comparing the truncated series' value at 
\begin_inset Formula $x=1.1$
\end_inset

 with the value of 
\begin_inset Formula $e^{1.1}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
7.
 Explain how the 
\begin_inset Quotes eld
\end_inset

squash factor
\begin_inset Quotes erd
\end_inset

 we used in our interactive procedures was used to set the aspect ratio
 of the plot.
 Your explanation should address why the leftmost value squashes the graph
 as far left as possible, why the rightmost value stretches the graph as
 far right as possible, and why the middle value sits somewhere in between.
\end_layout

\begin_layout Chapter
Repeating yourself definitely with collections
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: definite loops"

\end_inset

There are a number of cases where you want to repeat a task several times.
 A classic example comes from differential equations; suppose we know
\begin_inset Formula 
\[
\nicefrac{dy}{dx}=\sin y+2\cos x,
\]

\end_inset

that is, at any point 
\begin_inset Formula $\left(x,y\right)$
\end_inset

, the value of 
\begin_inset Formula $y$
\end_inset

 is changing by 
\begin_inset Formula $\sin y+2\cos x$
\end_inset

.
 It is difficult, and often impossible, to find the exact formula for 
\begin_inset Formula $y$
\end_inset

 in terms of 
\begin_inset Formula $y$
\end_inset

, so it is necessary to approximate 
\begin_inset Quotes eld
\end_inset

future
\begin_inset Quotes erd
\end_inset

 values of 
\begin_inset Formula $y$
\end_inset

 from a starting point 
\begin_inset Formula $\left(x,y\right)$
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
For instance, this is how weather prediction works.
\end_layout

\end_inset

 In this case you usually decide to make a number of very small 
\begin_inset Quotes eld
\end_inset

steps forward
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Formula $x$
\end_inset

, and re-evaluate 
\begin_inset Formula $y$
\end_inset

 at each point, tracing out the resulting behavior.
 In this case, suppose we start at 
\begin_inset Formula $\left(0,0\right)$
\end_inset

; then 
\begin_inset Formula $y'\left(0,0\right)=2$
\end_inset

, which suggests the function wants to move forward along a line with slope
\begin_inset space ~
\end_inset

2.
 After all, you're computing the derivative, which is the slope of the tangent
 line, which goes in the same direction as the curve at that point.
 This technique of moving along the tangent line is known as 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
Euler's Method
\end_layout

\end_inset

Euler's Method
\series default
.
\end_layout

\begin_layout Standard
However, the curve wants to go in the same direction as its tangent line
 only for a moment; as soon as we step off the point 
\begin_inset Formula $\left(0,0\right)$
\end_inset

, the derivative changes ever-so-slightly, and the tangent line is no longer
 valid.
 To avoid making too much error, we take a tiny step, say 
\begin_inset Formula $\Delta x=\nicefrac{1}{10}$
\end_inset

, along this line, which takes us to the point 
\begin_inset Formula $\left(.1,.2\right)$
\end_inset

.
 Here, 
\begin_inset Formula $y'\left(.1,.2\right)\approx2.1$
\end_inset

, so we step out along a line of slope
\begin_inset space ~
\end_inset

2.1, which takes us to the point 
\begin_inset Formula $\left(.2,.41\right)$
\end_inset

.
 Here, 
\begin_inset Formula $y'\left(.2,.41\right)\approx2.0$
\end_inset

, which takes us to 
\begin_inset Formula $\left(.3,.61\right)$
\end_inset

.
 Here, 
\begin_inset Formula $y'\left(.3,.61\right)\approx1.9$
\end_inset

, which takes us to 
\begin_inset Formula $\left(.4,.8\right)$
\end_inset

.
 Here, 
\begin_inset Formula $y'\left(.4,.8\right)\approx1.8$
\end_inset

, which takes us to 
\begin_inset Formula $\left(.5,.98\right)$
\end_inset

.
 Here, 
\begin_inset Formula $y'\left(.5,.98\right)\approx1.6$
\end_inset

, which takes us to 
\begin_inset Formula $\left(.6,1.14\right)$
\end_inset

.
 Go far enough, and you'll trace out a picture something like this:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/definite_loops_graphics/approximation_to_siny+2cosx.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
To generate this curve, we used a step size of 
\begin_inset Formula $\Delta x=\nicefrac{1}{10}$
\end_inset

.
 Repeat the process from 
\begin_inset Formula $\left(0,0\right)$
\end_inset

 with a smaller step size, say 
\begin_inset Formula $\Delta x=\nicefrac{1}{100}$
\end_inset

, and you'll get a slightly different result:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/definite_loops_graphics/approximation_to_siny+2cosx_comparison.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
This reflects the fact that our approximation incorporates some error.
 Still, it's not 
\emph on
that
\emph default
 bad; the approximations are pretty close.
 Then again, we obtained the blue curve using
\begin_inset space ~
\end_inset

80 points, and the red curve using
\begin_inset space ~
\end_inset

800 points.
 You don't want to do that by hand, do you?
\end_layout

\begin_layout Standard
When a task (or set of tasks) has to be repeated more than once on the result
 of the previous application, we call this repetition 
\series bold
iteration
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
iteration
\end_layout

\end_inset

.
 Iteration pops up repeatedly in computational mathematics, so programming
 languages typically offer a control structure called a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
loop
\end_layout

\end_inset

loop
\series default
.
 Unlike Euler's method, we don't always know in advance how many times the
 loop must repeat, so many loops are 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
indefinite loop
\end_layout

\end_inset


\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
loop!indefinite
\end_layout

\end_inset


\series bold
indefinite
\series default
.
 Nevertheless, it is very often the case that we can determine the exact
 number of times a task must repeat from the outset; we call this a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
definite loop
\end_layout

\end_inset


\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
loop!definite
\end_layout

\end_inset


\series bold
definite loop
\series default
.
 This chapter introduces definite loops; we postpone indefinite loops for
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: indefinite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Section*
How to make a computer repeat a fixed number of times?
\end_layout

\begin_layout Subsection*
Pseudocode
\end_layout

\begin_layout Standard
We can describe Euler's Method in pseudocode as follows.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Eulers_method
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $d\!f$
\end_inset

, the derivative of a function
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(x_{0},y_{0}\right)$
\end_inset

, initial values of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta x$
\end_inset

, step size
\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

, number of steps to take
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
approximation to 
\begin_inset Formula $\left(x_{0}+n\Delta x,f\left(x_{0}+n\Delta x\right)\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $a=x_{0}$
\end_inset

, 
\begin_inset Formula $b=y_{0}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
repeat
\series default
 
\begin_inset Formula $n$
\end_inset

 times
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $\Delta x\cdot d\!f\left(a,b\right)$
\end_inset

 to 
\begin_inset Formula $b$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $\Delta x$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $\left(a,b\right)$
\end_inset


\end_layout

\begin_layout Standard
\noindent
We use 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
loop!pseudocode
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
repeat
\end_layout

\end_inset

repeat
\series default
 in pseudocode to indicate that a set of tasks are to be repeated a certain
 number of times, and indent the tasks to repeat.
\end_layout

\begin_layout Subsection*
Sage code
\end_layout

\begin_layout Standard
As with most computer languages, Sage has no keyword named
\family typewriter
 
\family default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
repeat
\end_layout

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
Our use of 
\series bold
repeat
\series default
 is meant to illustrate how pseudocode aims for clarity of communication,
 rather than mimicry of a particular language, and it is not unheard-of
 to see 
\series bold
repeat
\series default
 used in pseudocode.
 That said, some programming languages do feature a 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
repeat
\end_layout

\end_inset

 structure for loops.
\end_layout

\end_inset

 For definite loops, Sage uses a more general-purpose keyword, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

.
 When you know you are to repeat a task 
\begin_inset Formula $n$
\end_inset

 times, the construction is fairly simple:
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset


\emph on
variable
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset

in range(n):
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
For 
\emph on
variable
\emph default
 you choose an identifier that will hold the number of the loop each time
 you pass through it.
\end_layout

\begin_layout Standard
We can now implement Euler's Method in Sage:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def eulers_method(df, x0, y0, Delta_x, n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# starting point
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a, b = x0, y0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute tangent lines & step forward
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = Delta_x * df(a, b) + b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = Delta_x + a
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return a, b
\end_layout

\end_deeper
\begin_layout Standard
This looks pretty straightforward.
 Let's try it out:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
df(x,y) = sin(y) + 2*cos(x)
\end_layout

\begin_layout SageInput
eulers_method(df, 0, 0, 1/10, 80)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you do try this, you'll notice it takes an 
\emph on
awfully long time
\emph default
 to sort itself out, certainly more than a few seconds.
 To see why this happens, interrupt the calculation (press the 
\begin_inset Quotes eld
\end_inset

Stop
\begin_inset Quotes erd
\end_inset

 button in the cloud, click the 
\begin_inset Quotes eld
\end_inset

Action
\begin_inset Quotes erd
\end_inset

 menu and click 
\begin_inset Quotes eld
\end_inset

Interrupt
\begin_inset Quotes erd
\end_inset

 on an independent server, or hold 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Ctrl
\end_layout

\end_inset

and press 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 at the command line) and run the code again with a smaller value of 
\begin_inset Formula $n$
\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
eulers_method(df, 0, 0, 1/10, 10)
\end_layout

\begin_layout SageOutput
(1, 1/5*cos(9/10) + 1/5*cos(4/5) + 1/5*cos(7/10) + 1/5*cos(3/5) + 1/5*cos(1/2)
 \SpecialChar ldots

\end_layout

\end_deeper
\begin_layout Standard
\noindent
(The ellipses at the end indicate there's a lot more after that.
 
\emph on
Quite
\emph default
 a lot more!)
\end_layout

\begin_layout Standard
Do you see what's going on? Sage is computing exact values; and the exact
 value of this number grows more and more complicated with each iteration.
 You can modify the code to simplify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 after each computation, but it doesn't really help.
 This simply illustrates a drawback of symbolic computation: to gain 
\begin_inset Quotes eld
\end_inset

exact
\begin_inset Quotes erd
\end_inset

 values, you sacrifice time.
 But there's no need to sacrifice that here! After all, we're approximating
 the value anyway.
 In that case, let's turn to floating-point values, and see if that speeds
 things up.
 Let's replace 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
1/10
\end_layout

\end_inset

 by 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.1
\end_layout

\end_inset

, and let's see how it turns out.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
eulers_method(df, 0, 0, .1, 80)
\end_layout

\begin_layout SageOutput
(7.99999999999999, 4.340418570291038)
\begin_inset CommandInset label
LatexCommand label
name "sage: result from eulers method"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
This comes to 
\begin_inset Formula $\left(8,4.34\right)$
\end_inset

.
 Not only did we obtain an answer quickly, it was nearly instantaneous!
 It's clearly a better idea to rely on floating-point when you know you're
 approximating anyway.
\end_layout

\begin_layout Subsection*
What just happened?
\end_layout

\begin_layout Standard
What takes place when we execute a loop? Let's examine what happens, looking
 closely at the values of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 each time we pass through the loop.
\end_layout

\begin_layout Standard
When we ran the program, both 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 take on the value
\begin_inset space ~
\end_inset

0, because that's what we passed as the arguments for the initial value.
 We next come to the line
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for i in range(n):
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Recall that this instructs Sage to repeat the subsequent tasks 
\begin_inset Formula $n$
\end_inset

 times.
 The value of the loop is stored in the variable 
\begin_inset Formula $i$
\end_inset

, in case you need it; we don't need 
\begin_inset Formula $i$
\end_inset

 for this problem, but a later example will illustrate how this can be useful.
\end_layout

\begin_layout Standard
Now, 
\begin_inset Formula $n$
\end_inset

 is an argument, and in this case we assigned it the value
\begin_inset space ~
\end_inset

80.
 So the indented tasks will repeat
\begin_inset space ~
\end_inset

80 times.
 We now illustrate what occurs the first few times:
\end_layout

\begin_layout Labeling
\labelwidthstring When i=9:
When
\begin_inset space ~
\end_inset


\begin_inset Formula $i=0$
\end_inset

: The first line tells Sage to compute 
\begin_inset Formula $\Delta xd\!f\left(a,b\right)$
\end_inset

 and add it to 
\begin_inset Formula $b$
\end_inset

, then assign the result to 
\begin_inset Formula $b$
\end_inset

.
 After this, 
\begin_inset Formula $b=.1f\left(0,0\right)+0=.2$
\end_inset

.
\begin_inset Newline newline
\end_inset

The second line tells Sage to add 
\begin_inset Formula $\Delta x$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset

, then assign the result to 
\begin_inset Formula $a$
\end_inset

.
 After this, 
\begin_inset Formula $a=.1+0=.1$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring When i=9:
When
\begin_inset space ~
\end_inset


\begin_inset Formula $i=1$
\end_inset

: The first line tells Sage to compute 
\begin_inset Formula $\Delta xd\!f\left(a,b\right)$
\end_inset

 and add it to 
\begin_inset Formula $b$
\end_inset

, then assign the result to 
\begin_inset Formula $b$
\end_inset

.
 After this, 
\begin_inset Formula $b=.1f\left(.1,.2\right)+.2\approx.42$
\end_inset

.
\begin_inset Newline newline
\end_inset

The second line tells Sage to add 
\begin_inset Formula $\Delta x$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset

, then assign the result to 
\begin_inset Formula $a$
\end_inset

.
 After this, 
\begin_inset Formula $a=.1+.1=.2$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring When i=9:
When
\begin_inset space ~
\end_inset


\begin_inset Formula $i=2$
\end_inset

: The first line tells Sage to compute 
\begin_inset Formula $\Delta xd\!f\left(a,b\right)$
\end_inset

 and add it to 
\begin_inset Formula $b$
\end_inset

, then assign the result to 
\begin_inset Formula $b$
\end_inset

.
 After this, 
\begin_inset Formula $b=.1f\left(.2,.42\right)+.42\approx.66$
\end_inset

.
\begin_inset Newline newline
\end_inset

The second line tells Sage to add 
\begin_inset Formula $\Delta x$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset

, then assign the result to 
\begin_inset Formula $a$
\end_inset

.
 After this, 
\begin_inset Formula $a=.1+.2=.3$
\end_inset

.
\end_layout

\begin_layout Standard
\SpecialChar ldots
and so forth.
 Repeat this 80 times, and you end up with the value that Sage reported.
\end_layout

\begin_layout Section*
How does this work? 
\emph on
or,
\emph default
 an introduction to collections
\end_layout

\begin_layout Standard
We discuss in more detail how this process works.
 Definite loops work by passing over a collection; in general, you can use
 the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 keyword in the form
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\emph on
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset

 collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
and Sage will perform the following, indented tasks as many times as there
 are objects in 
\emph on
collection
\emph default
.
 On the first pass through the loop, 
\emph on
variable
\emph default
 takes on the value of the 
\begin_inset Quotes eld
\end_inset

first
\begin_inset Quotes erd
\end_inset

 element of 
\emph on
collection
\emph default
; on each subsequent pass, 
\emph on
variable
\emph default
 takes on the value of the element in 
\emph on
collection
\emph default
 that 
\begin_inset Quotes eld
\end_inset

follows
\begin_inset Quotes erd
\end_inset

 the current value of 
\emph on
variable
\emph default
.
\end_layout

\begin_layout Standard
We put 
\begin_inset Quotes eld
\end_inset

first
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

follows
\begin_inset Quotes erd
\end_inset

 in quotes because in some collections, what Sage considers the 
\begin_inset Quotes eld
\end_inset

first
\begin_inset Quotes erd
\end_inset

 element may not be what you expect, and the value it considers to 
\begin_inset Quotes eld
\end_inset

follow
\begin_inset Quotes erd
\end_inset

 the current value may not be what you consider to follow it.
 This is not such a problem as you may think, since it happens only in collectio
ns where you should not be expecting a 
\begin_inset Quotes eld
\end_inset

first,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

second,
\begin_inset Quotes erd
\end_inset

 etc.
 We'll talk about that in a second.
\end_layout

\begin_layout Subsection*
But what is a collection?
\end_layout

\begin_layout Standard
As you'd expect from its name, a 
\series bold
collection
\begin_inset Index idx
status open

\begin_layout Plain Layout
collection
\end_layout

\end_inset


\series default
 is an object that 
\begin_inset Quotes eld
\end_inset

contains
\begin_inset Quotes erd
\end_inset

 other objects.
 We can classify collections in two ways.
\end_layout

\begin_layout Itemize
The first classification is whether a collection is indexed
\begin_inset Index idx
status open

\begin_layout Plain Layout
collection!indexing
\end_layout

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Indexed
\series default
 collections order their elements that allow you to access any element according
 to its location.
\end_layout

\begin_layout Itemize

\series bold
Unindexed
\series default
 collections do not order their elements, so you can access
\emph on
 any
\emph default
 element, but not by its location.
\end_layout

\end_deeper
\begin_layout Itemize
The second classification is whether a collection is 
\begin_inset Index idx
status open

\begin_layout Plain Layout
collection!mutable
\end_layout

\end_inset

mutable.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Mutable
\series default
 collections allow you to change their values.
\end_layout

\begin_layout Itemize

\series bold
Immutable
\series default
 collections do not allow you to change their values.
\end_layout

\end_deeper
\begin_layout Standard
We use five kinds of collections.
\end_layout

\begin_layout Standard
A 
\series bold
tuple
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple
\end_layout

\end_inset


\series default
 is an indexed, immutable collection; we refer to a tuple of 
\begin_inset Formula $n$
\end_inset

 elements as an 
\begin_inset Formula $n$
\end_inset

-tuple.
 You create a tuple using parentheses or the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tuple()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tuple()
\end_layout

\end_inset

 command, inserting another collection between its parentheses; for instance,
 the following two commands do the same thing:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_tuple = (3, pi, -I)
\end_layout

\begin_layout SageInput
b_tuple = tuple([3, pi, -I])
\end_layout

\begin_layout SageInput
a_tuple == b_tuple
\end_layout

\begin_layout SageOutput
True
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can also create an 
\begin_inset Quotes eld
\end_inset

empty tuple
\begin_inset Quotes erd
\end_inset

 by placing nothing between the parentheses, either 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
()
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tuple()
\end_layout

\end_inset

.
 As immutable collections, tuples are useful for communicating data that
 should not be changed; i.e., constants.
 You have already seen and used tuples; we used them extensively to provide
 points to the plotting commands.
\end_layout

\begin_layout Standard
A 
\series bold
list
\begin_inset Index idx
status open

\begin_layout Plain Layout
list
\end_layout

\end_inset


\series default
 is an indexed, mutable collection.
 You create a list using brackets or the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
list()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
list()
\end_layout

\end_inset


\end_layout

\end_inset

 command, inserting another collection between the brackets or parentheses;
 for instance,
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_list = [3, pi, -I]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can also create an 
\begin_inset Quotes eld
\end_inset

empty list
\begin_inset Quotes erd
\end_inset

 by placing nothing between the parentheses or brackets, either 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
list()
\end_layout

\end_inset

.
 As mutable collections, it is easy to modify both a list and its elements.
 If you need to store values that might change, you need a list, not a tuple,
 as you cannot modify a tuple.
\end_layout

\begin_layout Standard
A 
\series bold
set
\begin_inset Index idx
status open

\begin_layout Plain Layout
set
\end_layout

\end_inset


\series default
 is an unindexed, mutable collection.
 You create a set using braces or the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
set()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
set()
\end_layout

\end_inset


\end_layout

\end_inset

 command; for instance,
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_set = {3, pi, -I}
\end_layout

\begin_layout SageInput
a_set
\end_layout

\begin_layout SageOutput
{-I, 3, pi}
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notice how the elements' 
\begin_inset Quotes eld
\end_inset

order
\begin_inset Quotes erd
\end_inset

 changed.
 You can also create an 
\begin_inset Quotes eld
\end_inset

empty set
\begin_inset Quotes erd
\end_inset

 by placing nothing between the parentheses, like so: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
set()
\end_layout

\end_inset

.
 As they are mutable, you can modify a set.
 An important property of a set is that it stores only one copy of any element;
 trying to add additional copies leaves us with only one nevertheless.
 For example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
another_set = {2, 2, 2, 2, 2, 2}
\end_layout

\begin_layout SageInput
another_set
\end_layout

\begin_layout SageOutput
{2}
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We do not use sets often in this text; while they have important uses, they
 can be tricky to use, as they accept only immutable objects,
\begin_inset Index idx
status open

\begin_layout Plain Layout
set!elements must be immutable
\end_layout

\end_inset

 and many Sage objects are mutable.
 For instance, you can store tuples in a set, but not lists.
 For that matter, sets themselves are mutable, so you cannot store one set
 inside another.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!unhashable type@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
unhashable type: \SpecialChar ldots

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
{ a_tuple }
\end_layout

\begin_layout SageOutput
{(3, pi, -I)}
\end_layout

\begin_layout SageInput
{ a_set }
\end_layout

\begin_layout SageError
TypeError: unhashable type: 'set'
\end_layout

\end_deeper
\begin_layout SageInteraction

\end_layout

\begin_layout Standard
A 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
set!frozen
\end_layout

\end_inset

frozen set
\series default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
frozen set
\begin_inset ERT
status open

\begin_layout Plain Layout

|
\end_layout

\end_inset

see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

set
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

is an unindexed, immutable collection.
 You create a frozen set using the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
frozenset()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
frozenset()
\end_layout

\end_inset

 command; for instance,
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f_set = frozenset(a_set)
\end_layout

\begin_layout SageInput
f_set
\end_layout

\begin_layout SageOutput
frozenset({-I, 3, pi})
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can also create an 
\begin_inset Quotes eld
\end_inset

empty frozen set
\begin_inset Quotes erd
\end_inset

 by placing nothing between the parentheses, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
frozenset()
\end_layout

\end_inset

.
 Frozen sets are especially useful when you need sets of sets: you cannot
 store a mutable set inside a set, so you store a frozen set inside a set.
\end_layout

\begin_layout Standard
A 
\series bold
dictionary
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionary
\end_layout

\end_inset


\series default
 is like a list, in that it is an indexed, mutable collection.
 It is 
\emph on
unlike 
\emph default
a list in that the indexing is by entry rather than by position.
 You create a dictionary using braces 
\emph on
and
\emph default
 colons; the braces delimit the dictionary, while the colons indicate a
 correspondence between 
\series bold
keys
\series default
 (dictionary entries) and 
\series bold
values
\series default
 (definitions for the entries).
 For example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_dict = {x:2, x^2 + 1:'hello'}
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In this (rather silly) dictionary, the entry 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 corresponds to the value 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2
\end_layout

\end_inset

, while the entry 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x^2
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

1
\end_layout

\end_inset

 corresponds to the value 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'hello'
\end_layout

\end_inset

.
 Another way to create a dictionary is by using the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
dict()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
dict()
\end_layout

\end_inset

 command with a collection of 2-tuples; the first entry in the tuple becomes
 the key, the second becomes the value.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
tup_dict = dict(( (x,1), (15,-71), (cos(x),3) ))
\end_layout

\begin_layout SageInput
tup_dict[cos(x)]
\end_layout

\begin_layout SageOutput
3
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can also create an 
\begin_inset Quotes eld
\end_inset

empty dictionary
\begin_inset Quotes erd
\end_inset

 by placing nothing between the parentheses of a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
dict()
\end_layout

\end_inset

 command, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
dict()
\end_layout

\end_inset

.
 We have already used dictionaries when performing 
\begin_inset Index idx
status open

\begin_layout Plain Layout
substitution!dictionary
\end_layout

\end_inset

dictionary substitution.
\end_layout

\begin_layout Subsection*
How does indexing work?
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
indexing
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
collection!indexing
\end_layout

\end_inset

The answer to this questions depends somewhat on the type of collection,
 but it always involves the brackets, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
For a dictionary, you type the key between the brackets, and Sage returns
 the value assigned to that key:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_dict[x^2 + 1]
\end_layout

\begin_layout SageOutput
'hello'
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We can now explain how dictionary substitution works in an expression: when
 you type
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = x^2 + 2
\end_layout

\begin_layout SageInput
f({x:1})
\end_layout

\end_deeper
\begin_layout Standard
\noindent
then Sage uses the dictionary 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
{x:1}
\end_layout

\end_inset

 to interpret every 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 as a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 instead.
\end_layout

\begin_layout Standard
For tuples
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple
\end_layout

\end_inset

 and 
\begin_inset Index idx
status open

\begin_layout Plain Layout
list
\end_layout

\end_inset

lists, indexing has a meaning analogous to that of a subscript in mathematics.
 Just as 
\begin_inset Formula $a_{1}$
\end_inset

, 
\begin_inset Formula $a_{2}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $a_{i}$
\end_inset

, \SpecialChar ldots
 indicate the first, second, \SpecialChar ldots
, 
\begin_inset Formula $i$
\end_inset

th, \SpecialChar ldots
 elements of a sequence, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
LorT[
\end_layout

\end_inset


\emph on
i
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
]
\end_layout

\end_inset

 indicates the element in position 
\begin_inset Formula $i$
\end_inset

.
 The slight difference in wording is important; for Sage you need to supply
 a 
\begin_inset Quotes eld
\end_inset

legal position,
\begin_inset Quotes erd
\end_inset

 which is not quite the same as you might expect:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_tuple
\end_layout

\begin_layout SageOutput
(3, pi, -I)
\end_layout

\begin_layout SageInput
a_tuple[1]
\end_layout

\begin_layout SageOutput
pi
\end_layout

\begin_layout SageInput
a_tuple[2]
\end_layout

\begin_layout SageOutput
-I
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\begin_inset Index idx
status open

\begin_layout Plain Layout
indexing!numbering
\end_layout

\end_inset

If you look closely at the numbering, you'll notice that Sage starts numbering
 its elements at position
\begin_inset space ~
\end_inset

0, 
\emph on
not
\emph default
 position
\begin_inset space ~
\end_inset

1.
 To read the first element of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a_tuple
\end_layout

\end_inset

, you would actually type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a_tuple[0]
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Suppose the collection 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 is either a tuple or a list, and has 
\begin_inset Formula $n$
\end_inset

 elements.
 The meaning of 
\begin_inset Quotes eld
\end_inset

legal position
\begin_inset Quotes erd
\end_inset

 corresponds to the following table:
\end_layout

\begin_layout Standard
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="9">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[0]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[1]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[2]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[n-2]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[n-1]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[n]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
which element?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
PANIC!
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
second
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
third
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\SpecialChar ldots

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
penultimate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
PANIC!
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[-n-1]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[-n]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[-n+1]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[-n+2]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[-2]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C[-1]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
As usual, 
\color red
PANIC!
\color inherit
 stands in for, 
\begin_inset Quotes eld
\end_inset

some sort of error occurs!
\begin_inset Quotes erd
\end_inset

 We discuss these in the next section, but notice something surprising:
 negative indices have meaning! They take you backwards through the elements
 of C.
 We will not make use of this feature in this text, but there are occasions
 where it can be put to good use.
\end_layout

\begin_layout Subsection*
Things you can do with collections
\end_layout

\begin_layout Standard
We don't address here the applications of collections, so much as the commands
 use can use on them, and the methods you can send them.
 We've already seen how you can access elements of indexed collections via
 the bracket operator.
\end_layout

\begin_layout Subsubsection*
All five collections
\end_layout

\begin_layout Standard
The following procedures and operation are common to all five collections:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="middle" width="25col%">
<column alignment="left" valignment="middle" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
len()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
len(
\end_layout

\end_inset


\emph on
collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dictionary!commands shared with all collections
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set!commands shared with all collections
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tuple!commands shared with all collections
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
list!commands shared with all collections
\end_layout

\end_inset

the number of elements in 
\emph on
collection
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
element
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
collection!membership in|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

 
\emph on
collection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "10ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if 
\emph on
element
\emph default
 is in collection (if 
\emph on
collection
\emph default
 is a dictionary, this means that 
\emph on
element
\emph default
 appears as a key)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max(
\end_layout

\end_inset


\emph on
collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the largest element in 
\emph on
collection
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
min()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
min(
\end_layout

\end_inset


\emph on
collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the smallest element in 
\emph on
collection
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sorted
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sorted(
\end_layout

\end_inset


\emph on
collection
\family typewriter
\emph default
, 
\family default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
reverse=
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
returns a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sorting
\end_layout

\end_inset

sorted copy of 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
collection
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 (reverse order if 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
reverse=
\end_layout

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
True
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sorted(
\end_layout

\end_inset


\emph on
collection
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset

key
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset

 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
reverse=
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
returns copy of 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
collection
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
, sorted according to 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
key
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 (reverse order if 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
reverse=
\end_layout

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
True
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Most of the time, a program doesn't know beforehand how many elements it
 has to work with, so having a way to determine that number is enormously
 useful.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
len(a_set)
\end_layout

\begin_layout SageOutput
3
\end_layout

\begin_layout SageInput
len(another_set)
\end_layout

\begin_layout SageOutput
1
\end_layout

\begin_layout SageInput
sqrt(2) in a_list
\end_layout

\begin_layout SageOutput
False
\end_layout

\begin_layout SageInput
-sqrt(-1) in a_tuple
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
sorted(a_tuple)
\end_layout

\begin_layout SageOutput
[3, pi, -I]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notice how the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sorted()
\end_layout

\end_inset

 command always returns a list, even though we supplied a tuple for its
 input.
\end_layout

\begin_layout Standard
There are times when you may want to sort a collection in a manner different
 from Sage's default.
 You can modify the sorting criteria using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
key
\end_layout

\end_inset

 option, to which you assign a procedure that returns an object that serves
 as a key for sorting, much as a dictionary.
 We won't use this often, but the example above illustrates the point: from
 the point of view of complex analysis, it seems odd to sort 
\begin_inset Formula $-i$
\end_inset

 after 3 and 
\begin_inset Formula $\pi$
\end_inset

, when its 
\begin_inset Quotes eld
\end_inset

norm
\begin_inset Quotes erd
\end_inset

 is smaller.
 To sort by the norm, we can write a procedure that computes the norm of
 any complex number, and use that as the key:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def by_norm(z):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return real_part(z)**2 + imag_part(z)**2
\begin_inset CommandInset label
LatexCommand label
name "sage fn: by_norm(z)"

\end_inset


\end_layout

\begin_layout SageInput
sorted(a_tuple, key=by_norm)
\end_layout

\begin_layout SageOutput
[-I, 3, pi]
\end_layout

\end_deeper
\begin_layout Subsubsection*
Lists and tuples
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
list
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple
\end_layout

\end_inset

The next methods and operations apply only to lists and tuples:
\end_layout

\begin_layout Standard
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
tuple!methods
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
list!methods
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
count@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.count()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
LorT
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.count(
\end_layout

\end_inset


\emph on
element
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
list!commands shared with tuple
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tuple!commands shared with list
\end_layout

\end_inset

 number of time 
\emph on
element
\emph default
 appears in 
\emph on
LorT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
index@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.index()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
LorT
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.index(
\end_layout

\end_inset


\emph on
element
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the location of 
\emph on
element
\emph default
 in 
\emph on
LorT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
LorT1
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
+
\end_layout

\end_inset


\emph on
LorT2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
creates a new list/tuple whose elements are those of 
\emph on
LorT1
\emph default
, followed by those of 
\emph on
LorT2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
It should make sense that you cannot apply these techniques to sets, frozen
 sets, or dictionaries.
 No element or key can appear more than once in a set, frozen set, or dictionari
es, so 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
count()
\end_layout

\end_inset

 would return at most
\begin_inset space ~
\end_inset

1 in each.
 Sets and frozen sets are unindexable, so 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
index()
\end_layout

\end_inset

 doesn't make sense.
 For dictionaries, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
index()
\end_layout

\end_inset

 might make sense, but it isn't directly implemented.
\begin_inset Foot
status open

\begin_layout Plain Layout
\noindent
It is actually doable, but somewhat convoluted.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can only 
\begin_inset Quotes eld
\end_inset

add
\begin_inset Quotes erd
\end_inset

 two lists or two tuples; you cannot add a list to a tuple, or vice-versa.
\end_layout

\begin_layout Standard
We have exhausted the commands available for tuples, but there's a bit more
 you can do with a list.
 Since lists are both indexable and mutable, we can modify a particular
 element of a list using item assignment:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_list[0] = 1
\end_layout

\begin_layout SageInput
a_list
\end_layout

\begin_layout SageOutput
[1, pi, -I]
\end_layout

\begin_layout SageInput
a_list[0] = 3
\end_layout

\begin_layout SageInput
a_list
\end_layout

\begin_layout SageOutput
[3, pi, -I]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
As usual, we use
\begin_inset space ~
\end_inset

0 because Sage considers the first item to have location
\begin_inset space ~
\end_inset

0.
\end_layout

\begin_layout Standard
Besides item assignment, lists feature some methods not available to tuples;
 see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: list messages"

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
As usual, the list may not be exhaustive, and probably isn't.
 We're addressing only the commands we think you'll need most often, and
 the ones available at the time of this writing.
 To see if the list is exhaustive, remember that you can obtain a list by
 typing 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a_list.
\end_layout

\end_inset


\begin_inset space ~
\end_inset

, then pressing the 
\size normal

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Tab
\end_layout

\end_inset


\size default
 key.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tab completion
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
list!methods
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
append@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.append()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.append(
\end_layout

\end_inset


\emph on
element
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
add 
\emph on
element
\emph default
 to the end of 
\emph on
L
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
extend@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.extend()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.extend(
\end_layout

\end_inset


\emph on
collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
append the elements of 
\emph on
collection
\emph default
 to 
\emph on
L
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "25col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
insert@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.insert()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.insert(
\end_layout

\end_inset


\emph on
location
\family typewriter
\emph default
,
\begin_inset Newline newline
\end_inset


\family default
\emph on

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

element
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
add 
\emph on
element
\emph default
 at the given 
\emph on
location
\emph default
 (starting from
\begin_inset space ~
\end_inset

0)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\emph on
L
\emph default
.pop()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
pop@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
removes (and returns) the last element of the list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop(
\end_layout

\end_inset


\emph on
location
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
removes and returns the element at the indicated location (starting from
\begin_inset space ~
\end_inset

0)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.remove(
\end_layout

\end_inset


\emph on
element
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
remove@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.remove()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
removes the named element
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.reverse()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
reverse@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.reverse()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reverses the list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.sort()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
sort@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.sort()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
sorts the list according to Sage's default mechanism
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.sort(
\end_layout

\end_inset


\emph on
key
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sorts the list according to the given 
\emph on
key
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "25col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\emph on
L
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\family typewriter
.sort(
\end_layout

\end_inset


\emph on
key
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

reverse=
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
sorts
\begin_inset Index idx
status open

\begin_layout Plain Layout
sorting
\end_layout

\end_inset

 the list in the order 
\emph on
opposite
\emph default
 that given by 
\emph on
key
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab: list messages"

\end_inset

Operations unique to lists
\end_layout

\end_inset


\end_layout

\end_inset

A few distinctions are worth making about these commands:
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.remove()
\end_layout

\end_inset

 differ in that one refers to a 
\emph on
location
\emph default
, while the other refers to a particular 
\emph on
element
\emph default
.
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_list.pop(1)
\end_layout

\begin_layout SageOutput
pi
\end_layout

\begin_layout SageInput
a_list.remove(3)
\end_layout

\begin_layout SageInput
a_list
\end_layout

\begin_layout SageOutput
[-I]
\end_layout

\end_deeper
\begin_layout Standard
There was never an element in location
\begin_inset space ~
\end_inset

3, emphasizing that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
remove()
\end_layout

\end_inset

 looked for an element whose value was 3.
 This can be fairly sophisticated, as Sage will perform obvious reductions
 to check whether an element has a given value:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_list = [3, pi, -I, (x+1)*(x-1)]
\end_layout

\begin_layout SageInput
a_list.remove(x**2 - 1)
\end_layout

\begin_layout SageInput
a_list
\end_layout

\begin_layout SageOutput
[3, pi, -I]
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.sort()
\end_layout

\end_inset

 differs from 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sorted()
\end_layout

\end_inset

 in that it does not copy the list first, and returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset

.
 The list is sorted 
\begin_inset Quotes eld
\end_inset

in-place.
\begin_inset Quotes erd
\end_inset

 You can think of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sorted()
\end_layout

\end_inset

 as leaving the original list intact, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.sort()
\end_layout

\end_inset

 as changing the list.
\end_layout

\begin_layout Subsubsection*
Sets and frozen sets
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
set
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
set!frozen
\end_layout

\end_inset

The methods in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: set messages"

\end_inset


\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
set!methods
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle" tabularwidth="90col%">
<column alignment="left" valignment="middle" width="40col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
add@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.add()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.add(
\end_layout

\end_inset


\emph on
element
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
set!operations on
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
add 
\emph on
element
\emph default
 to the set 
\emph on
S
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
difference@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.difference()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.difference(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns a copy of the set or frozen set 
\emph on
S
\emph default
, minus any elements in the collection 
\emph on
C
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
difference_update@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.difference_update()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.difference_update(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
removes elements in the collection 
\emph on
C
\emph default
 from the set 
\emph on
S
\emph default
 itself
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
intersection@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.intersection()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.intersection(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns the set of elements in both the set or frozen set 
\emph on
S
\emph default
 and the collection 
\emph on
C
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
intersection_update@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.intersection_update()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.intersection_update(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
removes from the set 
\emph on
S
\emph default
 any elements in 
\emph on
C
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
isdisjoint@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.isdisjoint()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.isdisjoint(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "10ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if the set or frozen set 
\emph on
S
\emph default
 has no elements in common with the collection 
\emph on
C
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
issubset@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.issubset()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.issubset(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if all the elements in the set or frozen set 
\emph on
S
\emph default
 are also in the collection 
\emph on
C
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
issuperset@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.issuperset()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.issuperset(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "10ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if all the elements in the collection 
\emph on
C
\emph default
 are also in the set or frozen set 
\emph on
S
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
pop@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
removes and returns 
\emph on
an
\emph default
 element of the set 
\emph on
S
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
remove@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.remove()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.remove(
\end_layout

\end_inset


\emph on
element
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
removes 
\emph on
element
\emph default
 if it appears in 
\emph on
S
\emph default
; raises a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
KeyError
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
KeyError
\end_layout

\end_inset

 if it does not
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
symmetric_difference@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
symmetric_difference()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.symmetric_difference(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "10ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns the symmetric difference between 
\emph on
S
\emph default
 and 
\emph on
T
\emph default
; that is, the elements 
\emph on
not 
\emph default
common to 
\emph on
S
\emph default
 and 
\emph on
T
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
symmetric_difference_update@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
symmetric_difference_update()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.symmetric_difference_update(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "10ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
remove from 
\emph on
S
\emph default
 any element that appear in 
\emph on
C
\emph default
, and adds to 
\emph on
S
\emph default
 those elements in 
\emph on
T
\emph default
 that are not in 
\emph on
S
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
union@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.union()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.union(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns the union of the set or frozen set 
\emph on
S
\emph default
 with the collection 
\emph on
C
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
update@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.update()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
S
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.update(
\end_layout

\end_inset


\emph on
C
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
adds all the elements of the collection 
\emph on
C
\emph default
 to the set 
\emph on
S
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab: set messages"

\end_inset

Operations unique to sets
\end_layout

\end_inset


\end_layout

\end_inset

 apply only to sets and frozen sets.
 Operations that modify the set do not apply to frozen sets.
\end_layout

\begin_layout Standard
Several of the methods correspond to mathematical operations or relations.
 An important distinction to make is that methods which end with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
_update
\end_layout

\end_inset

 modify the set itself and return 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset

, while the corresponding, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
_update
\end_layout

\end_inset

-less methods return a new set and leave the original untouched.
\end_layout

\begin_layout Subsubsection*
Dictionaries
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionary
\end_layout

\end_inset

We will not use most of the features available to a dictionary.
 The only ones we mention appear in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: dicitonary messages"

\end_inset

.
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
dictionary!methods
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
clear@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.clear()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
D
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.clear()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
remove all the entries in 
\emph on
D
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
has_key@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.has_key()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
D
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.has_key(
\end_layout

\end_inset


\emph on
key
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if 
\emph on
key
\emph default
 has a value in 
\emph on
D
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
pop@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
D
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop(
\end_layout

\end_inset


\emph on
key
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
removes the entry for 
\emph on
key
\emph default
 from 
\emph on
D
\emph default
 and returns its value
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
popitem@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.popitem()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
D
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.popitem()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
remove 
\emph on
some
\emph default
 entry of 
\emph on
D
\emph default
 and return the tuple 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(
\end_layout

\end_inset


\emph on
key
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
value
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
update@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.update()
\end_layout

\end_inset


\end_layout

\end_inset


\emph on
D
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.update(
\end_layout

\end_inset


\emph on
E
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
adds the definitions in 
\emph on
E
\emph default
 to 
\emph on
D
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab: dicitonary messages"

\end_inset

Operations unique to dictionaries
\end_layout

\end_inset


\end_layout

\end_inset

 We have already shown how to access a dictionary's elements using the bracket
 operator 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

, so we merely note that you can add or modify entries in a dictionary the
 same way that you modify entries in a list.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_dict
\end_layout

\begin_layout SageOutput
{x^2 + 1: 'hello', x: 2}
\end_layout

\begin_layout SageInput
a_dict[0] = 'goodbye'
\end_layout

\begin_layout SageInput
a_dict[0] = -3
\end_layout

\begin_layout SageInput
a_dict
\end_layout

\begin_layout SageOutput
{0: -3, x^2 + 1: 'hello', x: 2}
\end_layout

\end_deeper
\begin_layout Subsection*
An assistant for creating collections
\end_layout

\begin_layout Standard
We have already used the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset


\end_layout

\end_inset

 procedure, but we haven't yet discussed its meaning.
 Its purpose is to create a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range
\end_layout

\end_inset

 object, Sage's way of tracking a sequence of integers.
 Here are three ways to create a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range(
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the sequence 
\begin_inset Formula $0,1,\ldots,b-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the sequence 
\begin_inset Formula $a,a+1,\ldots,b-1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range(
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
d
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align left
the sequence 
\begin_inset Formula $a,a+d,\ldots,a+kd$
\end_inset

 where 
\begin_inset Formula $a+kd<b$
\end_inset

 and 
\begin_inset Formula $a+\left(k+1\right)d\geq b$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
You can think of 
\begin_inset Formula $a$
\end_inset

 as a 
\begin_inset Quotes eld
\end_inset

start
\begin_inset Quotes erd
\end_inset

 value, of 
\begin_inset Formula $b$
\end_inset

 as a 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 value, and of 
\begin_inset Formula $d$
\end_inset

 as a 
\begin_inset Quotes eld
\end_inset

step
\begin_inset Quotes erd
\end_inset

 value, so that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range(-3,8,3)
\end_layout

\end_inset

 represents the finite sequence where 
\begin_inset Formula $a=-3$
\end_inset

, 
\begin_inset Formula $b=8$
\end_inset

, and 
\begin_inset Formula $d=3$
\end_inset

, or
\begin_inset Formula 
\[
-3,\ -3+3,\ -3+2\times3,\ -3+3\times3\quad\longrightarrow\quad-3,0,3,6\ .
\]

\end_inset

Notice that 
\begin_inset Formula $8$
\end_inset

 is not an element of the sequence; indeed, 
\begin_inset Formula $b$
\end_inset

 is 
\emph on
never
\emph default
 an element of the sequence.
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

 procedure 
\emph on
does not
\emph default
 create a concrete sequence of integers!
\begin_inset Foot
status open

\begin_layout Plain Layout
It did in earlier versions of Python, and therefore Sage, but this changed
 with Python 3.
\end_layout

\end_inset

 Rather, it creates a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range
\end_layout

\end_inset

 object: the beginning and end of a sequence, along the step from one element
 to the next.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
L = range(1, 10, 2)
\end_layout

\begin_layout SageInput
L
\end_layout

\begin_layout SageOutput
range(1, 10, 2)
\end_layout

\begin_layout SageInput
L.start
\end_layout

\begin_layout SageOutput
1
\end_layout

\begin_layout SageInput
L.stop
\end_layout

\begin_layout SageOutput
10
\end_layout

\begin_layout SageInput
L.step
\end_layout

\begin_layout SageOutput
2
\end_layout

\begin_layout SageInput
5 in L
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
6 in L
\end_layout

\begin_layout SageOutput
False
\end_layout

\end_deeper
\begin_layout Subsection*
Errors in creating or accessing collections
\end_layout

\begin_layout Standard
It would be wise to review what sort of errors crop up when you try to create
 one or access an element.
\end_layout

\begin_layout Itemize
When creating a collection using a command rather than symbols, don't neglect
 to supply another collection.
 Sage will not accept a mere, comma-separated sequence of elements.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!takes@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
\SpecialChar ldots
 takes at most \SpecialChar ldots
 argument (\SpecialChar ldots
 given)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
new_tuple = tuple(2, 3, 4)
\end_layout

\begin_layout SageError
TypeError: tuple() takes at most 1 argument (3 given)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Tuples are immutable.
 Don't try to change values.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'tuple' object does not support item assignment
\end_layout

\end_inset


\end_layout

\end_inset

 If you think you might need to change the value of an element, use a list
 instead.
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_tuple[0] = 1
\end_layout

\begin_layout SageError
TypeError: 'tuple' object does not support item assignment
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
While lists and tuples accept negative indices, they don't 
\begin_inset Quotes eld
\end_inset

wrap around
\begin_inset Quotes erd
\end_inset

 any more than that.
 If the collection has length 
\begin_inset Formula $n$
\end_inset

, don't try to access elements 
\begin_inset Formula $n$
\end_inset

 or 
\begin_inset Formula $-n-1$
\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
IndexError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
list index out of range
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
len(a_list)
\end_layout

\begin_layout SageOutput
3
\end_layout

\begin_layout SageInput
a_list[3]
\end_layout

\begin_layout SageError
IndexError: list index out of range
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
As mentioned already, don't try to add a list to a tuple, or vice-versa.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
can only concatenate list (not ''tuple'') to list
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
can only concatenate tuple (not ''list'') to tuple
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_list + a_tuple
\end_layout

\begin_layout SageOutput
TypeError: can only concatenate list (not "tuple") to list
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Set aren't indexed, so you can't access a particular element of a set.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'set' object does not support indexing
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
len(a_set)
\end_layout

\begin_layout SageOutput
3
\end_layout

\begin_layout SageInput
a_set[1]
\end_layout

\begin_layout SageError
TypeError: 'set' object does not support indexing
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Sage raises an error whenever you try to access a non-existent entry of
 a dictionary.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
KeyError
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a_dict[12]
\end_layout

\begin_layout SageError
KeyError: 12
\end_layout

\end_deeper
\end_deeper
\begin_layout Section*
Repeating 
\emph on
over
\emph default
 a collection
\end_layout

\begin_layout Standard
We can now return to the main purpose of this chapter, Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset


\end_layout

\end_inset

keyword.
 We remind you that its general form is
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset


\emph on
variable
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\emph on
collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
followed by an indented list of tasks; this corresponds to the pseudocode
\end_layout

\begin_layout Standard
\align center

\series bold
for
\series default
 
\emph on
variable 
\begin_inset Formula $\in$
\end_inset

 
\emph default
collection
\end_layout

\begin_layout Standard
\noindent
followed by an indented list of tasks.
 On the first pass through the loop, 
\emph on
variable
\emph default
 takes on the value of the 
\begin_inset Quotes eld
\end_inset

first
\begin_inset Quotes erd
\end_inset

 element of 
\emph on
collection
\emph default
; on each subsequent pass, 
\emph on
variable
\emph default
 takes on the value of the element in 
\emph on
collection
\emph default
 that 
\begin_inset Quotes eld
\end_inset

follows
\begin_inset Quotes erd
\end_inset

 the current value of 
\emph on
variable
\emph default
.
 We call 
\emph on
variable
\emph default
 the 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
variable!loop variable
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
loop!loop variable
\end_layout

\end_inset

loop variable
\series default
 and 
\emph on
collection
\emph default
 the 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
domain
\end_layout

\end_inset

loop domain
\series default
, or just 
\begin_inset Quotes eld
\end_inset

domain
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The effect is that if 
\emph on
element
\emph default
 is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset

 the domain 
\emph on
C
\emph default
, the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop will at some point assign its value to 
\emph on
variable
\emph default
, then perform all the indented tasks.
 This property of a complete treatment of 
\emph on
C
\emph default
 does not change 
\emph on
even if you modify
\emph default
 
\emph on
variable
\emph default
 during the loop; Sage remembers which 
\emph on
element
\emph default
 it selected from 
\emph on
C
\emph default
, and selects the element that 
\begin_inset Quotes eld
\end_inset

follows
\begin_inset Quotes erd
\end_inset

 it, rather than the value of 
\emph on
variable
\emph default
.
 So you can modify the loop variable if needed, without worrying about the
 behavior of the loop.
\begin_inset Foot
status open

\begin_layout Plain Layout
This is very different from many computer languages, such as C, C++, and
 Java.
 In those languages, modifying the loop variable during a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop can have catastrophic results.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
On the other hand!
\series default
 if you modify the domain, nasty, 
\emph on
nasty
\emph default
 things can happen.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop wants to iterate over every element of its domain, but it doesn't
 make a copy of the domain at the outset, so if the body of the loop modifies
 the domain, strange things can happen, including an 
\begin_inset Index idx
status open

\begin_layout Plain Layout
infinite loop@
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hypertarget{infinite loop in index}{}
\end_layout

\end_inset

infinite loop|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

loop, infinite
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
loop!infinite|see 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

infinite loop
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

infinite loop.
\begin_inset Foot
status open

\begin_layout Plain Layout
If you need a definition of 
\begin_inset Quotes eld
\end_inset

infinite loop,
\begin_inset Quotes erd
\end_inset

 see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperlink{infinite loop in index}{
\end_layout

\end_inset

the index
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, where we stole a joke from the glossary of the AmigaDOS 3.1 manual.
\end_layout

\end_inset

 One of the Programming exercises will illustrate this — you should 
\emph on
not
\emph default
 actually try it in Sage unless you're ready to press the Stop button (cloud),
 select the Action menu, then Interrupt (other server), or hold 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Ctrl
\end_layout

\end_inset

 and press 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 (command line).
\end_layout

\begin_layout Standard
There are many cases where you will want to use the value of the loop variable.
\end_layout

\begin_layout Subsection*
First example: computing a Riemann integral
\end_layout

\begin_layout Standard
Recall that we cannot always simplify an indefinite integral to 
\begin_inset Quotes eld
\end_inset

elementary form,
\begin_inset Quotes erd
\end_inset

 so when we need a definite integral we can approximate its value using
 one of several methods.
 The integral is defined as
\begin_inset Formula 
\[
\int_{a}^{b}f\left(x\right)dx=\lim_{n\rightarrow\infty}\sum_{i=1}^{n}f\left(x_{i}^{*}\right)\Delta x,\quad\textrm{where}\quad\Delta x=\frac{b-a}{n}\quad\textrm{and}\quad x_{i}^{*}\textrm{ lies in the }i\textrm{th subinterval}.
\]

\end_inset

In 
\begin_inset Quotes eld
\end_inset

plain English,
\begin_inset Quotes erd
\end_inset

 the integral's value is the limit of the 
\begin_inset Quotes eld
\end_inset

Riemann sums.
\begin_inset Quotes erd
\end_inset

 These sums approximate the integral using 
\begin_inset Formula $n$
\end_inset

 rectangles of width 
\begin_inset Formula $\Delta x$
\end_inset

 and height 
\begin_inset Formula $f\left(x_{i}^{*}\right)$
\end_inset

.
 There are three customary ways to select 
\begin_inset Formula $x_{i}^{*}$
\end_inset

:
\end_layout

\begin_layout Itemize
by left endpoint, where 
\begin_inset Formula $x_{i}^{*}=a+\left(i-1\right)\Delta x$
\end_inset

;
\end_layout

\begin_layout Itemize
by right endpoint, where 
\begin_inset Formula $x_{i}^{*}=a+i\Delta x$
\end_inset

; and
\end_layout

\begin_layout Itemize
by midpoint, where 
\begin_inset Formula $x_{i}^{*}=a+\left(i-\nicefrac{1}{2}\right)\Delta x$
\end_inset

.
\end_layout

\begin_layout Standard
As 
\begin_inset Formula $n$
\end_inset

 increases, the error decreases, so it is possible to approximate the integral
 by evaluating
\begin_inset Formula 
\[
\sum_{i=1}^{n}f\left(x_{i}^{*}\right)\Delta x
\]

\end_inset

for a large value of 
\begin_inset Formula $n$
\end_inset

.
 The summation symbol 
\begin_inset Formula $\Sigma$
\end_inset

 instructs us to let the summation variable 
\begin_inset Formula $i$
\end_inset

 grow from
\begin_inset space ~
\end_inset

1 to
\begin_inset space ~
\end_inset


\begin_inset Formula $n$
\end_inset

, and for each value to evaluate the expression on its right, and add that
 to the growing sum.
\end_layout

\begin_layout Standard
Notice the language we are using here: 
\begin_inset Quotes eld
\end_inset

each
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

every.
\begin_inset Quotes erd
\end_inset

 When a problem's solution involves these sorts of words, that's a telltale
 sign that you need a definite loop over the collection whose elements are
 in question.
\end_layout

\begin_layout Subsubsection*
Pseudocode
\end_layout

\begin_layout Standard
In this case, we will create a loop for left-endpoint approximation.
 It is relatively easy to turn this into pseudocode:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Left_Riemann_approximation
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a,b\in\mathbb{R}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

, an integrable function on 
\begin_inset Formula $\left[a,b\right]$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

, the number of rectangles to use in approximating 
\begin_inset Formula $\int_{a}^{b}f\left(x\right)dx$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $S$
\end_inset

, the left-endpoint Riemann sum of 
\begin_inset Formula $\int_{a}^{b}f\left(x\right)dx$
\end_inset

, using 
\begin_inset Formula $n$
\end_inset

 rectangles to approximate the area
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $\Delta x=\left(b-a\right)/n$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $S=0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $i\in\left(1,\ldots,n\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $x_{i}^{*}=a+\left(i-1\right)\Delta x$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $f\left(x_{i}^{*}\right)\Delta x$
\end_inset

 to 
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout Standard
Let's look at what this code does.
 Initially it assigns 
\begin_inset Formula $\Delta x$
\end_inset

, which we very much need to know, as it is not part of the input.
 It then initializes the result, 
\begin_inset Formula $S$
\end_inset

, to
\begin_inset space ~
\end_inset

0, a good idea whenever you want to create a sum.
 With this complete, it passes into the loop, assigning to 
\begin_inset Formula $i$
\end_inset

 each value from
\begin_inset space ~
\end_inset

1 to 
\begin_inset Formula $n$
\end_inset

.
 With that value, it performs the two indented tasks underneath: choose
 a value of 
\begin_inset Formula $x_{i}^{*}$
\end_inset

 according to the formula for left endpoints, and add the area of a rectangle
 to 
\begin_inset Formula $S$
\end_inset

.
 Once the loop has passed through every value
\begin_inset space ~
\end_inset

1, \SpecialChar ldots
, 
\begin_inset Formula $n$
\end_inset

, it returns
\begin_inset space ~
\end_inset


\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
Notice how this code uses the value of the loop variable 
\begin_inset Formula $i$
\end_inset

 to construct 
\begin_inset Formula $x_{i}^{*}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Sage implementation
\end_layout

\begin_layout Standard
Implementing this pseudocode in Sage requires a few minor changes.
 The main problems is that we can't use Greek symbols, subscripts, or decorators
, so the names of variables have to change somewhat.
\end_layout

\begin_layout Standard
However, we have to make another change that can be easy to miss.
 The formula we are using expects 
\begin_inset Formula $i$
\end_inset

 to assume the values
\begin_inset space ~
\end_inset

1, \SpecialChar ldots
, 
\begin_inset Formula $n$
\end_inset

.
 The natural way to have Sage pass over such numbers is with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

 command, but by default 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range(n)
\end_layout

\end_inset

 starts with
\begin_inset space ~
\end_inset

0 and ends with 
\begin_inset Formula $n-1$
\end_inset

! There are several ways to make sure you have the right numbers; we opt
 range(1,n+1).
 That is, we want to start at 1 and stop at 
\begin_inset Formula $n+1$
\end_inset

; this includes 1 but 
\emph on
not
\emph default
 
\begin_inset Formula $n+1$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def Left_Riemann_approximation(f, a, b, n, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Delta_x = (b - a) / n
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

S = 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(1, n+1):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# interval's left endpoint
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

xi = a + (i - 1) * Delta_x
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# add area of rectangle over interval
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

S = S + f(xi) * Delta_x
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return S
\end_layout

\end_deeper
\begin_layout Standard
This works quite well:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Left_Riemann_approximation(t^2 + 1, 0, 1, 100, t)
\end_layout

\end_deeper
\begin_layout Subsection*
Second example: checking whether 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 is a field
\end_layout

\begin_layout Standard
For another example, recall the exercise on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "exc: Checking whether ZZn is a field, long way"

\end_inset

, where we have to check whether 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 is a field.
 We already know it is a ring, so we needed merely check that every nonzero
 element has a multiplicative inverse.
 Checking all the elements by hand is rather burdensome, especially as 
\begin_inset Formula $n$
\end_inset

 grows large.
 A loop would thus be a desirable tool here.
 All we have to do is check whether each element has an inverse, and we
 can do that by checking the product of each element with every other element.
\end_layout

\begin_layout Standard
Notice again that we are using the words 
\begin_inset Quotes eld
\end_inset

each
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

every,
\begin_inset Quotes erd
\end_inset

 which tells us we need to use a definite loop.
\end_layout

\begin_layout Subsubsection*
Pseudocode
\end_layout

\begin_layout Standard
We describe a fairly straightforward implementation of our solution in pseudocod
e:
\begin_inset Foot
status open

\begin_layout Plain Layout
This is not a great solution.
 We will improve on it when we discuss decision-making.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
nesting|(
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
loop!nesting|(
\end_layout

\end_inset


\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
produce_all_products
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

 with 
\begin_inset Formula $n\geq2$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
a list 
\begin_inset Formula $L$
\end_inset

 such that 
\begin_inset Formula $L_{i}$
\end_inset

 is the set of products of 
\begin_inset Formula $i\in\mathbb{Z}_{n}$
\end_inset

 with all other elements of 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

Let 
\begin_inset Formula $L=\left[\right]$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $i\in\mathbb{Z}_{n}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

Let 
\begin_inset Formula $M=\emptyset$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $j\in\mathbb{Z}_{n}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $ij$
\end_inset

 to 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

append 
\begin_inset Formula $M$
\end_inset

 to 
\begin_inset Formula $L$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $L$
\end_inset


\end_layout

\begin_layout Standard
Let's look at what this code does.
 It creates a list 
\begin_inset Formula $L$
\end_inset

, initially empty.
 (Our pseudocode uses brackets to denote a list, and brackets with nothing
 between them to denote an empty list.
 Some authors use parentheses instead, but this is not a hard-and-fast rule,
 and we don't want to risk confusion with tuples.) The code then loops through
 all the elements of 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

, calling the element in each pass 
\begin_inset Formula $i$
\end_inset

.
 For each of these elements, it creates a new set 
\begin_inset Formula $M$
\end_inset

, initially empty.
 It now loops through 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 again, calling the element in each pass 
\begin_inset Formula $j$
\end_inset

.
 It's important to notice that 
\begin_inset Formula $i$
\end_inset

 
\emph on
remains fixed
\emph default
 while this inner loop changes 
\begin_inset Formula $j$
\end_inset

 on each pass; because of this, we can say with confidence that 
\begin_inset Formula $M$
\end_inset

 contains the product of this fixed 
\begin_inset Formula $i$
\end_inset

 with every other element of 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 once the inner loop concludes.
 The code then appends this set to 
\begin_inset Formula $L$
\end_inset

, concluding the tasks in the outer loop.
 Once the outer loop has passed through every element of 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

, the code can return 
\begin_inset Formula $L$
\end_inset

.
\end_layout

\begin_layout Standard
Notice that the code uses the values of the loop variables 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, which are themselves entries of 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

.
\end_layout

\begin_layout Standard
By keeping 
\begin_inset Formula $L$
\end_inset

 as a list, we guarantee that its elements correspond to the order in which
 
\begin_inset Formula $i$
\end_inset

 passes through the elements of 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

.
 This is not so important for 
\begin_inset Formula $M$
\end_inset

; all we want is the products of 
\begin_inset Formula $i$
\end_inset

 and every other element, not necessarily their order, though that could
 be useful in some contexts.
\end_layout

\begin_layout Standard
This pseudocode features an important property of loops: 
\series bold
nesting
\series default
.
 This occurs whenever we include one control structure inside another.
 This is often useful, but it can also be quite confusing, so you should
 avoid doing it too much.
 If your nesting grows to more than 3 or 4, it's a good idea to separate
 the inner loops into another procedure.
 This helps make code easier to understand, and since tasks are often usable
 in more than one place, it can also save you time down the road, as well.
\begin_inset Index idx
status open

\begin_layout Plain Layout
nesting|)
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
loop!nesting|)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Sage implementation
\end_layout

\begin_layout Standard
It is relatively easy to turn this into Sage code.
 The main difference with the pseudocode is that we have to create a ring
 for 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 and make sure Sage views 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 as elements of that ring.
 We first show the 
\begin_inset Quotes eld
\end_inset

obvious
\begin_inset Quotes erd
\end_inset

 way to do this, then a smarter way.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def produce_all_products(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

R = ZZ.quo(n)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# eventual result: L[i] is products of i
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L = list()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M = set() # set of multiples of i
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M.add(R(i)*R(j))
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L.append(M)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return L
\end_layout

\end_deeper
\begin_layout Standard
\noindent
To see how this works, try it with a few values of 
\begin_inset Formula $n$
\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
produce_all_products(4)
\end_layout

\begin_layout SageOutput
[{0}, {0, 1, 2, 3}, {0, 2}, {0, 1, 2, 3}]
\end_layout

\begin_layout SageInput
produce_all_products(5)
\end_layout

\begin_layout SageOutput
[{0}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We see that:
\end_layout

\begin_layout Itemize
For 
\begin_inset Formula $\mathbb{Z}_{4}$
\end_inset

, 1 does not appear in the products of
\begin_inset space ~
\end_inset

0 and
\begin_inset space ~
\end_inset

2.
 We don't mind
\begin_inset space ~
\end_inset

0, since we care only about nonzero elements, but
\begin_inset space ~
\end_inset

2 is fatal: 
\begin_inset Formula $\mathbb{Z}_{4}$
\end_inset

 is not a field.
\end_layout

\begin_layout Itemize
For 
\begin_inset Formula $\mathbb{Z}_{5}$
\end_inset

, 1 appears in all the products except
\begin_inset space ~
\end_inset

0, so it is in fact a field.
\end_layout

\begin_layout Standard
Unfortunately, this code is not a great solution, because as 
\begin_inset Formula $n$
\end_inset

 grows larger, the lists of products get long, and fast, making it difficult
 to check whether
\begin_inset space ~
\end_inset

1 is an element of some set.
 This may prompt us to ask: 
\emph on
Why are we checking this?
\emph default
 It's easy to have Sage check whether an element appears in a collection.
 Let's change our pseudocode from this:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

append 
\begin_inset Formula $M$
\end_inset

 to 
\begin_inset Formula $L$
\end_inset


\end_layout

\begin_layout Standard
\noindent
to this:
\begin_inset Foot
status open

\begin_layout Plain Layout
This is still not a great solution.
 We will improve on it when we discuss decision-making.
\end_layout

\end_inset


\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

append 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 to 
\begin_inset Formula $L$
\end_inset

 if 
\begin_inset Formula $1\in M$
\end_inset

; 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 otherwise
\end_layout

\begin_layout Standard
\noindent
For the Sage code, we use the fact that the expression 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
1 in M
\end_layout

\end_inset

 simplifies automatically (the only change appears in red):
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def produce_all_products(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

R = ZZ.quo(n)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# eventual result: L[i] is products of i
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L = list()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M = set() # set of multiples of i
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M.add(R(i)*R(j))
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L.append(
\color red
1 in 
\color inherit
M)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return L
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Look at how this behaves much more conveniently than before:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
produce_all_products(4)
\end_layout

\begin_layout SageOutput
[False, True, False, True]
\end_layout

\begin_layout SageInput
produce_all_products(5)
\end_layout

\begin_layout SageOutput
[False, True, True, True, True]
\end_layout

\begin_layout SageInput
produce_all_products(10)
\end_layout

\begin_layout SageOutput
[False, True, False, True, False, False, False, True, False, True]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In this case it's extremely easy to determine whether 
\begin_inset Formula $\mathbb{Z}_{n}$
\end_inset

 is a field: see if 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 appears anywhere besides the first position (which corresponds to
\begin_inset space ~
\end_inset

0, for which no inverse is needed).
\end_layout

\begin_layout Standard
You might wonder if we can't simplify this even further.
 Indeed we can.
 One way would require quite a bit of Boolean algebra, so we postpone it
 for later.
 But another way is to observe that Sage considers 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ZZ.quo(
\end_layout

\end_inset


\emph on
n
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

 to be a collection and we can run over its elements, too: (changes appear
 in red)
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def produce_all_products(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

R = ZZ.quo(n)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# eventual result: L[i] is products of i
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L = list()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i 
\color red
in R
\color inherit
:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M = set() # set of multiples of i
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j 
\color red
in R
\color inherit
:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M.add(
\color red
i*j
\color inherit
)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L.append(1 in
\color red
 
\color inherit
M)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return L
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you test this, you will see how it works just as before, though the code
 is simpler.
 Keep in mind how easy Sage often makes it to work with mathematical objects
 in a natural way.
\end_layout

\begin_layout Section*
Comprehensions: repeating 
\emph on
in
\emph default
 a collection
\end_layout

\begin_layout Standard
Sage offers a special way to create collections that abbreviates the 
\series bold
for
\series default
 loop structure and makes it a bit easier to use and read.
 These are called 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
comprehensions
\end_layout

\end_inset

comprehensions
\series default
, and imitates the set-builder notation of mathematics.
 In set-builder notation, we define a set by specifying first a domain,
 then a criterion for selecting elements from that domain.
 For instance, the expression
\begin_inset Formula 
\[
S=\left\{ n\in\mathbb{N}:2\leq n\leq2^{10}\right\} 
\]

\end_inset

uses set-builder notation to define 
\begin_inset Formula $S$
\end_inset

 as the set of all natural numbers that lie between
\begin_inset space ~
\end_inset

2 and
\begin_inset space ~
\end_inset


\begin_inset Formula $2^{10}$
\end_inset

, inclusive.
 Comprehensions give Sage a natural way to mimic this in places where it
 would be useful and feasible.
\end_layout

\begin_layout Standard
To define a comprehension, use the following template:
\end_layout

\begin_layout Standard
\align center

\emph on
collection
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(
\end_layout

\end_inset


\emph on
expression
\emph default
 for 
\emph on
variable
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\emph on
 collection_or_range
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

 .
\end_layout

\begin_layout Standard
\noindent
This is effectively equivalent to one of the the following sequence of commands
 (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
D
\end_layout

\end_inset

 is a collection; 
\begin_inset Formula $a$
\end_inset

,
\series bold
 
\begin_inset Formula $b$
\end_inset


\series default
, and 
\begin_inset Formula $n$
\end_inset

 are integers):
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
C = 
\begin_inset Formula $\mathit{collection}$
\end_inset

()
\end_layout

\begin_layout SageInput
for d in D:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

C = C.append/insert/update(
\begin_inset Formula $\mathit{expression}$
\end_inset

)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
(Here, you can use 
\emph on

\begin_inset Quotes eld
\end_inset

collection
\begin_inset Quotes erd
\end_inset

 
\emph default
for any list or set, choosing append, insert, or update appropriately.) Or:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
C = 
\begin_inset Formula $\mathit{collection}$
\end_inset

()
\end_layout

\begin_layout SageInput
for d in range(
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $n$
\end_inset

):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

C = C.append/insert/update(
\begin_inset Formula $\mathit{expression}$
\end_inset

)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In each case, the result is that 
\begin_inset Formula $C$
\end_inset

 contains the values taken on by 
\begin_inset Formula $\textit{expression }$
\end_inset

 for each value of either 
\begin_inset Formula $D$
\end_inset

 (first case) or the specified range of integers (second case).
\end_layout

\begin_layout Standard
To see this in practice, we return to our example of the Riemann sums.
 One way we could use a comprehension is in generating the 
\begin_inset Formula $x$
\end_inset

-values.
 Left endpoints have the form
\begin_inset Formula 
\[
a+\left(i-1\right)\Delta x\quad\textrm{where}\quad i=1,\ldots,n\ ,
\]

\end_inset

and we can assign this to a list 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

 of 
\begin_inset Formula $x$
\end_inset

-values using a list comprehension as
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X = [a + (i - 1)*Delta_x for i in range(1, n+1)]
\end_layout

\end_inset

 .
\end_layout

\begin_layout Standard
\noindent
(Remember that we need 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n+1
\end_layout

\end_inset

 because the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

 command proceeds up to, 
\emph on
but not including,
\emph default
 the second number mentioned.) We could then loop over 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

, like so:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def Left_Riemann_approximation(f, a, b, n, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Delta_x = (b - a) / n
\end_layout

\begin_layout SageMoreInput

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# create all left endpoints in one pass
\end_layout

\begin_layout SageMoreInput

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

X = [a + (i - 1)*Delta_x for i in range(1, n+1)]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

S = 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for xi in X:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# add area w/height at f(xi)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

S = S + f(xi) * Delta_x
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return S
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This is somewhat simpler than before, and it has the advantage of defining
 the 
\begin_inset Formula $x$
\end_inset

-values in a way that looks mathematical.
\end_layout

\begin_layout Standard
We can also describe a simpler way that gets around the penalty of creating
 the list 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

.
 Sage has a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset

 command that is comprehension-friendly.
 Rather than initialize a sum variable 
\begin_inset Formula $S$
\end_inset

 to zero, and add partial sums to it on each pass through the loop, we could
 use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset

 command with a list comprehension to simplify the program and make it look
 more like the mathematical idea.
 Since we are using left-hand sums, we can rewrite
\begin_inset Formula 
\[
{\displaystyle \sum_{i=1}^{n}f\left(x_{i}^{*}\right)\Delta x}
\]

\end_inset

as
\begin_inset Formula 
\[
{\displaystyle \sum_{i=1}^{n}f\left(a+i\Delta x\right)\Delta x}
\]

\end_inset

which becomes
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum(f(a + (i*Delta_x))*Delta_x for i in range(1, n+1))
\end_layout

\end_inset

 .
\end_layout

\begin_layout Standard
\noindent
All we've done here is 
\begin_inset Quotes eld
\end_inset

translate
\begin_inset Quotes erd
\end_inset

 the mathematical idea into a corresponding Sage command.
 This can seem harder to read at first, but once you get used to it it's
 quite natural.
 The resulting Sage code is
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def Left_Riemann_approximation(f, a, b, n, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Delta_x = (b - a) / n
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return sum(
\family typewriter
f(a + (i*Delta_x))*Delta_x 
\backslash

\end_layout

\begin_layout SageMoreInput

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(1, n+1)
\family default
)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's a 
\emph on
lot
\emph default
 shorter than what we had before.
\end_layout

\begin_layout Section*
Animation again
\end_layout

\begin_layout Standard
Recall from p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "pg: demonstration of animate() with fleur-de-lis"

\end_inset

 that we created a short animation of a modified 
\emph on
fleur-de-lis
\emph default
 by creating several frames, then joining them with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
animate()
\end_layout

\end_inset

 command.
 Most interesting or instructive animations require quite a number of frames;
 creating them by hand can be a tiresome task, if not an unfeasible one.
 On the other hand, most animations also depend crucially on patterns; for
 instance, the pattern in our animation on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "pg: demonstration of animate() with fleur-de-lis"

\end_inset

 can be boiled down to
\begin_inset Formula 
\[
\cos\left(nx\right)\sin\left(\left(n+1\right)x\right),
\]

\end_inset

where 
\begin_inset Formula $n$
\end_inset

 ranges from
\begin_inset space ~
\end_inset

2 to
\begin_inset space ~
\end_inset

7, inclusive.
 Of course, we might want more images than that.
 List comprehensions allow us to create a list of frames, such as the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
frames = [polar_plot(cos(n*x)*sin((n+1)*x), (x, 0, pi), fill=True, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2, fillcolor='yellow', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='goldenrod', axes=False) 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for n in range(2,20)]
\end_layout

\begin_layout SageInput
fdl_anim = animate(frames, xmin=-1, xmax=1, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

ymin=-0.5, ymax=1.5, aspect_ratio=1)
\end_layout

\begin_layout SageInput
show(fdl_anim, gif=True, delay=8)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The result should be an animation of reasonable speed and smoothness.
 
\emph on
If you view this text in Acrobat Reader,
\emph default
 you should see the same animation below, though the speed might differ
 slightly; if you are looking at a paper copy of the text, you should instead
 see the animation's individual frames:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifx 
\backslash
onlineordeadtree 
\backslash
online
\backslash
animategraphics[autopause,autoplay,controls,final,width=0.9
\backslash
columnwidth]{8}{graphics/animations/fleur_de_lis/fdl_anim_larger_}{0}{17}
 
\backslash
else 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_0.
pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1.
pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_2.
pdf}
\backslash

\backslash

\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_3.
pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_4.
pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_5.
pdf}
\backslash

\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_6.
pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_7.
pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_8.
pdf}
\backslash

\backslash

\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_9.
pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
0.pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
1.pdf}
\backslash

\backslash

\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
1.pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
2.pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
3.pdf}
\backslash

\backslash

\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
4.pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
5.pdf}
\backslash
 
\backslash
 
\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
6.pdf}
\backslash

\backslash

\backslash
includegraphics[height=0.75in]{graphics/animations/fleur_de_lis/fdl_anim_larger_1
7.pdf}
\backslash
fi
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout

\backslash
string"graphics/plotting graphics/fleur-de-lis
\backslash
string".pdf
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 A 
\series bold
for
\series default
 statement implements a definite loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 The concept we express in pseudocode as 
\begin_inset Quotes eld
\end_inset


\series bold
repeat
\series default
 
\emph on
n
\emph default
 times
\begin_inset Quotes erd
\end_inset

 has no corresponding keyword in most computer languages.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 You shouldn't change the value of a loop variable in a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop, as that can affect the next pass through the loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 You shouldn't change the entries of a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop's domain, as that can affect the next pass through the loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Definite loops are not a useful model for iteration.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 The only immutable structure Sage offers you is a tuple, so if you want
 immutability, you're stuck with indexing.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 You can only construct a set using braces; for example, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
{3, x^2,
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
-pi
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 You can only create an empty set on a computer whose keyboard has a 
\begin_inset Formula $\emptyset$
\end_inset

 symbol on it.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
key
\end_layout

\end_inset

 for sorting returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if the first argument is smaller than the second.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
10.
 List comprehensions allow you to create a list without using the conventional
 
\series bold
for
\series default
 loop structure.
\end_layout

\begin_layout Subsection*
Multiple Choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Indexing in tuples and lists corresponds to which mathematical notation?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 functions
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 expressions
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 subscripts
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 apostrophes
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 We cannot access an element of a set 
\emph on
at numerical location 
\begin_inset Formula $i$
\end_inset


\emph default
 because:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Sage's programmers were lazy.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Sets aren't ordered, and thus aren't indexable.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 That might break the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The premise is incorrect; brackets allow us to access an element of a set
 at numerical location 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 We cannot access an element of a dictionary 
\emph on
at numerical location 
\begin_inset Formula $i$
\end_inset


\emph default
 because:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Sage's programmers were lazy.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Dictionaries aren't ordered, and thus aren't indexable.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Dictionaries are ordered by entry, or 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

, rather than numerical location.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The premise is incorrect; brackets allow us to access an element of a dictionar
y at numerical location 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
4.
 We cannot access an element of a tuple 
\emph on
at numerical location
\emph default
 
\begin_inset Formula $i$
\end_inset

 because:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Sage's programmers were lazy.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Tuples aren't ordered, and thus aren't indexable.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Tuples are supposedly immutable, and accessing a particular element would
 violate that rule.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The premise is incorrect; brackets allow us to access an element of a tuple
 at numerical location 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
5.
 Which of the following mathematical techniques might motivate the use of
 a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 iteration
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 checking all elements of a set
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 repeating a set of tasks 
\begin_inset Formula $n$
\end_inset

 times
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 all of the above
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
6.
 Which of the following collections is immutable?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a tuple
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a list
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a set
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
7.
 Which of the following collections is not indexable?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a tuple
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a list
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a frozen set
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
8.
 Which of the following symbols or identifiers do we use in our pseudocode
 standard to test for membership in a sequence or set?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Formula $\in$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Formula $\varepsilon$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
in
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\series bold
in
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
9.
 Comprehensions model which mathematical notation?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 function
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 set
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 set-builder
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 subscripts
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 Nesting occurs when:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 one or more 
\series bold
for
\series default
 loops are placed inside another
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 we create a collection using set-builder notation
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 we create a set to contain a number of elements of the same type
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 two birds engage in the Rite of Spring
\begin_inset Foot
status open

\begin_layout Plain Layout
We'd appreciate it if 
\begin_inset CommandInset href
LatexCommand href
name "Stravinksy"
target "https://en.wikipedia.org/wiki/The_Rite_of_Spring"
literal "false"

\end_inset

's heirs would not sue.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Summarize how the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

 command behaves when supplied
\begin_inset space ~
\end_inset

1,
\begin_inset space ~
\end_inset

2, or
\begin_inset space ~
\end_inset

3 inputs.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 The associative property of multiplication holds for a set 
\begin_inset Formula $S$
\end_inset

 whenever any triplet of element 
\begin_inset Formula $s,t,u\in S$
\end_inset

 satisfies 
\begin_inset Formula $s\left(tu\right)=\left(st\right)u$
\end_inset

.
 Suppose a particular set 
\begin_inset Formula $S$
\end_inset

 has
\begin_inset space ~
\end_inset

9 elements.
 How many products would an examination of all possible products require?
 
\emph on
Hint:
\emph default
 The answer is large enough that you don't want to do it by hand.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Consider the following Sage code.
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
for i in range(10):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(i,10):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for k in range(j,10):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(i, j, k)
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) What does it print? Don't give all of it, just enough to demonstrate
 the pattern.
 Use words to explain the order the lines are printed.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Find a quadruple inequality
\begin_inset Foot
status open

\begin_layout Plain Layout
A quadruple inequality has the form 
\begin_inset Formula $a\leq b\leq c\leq d\leq e$
\end_inset

.
 Aside from 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
i
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
j
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
k
\end_layout

\end_inset

, you'll need to use two constants.
\end_layout

\end_inset

 involving 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
i
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
j
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
k
\end_layout

\end_inset

 that holds for every single line.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 This problem considers the following Sage code.
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def ec(k):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

var('y')
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = Graphics()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(2, k+1):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = p + implicit_plot(x**2 + y**2/(1-1/sqrt(i))==1,
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(x,-2,2), (y,-2,2), color=(0,i/k,.8-i/k))
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return p
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Describe what the call 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ec(10)
\end_layout

\end_inset

 returns.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Explain what happens if we use larger and larger values of 
\emph on
k
\emph default
 in the call 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ec(
\end_layout

\end_inset


\emph on
k
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
5.
 This exercise considers the question of adding consecutive integers.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) What is the formula for adding the first 
\begin_inset Formula $n$
\end_inset

 positive integers? (You should have seen this before, perhaps in Calculus
\begin_inset space ~
\end_inset

II in the section on Riemann sums.)
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Suzy writes the following procedure to add the first 
\begin_inset Formula $n$
\end_inset

 positive integers.
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def sum_through(N):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

total = 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(N):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

total = total + i
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return total
\end_layout

\end_deeper
\begin_layout Standard
What is the result of her invocation, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum_through(5)
\end_layout

\end_inset

? Indicate the value of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
total
\end_layout

\end_inset

 after each pass through the loop.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring (m)
(c) Use summation notation to describe the value Suzy's program actually
 calculates.
 What would the corresponding formula be?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) How should Suzy correct her program?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 Suppose you have an infant that demands
\begin_inset Foot
status open

\begin_layout Plain Layout
Why, yes, some of us 
\emph on
do
\emph default
 have intimate experience with this.
 What makes you ask?
\end_layout

\end_inset

 to be fed every
\begin_inset space ~
\end_inset

3 hours.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) If you start feeding her at 7
\begin_inset space ~
\end_inset

am, at what times will feeding occur?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Write a comprehension that generates a list with each of those times
 for the next 24 hours.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Repeat part (b), only with the assumption that the infant is a little
 older and only demands to be fed every
\begin_inset space ~
\end_inset

5 hours.
\end_layout

\end_deeper
\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Write a procedure to compute the mean value of the elements of a collection.
 (You should remember that 
\begin_inset Quotes eld
\end_inset

mean value
\begin_inset Quotes erd
\end_inset

 is a fancy name for 
\begin_inset Quotes eld
\end_inset

average.
\begin_inset Quotes erd
\end_inset

) It will be easier with a comprehension inside a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset

, but you can also use a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 Write a procedure to compute the median value of the elements of a collection.
 (You should remember that 
\begin_inset Quotes eld
\end_inset

median value
\begin_inset Quotes erd
\end_inset

 is a fancy name for 
\begin_inset Quotes eld
\end_inset

middle value;
\begin_inset Quotes erd
\end_inset

 that is, half the values are larger, and half are lower.) Probably the best
 way to do this is to convert the collection to a list, sort it, then return
 the number in the middle.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 Write a procedure that takes a list of points 
\begin_inset Formula $\left(x_{i},y_{i}\right)$
\end_inset

 and returns two lists: the list of 
\begin_inset Formula $x$
\end_inset

-coordinates and the list of 
\begin_inset Formula $y$
\end_inset

-coordinates.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 Create an animation that illustrates how a secant line approaches a tangent.
 Use the function 
\begin_inset Formula $f\left(x\right)=x^{2}$
\end_inset

, with the tangent line through the point 
\begin_inset Formula $x=2$
\end_inset

, with secant lines that join 
\begin_inset Formula $x=2$
\end_inset

 with 30 points between 
\begin_inset Formula $x=-1$
\end_inset

 and 
\begin_inset Formula $x=2$
\end_inset

.
 Make the plot of 
\begin_inset Formula $f$
\end_inset

 black, with a thickness of
\begin_inset space ~
\end_inset

2; color the tangent line blue, and color the secant lines red.
 Include a blue point at 
\begin_inset Formula $\left(2,4\right)$
\end_inset

 to highlight where the curve and its tangent and secant lines all meet.
 The result should be comparable to, or better than, the animation you will
 see below
\emph on
 if you view this text in Acrobat Reader:
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifx 
\backslash
onlineordeadtree 
\backslash
online 
\backslash
animategraphics[autopause,controls,autoplay,final,width=0.9
\backslash
columnwidth]{8}{graphics/animations/secant_tangent_anim/secant_tangent_anim_}{0}
{29} 
\backslash
else 
\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/secant_tangent_anim/secant_tangent_anim_0
\backslash
string".pdf} 
\backslash
fi
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 On p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "exc: taylor truncated 4"

\end_inset

 we talked about a truncated Taylor series with
\begin_inset space ~
\end_inset

4 terms.
 We didn't have 
\series bold
for
\series default
 loops available, so that approach was both tiresome and inflexible.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Adapt the pseudocode so that the user can input an arbitrary number
 of terms.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Implement the pseudocode as a Sage program.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
6.
 (This problem is for students who have taken multivariable calculus.) The
 double integral
\begin_inset Formula 
\[
\int\!\!\!\int_{D}f\left(x,y\right)\,d\!x\,d\!y
\]

\end_inset

pops up often in three-dimensional calculus.
 Here, 
\begin_inset Formula $D$
\end_inset

 is a subset of the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

, called the 
\series bold
domain
\series default
 of the integral.
 When 
\begin_inset Formula $D$
\end_inset

 is a rectangular region defined by the 
\begin_inset Formula $x$
\end_inset

-interval 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 and the 
\begin_inset Formula $y$
\end_inset

-interval 
\begin_inset Formula $\left(c,d\right)$
\end_inset

, we can approximate this integral by dividing the domain into 
\begin_inset Formula $m\times n$
\end_inset

 sub-rectangles and evaluating the 
\begin_inset Formula $z$
\end_inset

-value of 
\begin_inset Formula $f$
\end_inset

 on each sub-rectangle:
\begin_inset Formula 
\[
\int\!\!\!\int_{D}f\left(x,y\right)\,d\!x\,d\!y\approx\sum_{i=1}^{m}\sum_{j=1}^{n}f\left(x_{i}^{*},y_{j}^{*}\right)\Delta x\Delta y
\]

\end_inset

where
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $m$
\end_inset

 is the number of subintervals we want along 
\begin_inset Formula $\left(a,b\right)$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

 is the number of subintervals we want along 
\begin_inset Formula $\left(c,d\right)$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta x=\frac{\left(b-a\right)}{m}$
\end_inset

 is the width of each subinterval of 
\begin_inset Formula $\left(a,b\right)$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta y=\frac{\left(d-c\right)}{n}$
\end_inset

 is the width of each subinterval of 
\begin_inset Formula $\left(c,d\right)$
\end_inset

; and
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(x_{i}^{*},y_{j}^{*}\right)$
\end_inset

 is a point in the sub-rectangle defined by the 
\begin_inset Formula $i$
\end_inset

th subinterval of 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 and the 
\begin_inset Formula $j$
\end_inset

th subinterval of 
\begin_inset Formula $\left(c,d\right)$
\end_inset

.
\end_layout

\begin_layout Standard
We can select 
\begin_inset Formula $\left(x_{i}^{*},y_{j}^{*}\right)$
\end_inset

 using a midpoint rule as
\begin_inset Formula 
\[
x_{i}^{*}=a+\left(i-\frac{1}{2}\right)\Delta x\quad\textrm{and}\quad y_{j}^{*}=c+\left(j-\frac{1}{2}\right)\Delta y.
\]

\end_inset

Write a procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
double_integral_midpoint()
\end_layout

\end_inset

 that takes as arguments 
\begin_inset Formula $f$
\end_inset

, 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

, 
\begin_inset Formula $d$
\end_inset

, 
\begin_inset Formula $m$
\end_inset

, and 
\begin_inset Formula $n$
\end_inset

, and returns an approximation of the double integral of 
\begin_inset Formula $f$
\end_inset

 over 
\begin_inset Formula $\left(a,b\right)\times\left(c,d\right)$
\end_inset

 using 
\begin_inset Formula $m$
\end_inset

 subintervals along 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 and 
\begin_inset Formula $n$
\end_inset

 intervals along 
\begin_inset Formula $\left(c,d\right)$
\end_inset

.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 This will be very similar to the code we used to approximate a single integral,
 but you will want to nest a 
\series bold
for
\series default
 loop for 
\begin_inset Formula $y$
\end_inset

 inside a 
\series bold
for
\series default
 loop for 
\begin_inset Formula $x$
\end_inset

.
 You can also do this with a comprehension, but it's a bit more complicated.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
7.
 Let 
\begin_inset Formula $n$
\end_inset

 be a positive integer.
 The 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
factorial
\end_layout

\end_inset

factorial
\series default
 of 
\begin_inset Formula $n$
\end_inset

, written 
\begin_inset Formula $n!$
\end_inset

, is the product
\begin_inset Formula 
\[
n!=n\times\left(n-1\right)\times\left(n-2\right)\times\cdots\times3\times2\times1.
\]

\end_inset

Sage already offers a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.factorial()
\end_layout

\end_inset

 procedure, but in this exercise you'll use loops to do it, two different
 ways.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
\noindent
(a) Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
product()
\end_layout

\end_inset

 command works similarly to the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset

 command: it computes the product of whatever lies between the parentheses,
 and you can use a comprehension to specify a range, rather than build one
 explicitly.
 This corresponds to the mathematical expression
\begin_inset Formula 
\[
\prod_{i=1}^{n}f\left(i\right)
\]

\end_inset

which computes the product of all the 
\begin_inset Formula $f\left(i\right)$
\end_inset

 where 
\begin_inset Formula $i=1,2,\ldots,n$
\end_inset

.
 In this notation,
\begin_inset Formula 
\[
n!=\prod_{i=1}^{n}i=n\times\left(n-1\right)\times\left(n-2\right)\times\cdots\times3\times2\times1.
\]

\end_inset

Write a procedure called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factorial_comprehension()
\end_layout

\end_inset

s that accepts one argument, 
\begin_inset Formula $n$
\end_inset

, then builds the product using a comprehension.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) A more traditional way to compute the factorial is to initialize a product
 variable 
\begin_inset Formula $P$
\end_inset

 to
\begin_inset space ~
\end_inset

1 (the 
\begin_inset Quotes eld
\end_inset

empty product
\begin_inset Quotes erd
\end_inset

), then perform a definite loop from
\begin_inset space ~
\end_inset

1 to
\begin_inset space ~
\end_inset


\begin_inset Formula $n$
\end_inset

, multiplying
\begin_inset space ~
\end_inset


\begin_inset Formula $P$
\end_inset

 by each number along the way.
 Write a procedure called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factorial_loop()
\end_layout

\end_inset

 that accepts one argument, 
\begin_inset Formula $n$
\end_inset

, then builds the product using a definite loop.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
8.
 Write a program to compute the 
\series bold
rising factorial
\series default
 of a number 
\begin_inset Formula $n$
\end_inset

 over 
\begin_inset Formula $k$
\end_inset

 steps.
 The rising factorial 
\begin_inset Formula $\mathrm{rf}\left(n,k\right)$
\end_inset

 is
\begin_inset Formula 
\[
\textrm{rf}\left(n,k\right)=n\times\left(n+1\right)\times\cdots\times\left(n+k-1\right).
\]

\end_inset

While 
\begin_inset Formula $k$
\end_inset

 is always a nonnegative integer, your program should work even if 
\begin_inset Formula $n$
\end_inset

 is not.
 For instance, 
\begin_inset Formula $\textrm{rf}\left(\nicefrac{1}{2},5\right)=\left(\nicefrac{1}{2}\right)\left(\nicefrac{3}{2}\right)\left(\nicefrac{5}{2}\right)\left(\nicefrac{7}{2}\right)\left(\nicefrac{9}{2}\right)=\nicefrac{945}{32}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 Write a program to compute the 
\series bold
falling factorial
\series default
 of a number 
\begin_inset Formula $n$
\end_inset

 over 
\begin_inset Formula $k$
\end_inset

 steps.
 The falling factorial 
\begin_inset Formula $\mathrm{ff}\left(n,k\right)$
\end_inset

 is
\begin_inset Formula 
\[
\textrm{ff}\left(n,k\right)=n\times\left(n-1\right)\times\cdots\times\left(n-\left(k-1\right)\right).
\]

\end_inset

While 
\begin_inset Formula $k$
\end_inset

 is always a nonnegative integer, your program should work even if 
\begin_inset Formula $n$
\end_inset

 is not.
 For instance, 
\begin_inset Formula $\textrm{ff}\left(\nicefrac{9}{2},5\right)=\left(\nicefrac{9}{2}\right)\left(\nicefrac{7}{2}\right)\left(\nicefrac{5}{2}\right)\left(\nicefrac{3}{2}\right)\left(\nicefrac{1}{2}\right)=\nicefrac{945}{32}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 
\begin_inset CommandInset label
LatexCommand label
name "exc: permutation"

\end_inset

A 
\series bold
permutation
\series default
 is a way of ordering distinct objects.
 For example, in the list 
\begin_inset Formula $\left(1,2,3\right)$
\end_inset

 there are six permutations: 
\begin_inset Formula $\left(1,2,3\right)$
\end_inset

 itself, then 
\begin_inset Formula $\left(2,1,3\right)$
\end_inset

, 
\begin_inset Formula $\left(3,2,1\right)$
\end_inset

, 
\begin_inset Formula $\left(3,1,2\right)$
\end_inset

, 
\begin_inset Formula $\left(2,3,1\right)$
\end_inset

, and 
\begin_inset Formula $\left(3,2,1\right)$
\end_inset

.
 Sometimes you want to permute only 
\begin_inset Formula $c$
\end_inset

 of the objects in a set of 
\begin_inset Formula $n$
\end_inset

.
 The formula for this is
\begin_inset Formula 
\[
_{n}P_{c}=\frac{n!}{c!}.
\]

\end_inset

(See the previous exercise for factorials.) There are two ways to do this.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) The obvious, 
\begin_inset Quotes eld
\end_inset

brute force
\begin_inset Quotes erd
\end_inset

 way to do this is to compute 
\begin_inset Formula $n!$
\end_inset

 and 
\begin_inset Formula $c!$
\end_inset

, then divide.
 Write a Sage procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n_P_c_brute()
\end_layout

\end_inset

, that accepts the two arguments 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

, then calls either 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factorial_loop()
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factorial_comprehension()
\end_layout

\end_inset

 to determine 
\begin_inset Formula $n!$
\end_inset

 and 
\begin_inset Formula $c!$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) A smarter way to do this comes from usin' yer noggin.
 Expand by hand the factorials in 
\begin_inset Formula $_{n}P_{c}$
\end_inset

 to see the pattern.
 Turn the resulting mathematical formula into a Sage procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n_P_c_smarter()
\end_layout

\end_inset

, that accepts the two arguments 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

, then determines 
\begin_inset Formula $_{n}P_{c}$
\end_inset

 
\emph on
without
\emph default
 computing 
\begin_inset Formula $n!$
\end_inset

 or 
\begin_inset Formula $c!$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
11.
 Suppose 
\begin_inset Formula $b>1$
\end_inset

 is an integer.
 To write a positive number 
\begin_inset Formula $n$
\end_inset

 in base 
\begin_inset Formula $b$
\end_inset

, we can repeat the following steps:
\end_layout

\begin_deeper
\begin_layout Itemize
Let 
\begin_inset Formula $d=\log_{b}n+1$
\end_inset

; this tells us how many digits the result will have.
\end_layout

\begin_layout Itemize
Let 
\begin_inset Formula $L$
\end_inset

 be an empty list.
\end_layout

\begin_layout Itemize
Repeat 
\begin_inset Formula $d$
\end_inset

 times:
\end_layout

\begin_deeper
\begin_layout Itemize
Let 
\begin_inset Formula $r$
\end_inset

 be the remainder of 
\begin_inset Formula $n$
\end_inset

 when divided by 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\begin_layout Itemize
Subtract 
\begin_inset Formula $r$
\end_inset

 from 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_layout Itemize
Replace 
\begin_inset Formula $n$
\end_inset

 with the value of 
\begin_inset Formula $n$
\end_inset

 when divided by 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\begin_layout Itemize
Append 
\begin_inset Formula $r$
\end_inset

 to 
\begin_inset Formula $L$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Reverse 
\begin_inset Formula $L$
\end_inset

, and return the result.
\end_layout

\begin_layout Standard
Convert this casual list of instructions into formal pseudocode, and translate
 the pseudocode to Sage code.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
12.
 Write a Sage procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
by_degree_then_lc()
\end_layout

\end_inset

 that, when given a polynomial 
\begin_inset Formula $f$
\end_inset

 as input, returns a 2-tuple consisting of the polynomial's degree, followed
 by its leading coefficient.
 We haven't told you the Sage commands for that, but they work as methods
 to a polynomial; you can find it in the following way:
\begin_inset Index idx
status open

\begin_layout Plain Layout
degree@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.degree()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
leading coefficient@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.leading_coefficient()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
polynomial!finding the degree
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
polynomial!finding the the leading coefficient
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = 3*x**2 + x + 1
\end_layout

\begin_layout SageInput
f.
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
<Tab>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\SpecialChar ldots
where 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
<Tab>
\end_layout

\end_inset

 indicates that you should press the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Tab
\end_layout

\end_inset

 key on the keyboard.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tab completion
\end_layout

\end_inset

 Both methods expect the indeterminate as an argument, which is another
 method to a polynomial that you can find in the same fashion.
 Make sure you can use the methods successfully before writing the program.
\end_layout

\begin_layout Standard
Test this procedure thoroughly.
 It should produce the following results:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = 3*x**2 + x + 1
\end_layout

\begin_layout SageInput
by_degree_then_lc(f)
\end_layout

\begin_layout SageOutput
(2, 3)
\end_layout

\begin_layout SageInput
g = 2*t**4 - t**2
\end_layout

\begin_layout SageInput
by_degree_then_lc(g)
\end_layout

\begin_layout SageOutput
(4, 2)
\end_layout

\end_deeper
\begin_layout Standard
Once you have it working, make sure that it sorts the following list of
 polynomials in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
t
\end_layout

\end_inset

 into the correct order.
 Notice that, since we use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
t
\end_layout

\end_inset

 in this list, your procedure cannot assume what the indeterminate is, so
 that should also be an argument to the procedure, though it can default
 to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[ t^2 + t + 1, 2*t - 1, 3*t^2 + 4, -3*t^10 + 1]
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Chapter
Solving equations
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: solving equations"

\end_inset

Up to this point, we've had you solve equations by hand, though it makes
 sense we'd want Sage to solve them for us.
 This chapter looks at the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command and some of its relatives, both on single equations and on systems
 of equations.
 That leads us into matrices, so we look at some of them, as well.
\end_layout

\begin_layout Standard
It is not generally possible to describe the exact solution to every equation
 in 
\begin_inset Quotes eld
\end_inset

purely algebraic
\begin_inset Quotes erd
\end_inset

 terms, by which we mean the use of arithmetic and radicals with rational
 numbers.
 This is generally true even when the equation consists merely of polynomials!
 So even though we focus primarily on methods that find exact solutions,
 Sage also offers methods to compute approximate solutions to equations,
 and we take a brief look at them.
\end_layout

\begin_layout Section*
The basics
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
solve!exact solutions|(
\end_layout

\end_inset

To find the exact solution to an equation or a system of equations, the
 main tool you want is the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="40col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve(
\end_layout

\end_inset


\emph on
eq_or_ineq
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
indet
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "35col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
solves the single equation or inequality 
\emph on
eq_or_ineq
\emph default
 for 
\emph on
indet
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve(
\end_layout

\end_inset


\emph on
eq_or_ineq_list
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
indet_list
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "35col%"
special "none"
height "13ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
solves the collection of equations 
\emph on
eq_or_ineq_list
\emph default
 for the indeterminates listed in the collection 
\emph on
indet_list
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
While 
\emph on
eq_or_ineq
\emph default
 should imply an equation or inequality, from Sage's point of view we can
 use an expression, a function, an equation, or an inequality.
\end_layout

\begin_layout Section*
\noindent

\emph on
One
\emph default
 equation or inequality, for 
\emph on
one
\emph default
 indeterminate
\end_layout

\begin_layout Standard
\noindent
The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command will of course solve basic high-school algebra problems.
\end_layout

\begin_layout Subsection*
Equations
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve(x**2 - 1 == 0, x)
\end_layout

\begin_layout SageOutput
[x == -1, x == 1]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
It is very common to encounter equations with
\begin_inset space ~
\end_inset

0 on one side; the solution to this kind of equation is called a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
root
\end_layout

\end_inset

root
\series default
.
 We don't actually have to specify that an expression equals
\begin_inset space ~
\end_inset

0 when we want to solve for a root; we can simply supply the expression,
 and the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command infers that we want its roots.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve(x**2 - 1, x)
\end_layout

\begin_layout SageOutput
[x == -1, x == 1]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage can also solve equations where all the coefficients are symbolic.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('a b c')
\end_layout

\begin_layout SageOutput
(a, b, c)
\end_layout

\begin_layout SageInput
solve(a*x**2 + b*x + c == 0, x)
\end_layout

\begin_layout SageOutput
[x == -1/2*(b + sqrt(b^2 - 4*a*c))/a, x == -1/2*(b - sqrt(b^2 - 4*a*c))/a]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The polynomial
\emph on
 
\begin_inset Formula $ax^{2}+bc+x$
\end_inset


\emph default
 is called 
\emph on
quadratic
\emph default
 because its degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
degree@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.degree()
\end_layout

\end_inset


\end_layout

\end_inset

 is
\begin_inset space ~
\end_inset

2.
\begin_inset Foot
status open

\begin_layout Plain Layout
\noindent
The degree of a polynomial in a single indeterminate is the largest exponent
 that appears on that indeterminate.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.degree()
\end_layout

\end_inset

 method will report this to you.
\end_layout

\end_inset

 You can make out the quadratic formula in the two answers:
\begin_inset Formula 
\[
x=-\frac{1}{2}\times\frac{b+\sqrt{b^{2}-4ac}}{a}=\frac{-b-\sqrt{b^{2}-4ac}}{2a}
\]

\end_inset

and
\begin_inset Formula 
\[
x=-\frac{1}{2}\times\frac{b-\sqrt{b^{2}-4ac}}{a}=\frac{-b+\sqrt{b^{2}-4ac}}{2a}\quad.
\]

\end_inset

This answer matches the one you learned in school,
\begin_inset Formula 
\[
x=\frac{-b\pm\sqrt{b^{2}-4ac}}{2a}\,.
\]

\end_inset


\end_layout

\begin_layout Standard
In both cases, the result was a list of equations.
 Each equation indicates a value of the indeterminate that will solve the
 equation.
 Because the result is in list form, you can access the solutions using
 brackets,
\begin_inset space ~
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

.
 If you want to manipulate the solutions somehow, it's probably best to
 assign the list to a variable, which we'll usually call by a name like
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sols
\end_layout

\end_inset

, then use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sols[i]
\end_layout

\end_inset

 to access the 
\emph on
i
\emph default
th solution.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sols = solve(x**5 + x**3 + x, x)
\end_layout

\begin_layout SageInput
len(sols)
\end_layout

\begin_layout SageOutput
5
\end_layout

\begin_layout SageInput
sols[0]
\end_layout

\begin_layout SageOutput
x == -sqrt(1/2*I*sqrt(3) - 1/2)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
So 
\begin_inset Formula $x=-\sqrt{i\nicefrac{\sqrt{3}}{2}-\nicefrac{1}{2}}$
\end_inset

 is one of the solutions.
\end_layout

\begin_layout Standard
You will sometimes want just the value of the solution.
 Sage equations offer two useful methods that extract the left- and right-hand
 sides:
\begin_inset Index idx
status open

\begin_layout Plain Layout
equation!left- or right-hand side|see
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.lhs()
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
rhs@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
lhs@.
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
lhs()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
eq_or_ineq
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
right-hand side of 
\emph on
eq_or_ineq
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
eq_or_ineq
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.lhs()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left-hand side of 
\emph on
eq_or_ineq
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Continuing our previous example,
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sols[0].rhs()
\end_layout

\begin_layout SageOutput
-sqrt(1/2*I*sqrt(3) - 1/2)
\end_layout

\end_deeper
\begin_layout Standard
Again because the result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 is in list form, you can also iterate over the list of solutions using
 a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop.
 Here's just one way you might find this useful.
 Let's plot both a polynomial and its roots.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = x^3 - 2*x^2 - 5*x + 6
\end_layout

\begin_layout SageInput
sols = solve(f, x)
\end_layout

\begin_layout SageInput
X = [sol.rhs() for sol in sols]
\end_layout

\begin_layout SageInput
p = plot(f, min(X) - 1, max(X) + 1, color='black', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

thickness=2)
\end_layout

\begin_layout SageInput
for xi in X:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = p + point((xi,0), pointsize=60, color='red', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

zorder=5)
\end_layout

\begin_layout SageInput
p
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/cubic_roots_at_-2_1_3.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
While you should have been able to do this on your own, it involves pulling
 a lot of different ideas together, so let's break down each step.
\end_layout

\begin_layout Itemize
\noindent
First we defined the procedure
\begin_inset space ~
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

, a polynomial of degree
\begin_inset space ~
\end_inset

3.
\end_layout

\begin_layout Itemize
\noindent
We used 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 to find its roots, and stored them in the variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sols
\end_layout

\end_inset

.
 Were you to peek at 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sols
\end_layout

\end_inset

, you would see the following:
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sols
\end_layout

\begin_layout SageOutput
[x == 3, x == -2, x == 1]
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Sage returns solutions in the form of a list of equations, and we want just
 the value of the root.
 To do this, we assigned to a new variable, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

, a list formed using a comprehension.
 The expression 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for sol in sols
\end_layout

\end_inset

 loops over the list stored in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sols
\end_layout

\end_inset

 and stores each value in the variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sol
\end_layout

\end_inset

.
 The expression 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sol.rhs()
\end_layout

\end_inset

 gives us the right-hand side of that value.
 The upshot is that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

 is a list that contains the right-hand side of each solution in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sols
\end_layout

\end_inset

.
 Were you to peek at 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

, you would see the following:
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
X
\end_layout

\begin_layout SageOutput
[3, -2, 1]
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
We defined a graphics object 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p
\end_layout

\end_inset

 as the plot of
\begin_inset space ~
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 over the interval 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
min(X)
\begin_inset space ~
\end_inset

-
\begin_inset space ~
\end_inset

1
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max(X)
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

1
\end_layout

\end_inset

.
 This gives the graph a little room to breathe beyond the roots.
\end_layout

\begin_layout Itemize
We performed a definite loop over the solutions stored in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

.
 The loop stores entry of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
X
\end_layout

\end_inset

 in the loop variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xi
\end_layout

\end_inset

, which Sage uses to add a point to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p
\end_layout

\end_inset

.
 For example, on the first pass through the loop, it assigns 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xi=3
\end_layout

\end_inset

, so it adds the point at 
\begin_inset Formula $\left(3,0\right)$
\end_inset

.
\end_layout

\begin_layout Subsection*
Multiplicities
\end_layout

\begin_layout Standard
Sage expressions also offer a method that 
\emph on
sometimes
\emph default
 provides us with both roots and multiplicities.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
f
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
roots@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
roots()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns the roots of 
\emph on
f
\emph default
, along with their multiplicities
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Multiplicities, you should recall, tell us how many times a root shows up
 in the factorization of a polynomial.
 For instance, the polynomial 
\begin_inset Formula $\left(x-1\right)\left(x+2\right)^{2}\left(x-4\right)^{3}$
\end_inset

 has three roots,
\begin_inset space ~
\end_inset

1,
\begin_inset space ~
\end_inset


\begin_inset Formula $-2$
\end_inset

, and
\begin_inset space ~
\end_inset

4, with respective multiplicities
\begin_inset space ~
\end_inset

1,
\begin_inset space ~
\end_inset

2, and
\begin_inset space ~
\end_inset

3.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = (x - 1)*(x + 2)**2*(x - 4)**3
\end_layout

\begin_layout SageInput
f.roots()
\end_layout

\begin_layout SageOutput
[(-2, 2), (1, 1), (4, 3)]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You see that the result is a list of tuples; each tuple lists the root first,
 and its multiplicity second.
 Multiplicities are important for many reasons; in one of the exercises
 for this chapter, you can examine the area around a polynomial's roots
 and see how multiplicity affects the geometry.
\end_layout

\begin_layout Subsection*
The complex plane
\end_layout

\begin_layout Standard
Many polynomials have roots that include imaginary parts.
 We obviously cannot graph such roots with their functions on the real plane,
 as there is no place on the real plane to include, for instance, the number
 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Standard
Nevertheless, it can be quite instructive to visualize the roots 
\emph on
without
\emph default
 their functions.
 Any complex number has the form 
\begin_inset Formula $a+bi$
\end_inset

, where 
\begin_inset Formula $a$
\end_inset

 is the real part and 
\begin_inset Formula $b$
\end_inset

 is the imaginary part.
 We plot this as the point 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 on the real plane.
 This mapping assigns a unique point on the real plane 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

 to every complex number 
\begin_inset Formula $z\in\mathbb{C}$
\end_inset

, which motivates the name of this model, the 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
complex numbers!complex plane
\end_layout

\end_inset

complex plane
\series default
.
\end_layout

\begin_layout Standard
The following procedure maps a complex number to a point on the real plane.
\begin_inset Index idx
status open

\begin_layout Plain Layout

\size normal
complex numbers!
\size default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
complex_point()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def complex_point(z, *args, **kwds):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return point((real_part(z), imag_part(z)), *args, **kwds)
\end_layout

\begin_layout SageInput
sum(complex_point(sol.rhs(), pointsize=90) 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for sol in solve(x**4 + 4*x + 5, x))
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/quartic_roots_none_real.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
What does this code do?
\end_layout

\begin_layout Itemize
The first two lines define a procedure, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
complex_point()
\end_layout

\end_inset

, whose only required argument is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset

, a complex number.
\end_layout

\begin_deeper
\begin_layout Itemize
It creates a point whose 
\begin_inset Formula $x$
\end_inset

-value is the real part of 
\begin_inset Formula $z$
\end_inset

 and whose 
\begin_inset Formula $y$
\end_inset

-value is the imaginary part of 
\begin_inset Formula $z$
\end_inset

.
\end_layout

\begin_layout Itemize
To avoid restating the required and optional arguments of a point, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
complex_point()
\end_layout

\end_inset

 uses a special trick to accept the required and optional arguments for
 a regular 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

, then ignores them except to pass them on to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
The last lines create a graphic using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset

 command with a comprehension.
\end_layout

\begin_deeper
\begin_layout Itemize
The comprehension loops over the solutions over 
\begin_inset Formula $x^{4}+4x+5$
\end_inset

 , which it finds with the command 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve(x**4 +4*x
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

5, x)
\end_layout

\end_inset

.
 Each solution is stored in the loop variable 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sol
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
The loop sends each value of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sol
\end_layout

\end_inset

 the method 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
rhs@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset


\end_layout

\end_inset

, obtaining in return the right-hand side of the equation Sage uses to describe
 the solution.
 The loop passes that complex number to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
complex_point()
\end_layout

\end_inset

, along with the optional 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

 argument 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pointsize=90
\end_layout

\end_inset

.
 The result is a point in the complex plane, which the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sum()
\end_layout

\end_inset

 command finally combines into the image you see.
\end_layout

\end_deeper
\begin_layout Subsection*
Solving inequalities
\end_layout

\begin_layout Standard
You may recall that inequalities
\begin_inset Index idx
status open

\begin_layout Plain Layout
inequality!solving
\end_layout

\end_inset

 bring complications.
 To start with, there are usually infinitely many solutions which typically
 lie on one or more intervals of the real line.
 These intervals are sometimes bounded, sometimes unbounded.
 For instance,
\end_layout

\begin_layout Itemize
the solution to 
\begin_inset Formula $x^{2}-1\geq0$
\end_inset

 is 
\begin_inset Formula $\left(-\infty,-1\right]\cup\left[1,\infty\right)$
\end_inset

, while
\end_layout

\begin_layout Itemize
the solution to 
\begin_inset Formula $x^{2}-1<0$
\end_inset

 is 
\begin_inset Formula $\left(-1,1\right)$
\end_inset

.
\end_layout

\begin_layout Standard
This complication is reflected in how Sage describes the solutions of an
 inequality.
 The solutions to an inequality are described in 
\emph on
a list of lists
\emph default
.
 Each inner list describes an interval that contains solutions.
 This interval itself contains either one linear inequality, which represents
 an interval unbounded in one direction, or two linear inequalities, which
 represent an interval bounded in both directions.
\end_layout

\begin_layout Standard
For instance, it is not hard to verify by hand that the inequality 
\begin_inset Formula $\left(x-3\right)\left(x-1\right)\left(x+1\right)\left(x+3\right)\geq0$
\end_inset

 has the following solution:
\begin_inset Formula 
\[
\left(-\infty,-3\right]\cup\left[-1,1\right]\cup\left[3,\infty\right),
\]

\end_inset

so that 
\begin_inset Formula $x=-5$
\end_inset

, 
\begin_inset Formula $x=0$
\end_inset

, and 
\begin_inset Formula $x=12$
\end_inset

 are solutions.
 This is easy to diagram on a number line:
\begin_inset Foot
status open

\begin_layout Plain Layout
It should not hurt to think about how you might diagram this in Sage.
 If it does hurt, that probably means your brain is growing, so keep at
 it all the same.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "pic: graph of solutions to inequality"

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/inequality_w_3_sols.pdf
	lyxscale 50
	width 4in
	BoundingBox 0bp 0bp 564bp 71bp
	clip

\end_inset


\end_layout

\begin_layout Standard
\noindent
Based on the description we gave in the previous paragraph, how should you
 expect the solution to look? You know it's a list of lists, so there should
 be several pairs of brackets within one pair of brackets.
 There are three intervals, so there should be three inner lists.
 The outermost intervals are unbounded, so Sage will describe it using only
 one linear inequality; the middle interval is bounded, so Sage will use
 two linear inequalities to describe it.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve((x-3)*(x-1)*(x+1)*(x+3) >= 0, x)
\end_layout

\begin_layout SageOutput
[[x <= -3], [x >= -1, x <= 1], [x >= 3]]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sure enough, Sage describes the leftmost interval using 
\begin_inset Formula $x\leq-3$
\end_inset

; the rightmost using 
\begin_inset Formula $x\geq3$
\end_inset

, and the innermost using two intervals, 
\begin_inset Formula $x\geq-1$
\end_inset

 and 
\begin_inset Formula $x\leq1$
\end_inset

.
 That is also how you should read it, incidentally: 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $x\geq-1$
\end_inset

 and 
\begin_inset Formula $x\leq1$
\end_inset

.
\begin_inset Quotes erd
\end_inset

 This is equivalent to the inequality 
\begin_inset Formula $-1\leq x\leq1$
\end_inset

.
\end_layout

\begin_layout Standard
As the results are lists, you can consider each interval by bracket access
 or iteration.
 The 
\begin_inset Index idx
status open

\begin_layout Plain Layout
rhs@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset

 and 
\begin_inset Index idx
status open

\begin_layout Plain Layout
lhs@.
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
lhs()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.lhs()
\end_layout

\end_inset

 methods will separate the left- and right-hand sides of an inequality just
 as they will for an equation.
\end_layout

\begin_layout Section*
Mistakes or surprises that arise when solving
\end_layout

\begin_layout Standard
Some equations will give a strange result.
 Consider this generic 5th-degree equation:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve(a*x**5 + b*x**4 + c*x**3 + d*x**2 + e*x + f, x)
\end_layout

\begin_layout SageOutput
[0 == a*x^5 + b*x^4 + c*x^3 + d*x^2 + e*x + f]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage seems to be returning the same equation you asked it to solve.
 If this reminds you of the example on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "elliptic integral does not simplify"

\end_inset

 where Sage 
\begin_inset Quotes eld
\end_inset

refused
\begin_inset Quotes erd
\end_inset

 to compute an indefinite integral, congratulations! It is more or less
 the same phenomenon: Sage cannot find a way to express the solution by
 an algebraic expression on the coefficients, except by returning the equation
 itself to you.
 It is well-known that we cannot solve 
\emph on
generic
\emph default
 polynomial equations of degree
\begin_inset space ~
\end_inset

5 or higher in a manner as 
\begin_inset Quotes eld
\end_inset

simple
\begin_inset Quotes erd
\end_inset

 as the quadratic formula.
 This touches on an topic called 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

!solvability by radicals
\end_layout

\end_inset


\emph on
solvability by radicals
\emph default
.
\end_layout

\begin_layout Standard
Remember that, in Sage, an equation uses two equals signs.
 If you forget to use two equals signs when using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command, unpleasant things will occur.
 You Have Been Warned.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textsuperscript{TM}
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
keyword can't be an expression
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
equation!requires two equals signs
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve(2*x + 1 = 3*x - 2, x)
\end_layout

\begin_layout SageError
SyntaxError: keyword can't be an expression
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
solve!exact solutions|)
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Approximate solutions to an equation
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
solve!approximate solutions|(
\end_layout

\end_inset

We saw a moment ago that Sage cannot describe roots for the generic fifth-degree
 polynomial in exact terms.
 This remains true for many specific fifth-degree polynomials, as well.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve(x**5 - 6*x + 4, x)
\end_layout

\begin_layout SageOutput
[0 == x^5 - 6*x + 4]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
So sometimes we have to settle for approximate solutions.
 Another time to opt for an approximate solution is when the exact solution
 is simply too unwieldy to bother dealing with.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve(x**3 + x + 1, x)[0].rhs()
\end_layout

\begin_layout SageOutput
-1/2*(1/18*sqrt(31)*sqrt(3) - 1/2)^(1/3)*(I*sqrt(3) + 1) + 1/6*(-I*sqrt(3)
 + 1)/(1/18*sqrt(31)*sqrt(3) - 1/2)^(1/3)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Ouch.
\end_layout

\begin_layout Standard
To find an approximate solution to an equation, we use something different
 from the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root(
\end_layout

\end_inset


\emph on
eq
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
find_roots@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root(
\end_layout

\end_inset


\emph on
eq
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
find a solution of 
\emph on
eq
\emph default
 on the interval 
\begin_inset Formula $\left(a,b\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
To use this, we need some idea where the root is located, so that you can
 specify 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

.
 Although the term 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

 implies that the equation should have
\begin_inset space ~
\end_inset

0 on one side, this isn't strictly necessary; we can provide an equation
 with non-zero expressions on both sides, and Sage will solve it, all the
 same.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
find_root(x**5 - 6*x == -4, -5, 5)
\end_layout

\begin_layout SageOutput
-1.7000399860584985
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notice that it returns only one root, even when multiple roots exist on
 the same interval.
 When we know multiple roots exist, we can modify the interval accordingly.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
find_root(x**5 - 6*x == -4, 0, 5)
\end_layout

\begin_layout SageOutput
1.3102349335013999
\end_layout

\begin_layout SageInput
find_root(x**5 - 6*x == -4, 0, 1.3)
\end_layout

\begin_layout SageOutput
0.693378264514721
\end_layout

\end_deeper
\begin_layout Standard
Should we specify an interval where the equation has no roots, Sage raises
 an error.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RuntimeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f appears to have no zero on the interval
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
find_root(x**5 - 6*x == -4, 1.3, 5)
\end_layout

\begin_layout SageOutput
RuntimeError: f appears to have no zero on the interval
\end_layout

\end_deeper
\begin_layout Standard
Another approach to try when we're not sure what interval to use is a second
 form of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset

 method, which allows us to specify a ring in which to look for solutions.
 In particular, we can specify which 
\begin_inset Index idx
status open

\begin_layout Plain Layout
ring
\end_layout

\end_inset

ring to look for.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
f
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots(ring=
\end_layout

\end_inset


\emph on
R
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
roots@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
roots()
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
finds the roots of 
\emph on
f
\emph default
 in the ring 
\emph on
R
\emph default
, along with their multiplicities
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
The default ring is 
\begin_inset Formula $\mathbb{Q}$
\end_inset

, the ring of rationals, but we can ask Sage to solve for approximations
 to roots outside the rationals by specifying the real or complex rings;
 in particular, 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset


\end_layout

\end_inset

.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RuntimeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
no explicit roots found
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = x**5 - 6*x + 4
\end_layout

\begin_layout SageInput
f.roots()
\end_layout

\begin_layout SageError
RuntimeError: no explicit roots found
\end_layout

\begin_layout SageInput
f.roots(ring=RR)
\end_layout

\begin_layout SageOutput
[(-1.70003998605850, 1), (0.693378264514721, 1), (1.31023493350140, 1)]
\end_layout

\begin_layout SageInput
f.roots(ring=CC)
\end_layout

\begin_layout SageOutput
[(-1.70003998605850, 1),
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset

(0.693378264514721, 1),
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset

(1.31023493350140, 1),
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset

(-0.151786605978811 - 1.60213970994664*I, 1),
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset

(-0.151786605978811 + 1.60213970994664*I, 1)]
\end_layout

\end_deeper
\begin_layout Standard
The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset

 approach is not always successful, even when 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root()
\end_layout

\end_inset

 is.
 Unless we're particularly attached to finding multiplicities, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root()
\end_layout

\end_inset

 is the method of choice.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Cannot evaluate symbolic expression to a numeric value.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f = sin(x) + x - 1
\end_layout

\begin_layout SageInput
f.roots()
\end_layout

\begin_layout SageError
RuntimeError: no explicit roots found
\end_layout

\begin_layout SageInput
f.roots(ring=RR)
\end_layout

\begin_layout SageError
TypeError: Cannot evaluate symbolic expression to a numeric value.
\end_layout

\begin_layout SageInput
find_root(f, 0, 1)
\end_layout

\begin_layout SageOutput
0.510973429388569
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
solve!approximate solutions|)
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Systems of equations
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
solve!systems of equations|(
\end_layout

\end_inset

Many real-world problems involve more than one variable, and more than one
 relationship between these variables.
 These give rise to equations in several variables; when we attempt to solve
 several at a time, we refer to it as a system
\begin_inset Index idx
status open

\begin_layout Plain Layout
equation!system
\end_layout

\end_inset

 of equations.
 We can use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 to solve a system of equations in Sage; just supply the system in a list
 or tuple, followed by a list or tuple of the polynomials' indeterminates.
 The solution to a system of equations is similar to that of an inequality:
 Sage returns a list of lists.
 Each inner list corresponds to one distinct solution to the equation; it
 contains equations that indicate the solution to each variable in the system.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
solve((x**2 + y == 1, x - y == 1), (x,y))
\end_layout

\begin_layout SageOutput
[[y == -3, x == -2], [y == 0, x == 1]]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This equation has two solutions, corresponding to the points 
\begin_inset Formula $\left(-2,-3\right)$
\end_inset

 and 
\begin_inset Formula $\left(1,0\right)$
\end_inset

.
 We can illustrate the geometric relationship between the curves and these
 points with a graph:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
p = implicit_plot(x**2 + y == 1, (x, -3, 3), (y, -4, 2), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='black')
\end_layout

\begin_layout SageInput
p = p + implicit_plot(x - y == 1, (x, -3, 3), (y, -4, 2), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='blue')
\end_layout

\begin_layout SageInput
p = p + point((1,0), color='red', pointsize=60, zorder=5)
\end_layout

\begin_layout SageInput
p = p + point((-2,-3), color='red', pointsize=60, zorder=5)
\end_layout

\begin_layout SageInput
p
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/intersections_of_parabola_and_line.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
solve!systems of equations|(
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Matrices
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
matrices|(
\end_layout

\end_inset

If the degree of each equation is at most
\begin_inset space ~
\end_inset

1, we call them linear equations.
 So a system of linear equations consists of a set of equations that we
 try to solve simultaneously.
 These are just a special case of systems of equations.
\end_layout

\begin_layout Standard
Intimately related to systems of linear equations are matrices.
 Every system of linear equations
\begin_inset Formula 
\begin{align*}
a_{11}x_{1}+a_{12}x_{2}+\cdots+a_{1n}x_{n} & =b_{1}\\
a_{21}x_{1}+a_{22}x_{2}+\cdots+a_{2n}x_{n} & =b_{2}\\
 & \vdots\\
a_{m1}x_{1}+a_{m2}x_{2}+\cdots+a_{mn}x_{n} & =b_{m}
\end{align*}

\end_inset

corresponds to a 
\begin_inset Quotes eld
\end_inset

matrix equation
\begin_inset Quotes erd
\end_inset


\begin_inset Formula 
\[
\mathbf{Ax}=\mathbf{b}
\]

\end_inset

where
\begin_inset Formula 
\[
\mathbf{A}=\left(\begin{array}{cccc}
a_{11} & a_{12} & \cdots & a_{1n}\\
a_{21} & a_{22} & \cdots & a_{2n}\\
\vdots & \vdots & \ddots & \vdots\\
a_{m1} & a_{m2} & \cdots & a_{mn}
\end{array}\right)\ ,\quad\mathbf{x}=\left(\begin{array}{c}
x_{1}\\
x_{2}\\
\vdots\\
x_{n}
\end{array}\right)\ ,\quad\text{and}\quad\mathbf{b}=\left(\begin{array}{c}
b_{1}\\
b_{2}\\
\vdots\\
b_{m}
\end{array}\right).
\]

\end_inset

The matrices 
\begin_inset Formula $\mathbf{x}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 are special matrices in that they have only one column; we call such matrices
 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
vector
\end_layout

\end_inset

vectors
\series default
.
\end_layout

\begin_layout Standard
We assume you are familiar with the rules of matrix arithmetic, so we do
 not review them here, but if you are still acquiring your 
\begin_inset Quotes eld
\end_inset

sea legs
\begin_inset Quotes erd
\end_inset

 when it comes to matrix arithmetic, we suggest you to think about how the
 rules of matrix multiplication turn 
\begin_inset Formula $\mathbf{Ax}=\mathbf{b}$
\end_inset

 into the system of equations above.
 Matrix analysis is essential to understanding systems of linear equations,
 and since many approaches to non-linear equations involve first transforming
 them to a system of linear equations, matrices hold a fundamental position
 in mathematics.
\end_layout

\begin_layout Subsection*
Creating matrices, accessing elements, and modifying fundamental properties
\end_layout

\begin_layout Standard
You can create a matrix in Sage using the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
matrix
\family typewriter
()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
matrix()
\end_layout

\end_inset

 command.
 There are several ways to do this; we focus on three.
\begin_inset Index idx
status open

\begin_layout Plain Layout
matrices!construction
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
matrix(
\end_layout

\end_inset


\emph on
row_list
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
creates a matrix from 
\emph on
list_of_rows
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
matrix(
\end_layout

\end_inset


\emph on
ring
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
row_list
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
creates a matrix with entries from 
\emph on
ring
\emph default
 using 
\emph on
list_of_rows
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
The reason for the two forms is that Sage considers a matrix's ring when
 deciding how to perform most matrix computations, so it has to know this.
 You use the first form if you're content to let Sage make an educated guess
 at the ring.
 You may find that Sage's choice doesn't work very well for you; in this
 case, you can correct it gently using the convenient 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.change_ring()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
change_ring@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.change_ring()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
base_ring@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.base_ring()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
ring!changing a matrix's base ring
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
matrices!changing the base ring
\end_layout

\end_inset

 method:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.change_ring(
\end_layout

\end_inset


\emph on
ring
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
converts the entries of 
\emph on
M
\emph default
 to reside in 
\emph on
ring
\emph default
 and returns the result
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.base_ring()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
reports the ring Sage thinks 
\emph on
M
\emph default
's elements reside in
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Keep in mind that Sage will not change the matrix itself; it produces a
 
\emph on
new
\emph default
 matrix and returns it.
 The original matrix remains in the old ring.
 We make use of this procedure a bit further down.
\end_layout

\begin_layout Standard
First we illustrate creation of a matrix.
 To specify the matrix
\begin_inset Formula 
\[
M=\left(\begin{array}{cc}
1 & 1\\
0 & 1
\end{array}\right)
\]

\end_inset

we will list each of its rows as a list inside another list:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
M = matrix([ 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[1, 1], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[0, 1] 
\backslash

\end_layout

\begin_layout SageMoreInput
])
\end_layout

\begin_layout SageInput
M
\end_layout

\begin_layout SageOutput
[1 1]
\end_layout

\begin_layout SageOutput
[0 1]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You do not 
\emph on
have
\emph default
 to put each row on its line, but we think that makes it easier to read.
 You can put the entire matrix on one line if you wish.
\end_layout

\begin_layout Standard
It is of course possible to use comprehensions in the definition of a matrix:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
matrix([[i, i+1, i+2] for i in range(3)])
\end_layout

\begin_layout SageOutput
[0 1 2]
\end_layout

\begin_layout SageOutput
[1 2 3]
\end_layout

\begin_layout SageOutput
[2 3 4]
\end_layout

\end_deeper
\begin_layout Standard
Three special matrices you can create are an identity matrix and a diagonal
 matrix.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
identity_matrix()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diagonal_matrix()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zero_matrix()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
matrices!construction
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle" tabularwidth="85col%">
<column alignment="left" valignment="middle" width="30col%">
<column alignment="left" valignment="middle" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
identity_matrix(
\end_layout

\end_inset


\emph on
n
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns the identity matrix of dimension 
\begin_inset Formula $n$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diagonal_matrix(
\end_layout

\end_inset


\emph on
entries
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "10ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns a matrix with
\begin_inset space ~
\end_inset

0 everywhere except the main diagonal, and the values of entries on the
 main diagonal
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
zero_matrix(
\end_layout

\end_inset


\emph on
m
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
n
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns an 
\begin_inset Formula $m\times n$
\end_inset

 matrix of zeroes
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Again, you can use a list comprehension to create lists of entries for matrices.
 We demonstrate this for a diagonal matrix:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
diagonal_matrix([i**2 for i in range(3)])
\end_layout

\begin_layout SageOutput
[0 0 0]
\end_layout

\begin_layout SageOutput
[0 1 0]
\end_layout

\begin_layout SageOutput
[0 0 4]
\end_layout

\end_deeper
\begin_layout Standard
You access elements of a matrix using the bracket operator; to access element
 
\begin_inset Formula $M_{i,j}$
\end_inset

 use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
M[i,j]
\end_layout

\end_inset

.
 Here, 
\begin_inset Quotes eld
\end_inset

access
\begin_inset Quotes erd
\end_inset

 does not mean merely 
\begin_inset Quotes eld
\end_inset

read;
\begin_inset Quotes erd
\end_inset

 it also means 
\begin_inset Quotes eld
\end_inset

write,
\begin_inset Quotes erd
\end_inset

 so you can modify the entries of a matrix in convenient fashion.
 Keep in mind that, as with lists, the first row starts at position
\begin_inset space ~
\end_inset

0, not position
\begin_inset space ~
\end_inset

1, so you'll have to take that into account.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
M[0,1] = 3
\end_layout

\begin_layout SageInput
M
\end_layout

\begin_layout SageOutput
[1 3]
\end_layout

\begin_layout SageOutput
[0 1]
\end_layout

\end_deeper
\begin_layout Standard
This ability to modify a matrix's elements means that Sage considers a matrix
 mutable, just like a list.
 There are occasions where you will want to work with an immutable matrix.
 For instance, you can only store 
\begin_inset Index idx
status open

\begin_layout Plain Layout
set!elements must be immutable
\end_layout

\end_inset

immutable objects in a set, so if you want a set of matrices, you have to
 indicate to Sage that you have no intention of changing the matrices in
 question.
 You can do this using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.set_immutable()
\end_layout

\end_inset

 method.
\begin_inset Index idx
status open

\begin_layout Plain Layout
matrices!mutability
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Index idx
status open

\begin_layout Plain Layout
is_mutable@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.is_mutable()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
set_immutable@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.set_immutable()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
is_immutable@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.is_immutable()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.set_immutable()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
makes an object immutable
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.is_mutable()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if the object is mutable
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.is_immutable()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if the object is immutable
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
The command works one way only; to make a matrix mutable again, make a copy
 of it with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
copy()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
copy()
\end_layout

\end_inset


\end_layout

\end_inset

 command.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
mutable matrices are unhashable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
copy(
\end_layout

\end_inset


\emph on
obj
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns a copy of the object 
\emph on
obj
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
{ M }
\end_layout

\begin_layout SageError
TypeError: mutable matrices are unhashable
\end_layout

\begin_layout SageInput
M.set_immutable()
\end_layout

\begin_layout SageInput
M.is_mutable()
\end_layout

\begin_layout SageOutput
False
\end_layout

\begin_layout SageInput
{ M }
\end_layout

\begin_layout SageOutput
{[1 3]
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset

[0 1]}
\end_layout

\begin_layout SageInput
M = copy(M)
\end_layout

\begin_layout SageInput
M.is_mutable()
\end_layout

\begin_layout SageOutput
True
\end_layout

\end_deeper
\begin_layout Standard
Matrices are not the only objects Sage can copy or make immutable, so these
 commands have a wider applicability.
\end_layout

\begin_layout Subsection*
Matrix arithmetic and manipulation
\end_layout

\begin_layout Standard
You can perform matrix arithmetic in Sage using the customary mathematical
 symbols.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
N = matrix([ 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[1, x], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[0, 1]])
\end_layout

\begin_layout SageInput
M * N
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1 x + 3]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage also offers an enormous number of methods you can send a matrix.
 We list only a few of them in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab: matrix messages"

\end_inset

.
 To see them all, remember that you can always discover the methods an object
 will understand by typing its identifier, followed by the period, then
 pressing the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Tab
\end_layout

\end_inset

 key.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tab completion
\end_layout

\end_inset

 As for the methods we list here, don't worry if you don't understand the
 purpose of each one, but each of them should at some point prove useful
 in undergraduate study.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="2">
<features tabularvalignment="middle" tabularwidth="95col%">
<column alignment="left" valignment="top" width="45col%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.add_multiple_of_row(
\end_layout

\end_inset


\emph on
j
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
i
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
c
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
adds 
\emph on
c
\emph default
 times each entry of row 
\emph on
i
\emph default
 to the corresponding entry of row 
\emph on
j
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.characteristic_polynomial()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns 
\emph on
M
\emph default
's characteristic polynomial
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.determinant()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns 
\emph on
M
\emph default
's determinant
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.dimensions()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns a tuple 
\begin_inset Formula $\left(m,n\right)$
\end_inset

 where 
\begin_inset Formula $m$
\end_inset

 is the number of rows and 
\begin_inset Formula $n$
\end_inset

 the number of columns
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.echelon_form()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns the echelon form of 
\emph on
M
\emph default
 while leaving the matrix itself in its original form
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.echelonize()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
transforms 
\emph on
M
\emph default
 into echelon form; returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
None
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.eigenvalues()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns 
\emph on
M
\emph default
's eigenvalues
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.eigenvectors_right()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns 
\emph on
M
\emph default
's eigenvectors
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.inverse()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns 
\emph on
M
\emph default
's inverse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.kernel()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns the kernel of
\emph on
 M
\emph default
 (to access the basis vectors of a kernel 
\emph on
K
\emph default
 use 
\emph on
K
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.basis()
\end_layout

\end_inset

)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.ncols()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns the number of columns in 
\emph on
M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.nrows()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns the number of rows in 
\emph on
M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.nullity()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns the kernel's dimension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rank()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns 
\emph on
M
\emph default
's rank
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.set_row_to_multiple_of_row(
\end_layout

\end_inset


\emph on
j
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
i
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
c
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
sets each element of row 
\emph on
j
\emph default
 to the product of 
\emph on
c
\emph default
 and the
\emph on
 
\emph default
corresponding entry of row 
\emph on
i
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.swap_rows(
\end_layout

\end_inset


\emph on
i
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
j
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
swaps rows 
\emph on
i
\emph default
 and 
\emph on
j
\emph default
 of 
\emph on
M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.submatrix(
\end_layout

\end_inset


\emph on
i
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
j
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
k
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\begin_inset Formula $\ell$
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "7ex"
height_special "none"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
returns the 
\begin_inset Formula $k\times\ell$
\end_inset

 submatrix of 
\begin_inset Formula $M$
\end_inset

 whose top left corner is in row 
\begin_inset Formula $i$
\end_inset

, column 
\begin_inset Formula $j$
\end_inset

 of 
\begin_inset Formula $M$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
M
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.transpose()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns the transpose of 
\emph on
M
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab: matrix messages"

\end_inset

methods understood by a Sage matrix
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's look at how some of these commands might work, as well as highlight
 some of the errors that may occur.
 For an example, let's suppose we're interested in transforming a matrix
 to upper-triangular form, and also in seeing some of the computations that
 occur along the way.
 So we'll perform this computation step-by-step rather than looking for
 a particular Sage command that does it all at once.
 Our example matrix will be
\begin_inset Formula 
\[
A=\left(\begin{array}{cccc}
1 & 2 & 3 & 4\\
0 & 2 & 2 & 3\\
8 & 3 & 1 & 2\\
0 & 1 & 2 & 3
\end{array}\right).
\]

\end_inset

We leave it to you to set up a matrix for 
\begin_inset Formula $A$
\end_inset

 in Sage.
 To transform it to upper-triangular form, we observe that 
\begin_inset Formula $A_{0,0}$
\end_inset

 is already
\begin_inset space ~
\end_inset

1, while both 
\begin_inset Formula $A_{1,0}$
\end_inset

 and 
\begin_inset Formula $A_{3,0}$
\end_inset

 are
\begin_inset space ~
\end_inset

0, so we need do nothing to them.
 As 
\begin_inset Formula $A_{2,0}=8\neq0$
\end_inset

, we want to add a multiple of row
\begin_inset space ~
\end_inset

1 that eliminates the
\begin_inset space ~
\end_inset

8; this is fairly straightforward:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
A.add_multiple_of_row(2, 0, -8)
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

4]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset

-13
\begin_inset space ~
\end_inset

-23
\begin_inset space ~
\end_inset

-30]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We proceed to the second column.
 We observe that 
\begin_inset Formula $A_{1,1}=2\neq1$
\end_inset

, so we must divide the row by
\begin_inset space ~
\end_inset

2.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!Multiplying row by Rational Field element@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Multiplying row by Rational Field element cannot be done over Integer Ring,
 use change_ring or \SpecialChar ldots

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
A.set_row_to_multiple_of_row(1, 1, 1/2)
\end_layout

\begin_layout SageError
TypeError: Multiplying row by Rational Field element cannot be done over
 Integer Ring, use change_ring or with_row_set_to_multiple_of_row instead.
\end_layout

\end_deeper
\begin_layout Standard
\align center

\size huge
\color red
PANIC!
\end_layout

\begin_layout Standard
\noindent
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset

\SpecialChar ldots
well, no, don't.
 Sure, we received an error, but this one is quite helpful.
 It makes it perfectly clear that the problem is that Sage sees 
\begin_inset Formula $A$
\end_inset

 as lying over the ring 
\begin_inset Formula $\mathbb{Z}$
\end_inset

.
 Integers can't be fractions, and if we multiply the second row by
\begin_inset space ~
\end_inset


\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

, we get 
\begin_inset Formula $\nicefrac{3}{2}$
\end_inset

 in the last spot.
 We need 
\begin_inset Formula $A$
\end_inset

 to lie over the rational 
\emph on
field
\emph default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
rational numbers!rational field
\end_layout

\end_inset


\begin_inset Formula $\mathbb{Q}$
\end_inset

, not over the integer 
\emph on
ring
\emph default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZZ
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
integers!integer ring
\end_layout

\end_inset


\begin_inset Formula $\mathbb{Z}$
\end_inset

.
 Very well; we've already discussed how to change the ring of a matrix,
 so let's do that.
 There's no need to keep the old matrix 
\emph on
A
\emph default
, so we'll assign the result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.change_ring()
\end_layout

\end_inset

 to 
\begin_inset Formula $A$
\end_inset

.
 Recall that Sage's symbol for the ring of rational numbers is 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
QQ
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
QQ
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
A = A.change_ring(QQ)
\end_layout

\begin_layout SageInput
A.set_row_to_multiple_of_row(1, 1, 1/2)
\end_layout

\begin_layout SageInput
A
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

4]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset

3/2]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0 -13 -23 -30]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Excellent! We can now clear out 
\begin_inset Formula $A_{2,1}$
\end_inset

 and 
\begin_inset Formula $A_{3,1}$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
A.add_multiple_of_row(2, 1, 13)
\end_layout

\begin_layout SageInput
A.add_multiple_of_row(3, 1, -1)
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

2
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

4]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3/2]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-10
\begin_inset space ~
\end_inset

-21/2]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3/2]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
From here you should be able to complete the process on your own, ending
 up with the matrix
\begin_inset Formula 
\[
\left(\begin{array}{cccc}
1 & 2 & 3 & 4\\
 & 1 & 1 & \frac{1}{2}\\
 &  & 1 & \frac{21}{20}\\
 &  &  & \frac{9}{20}
\end{array}\right).
\]

\end_inset

(Empty entries represent
\begin_inset space ~
\end_inset

0.)
\end_layout

\begin_layout Subsection*
We transform ourselves
\end_layout

\begin_layout Standard
One application of matrices involves the use of 
\series bold
transformation matrices
\series default
 in computer graphics.
 We discuss three kinds of transformation matrices:
\end_layout

\begin_layout Itemize
A scaling matrix has the form
\begin_inset Formula 
\[
\sigma=\left(\begin{array}{cc}
s & 0\\
0 & s
\end{array}\right).
\]

\end_inset

It has the effect of rescaling a point 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 to the point 
\begin_inset Formula $\left(sx,sy\right)$
\end_inset

.
\end_layout

\begin_layout Itemize
A rotation matrix has the form
\begin_inset Formula 
\[
\rho=\left(\begin{array}{cc}
\cos\alpha & -\sin\alpha\\
\sin\alpha & \cos\alpha
\end{array}\right).
\]

\end_inset

It has the effect of rotating a point 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 about the origin through an angle 
\begin_inset Formula $\alpha$
\end_inset

.
\end_layout

\begin_layout Itemize
A reflection matrix has the form
\begin_inset Formula 
\[
\varphi=\left(\begin{array}{cc}
\cos\beta & \sin\beta\\
\sin\beta & -\cos\beta
\end{array}\right).
\]

\end_inset

It has the effect of reflecting a point 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 across the line through the origin whose slope is 
\begin_inset Formula $\nicefrac{1-\cos\beta}{\sin\beta}$
\end_inset

.
\end_layout

\begin_layout Standard
We'll illustrate each of these, introducing as well the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
vector
\end_layout

\end_inset

 object in Sage.
\begin_inset Index idx
status open

\begin_layout Plain Layout
vector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We already mentioned vectors earlier; it is basically a matrix with only
 one column.
 A vector is similar to a Sage tuple or list in that it contains an ordered
 sequence of numbers.
 It differs from a Sage tuple in that we associate it with certain mathematical
 operations.
 What we care about most here is that you can multiply an 
\begin_inset Formula $m\times n$
\end_inset

 matrix to an 
\begin_inset Formula $n\times1$
\end_inset

 vector; the result is an 
\begin_inset Formula $m\times1$
\end_inset

 vector.
 Typically we use square matrices, and the result of multiplying an 
\begin_inset Formula $n\times n$
\end_inset

 matrix to an 
\begin_inset Formula $n\times1$
\end_inset

 vector is another 
\begin_inset Formula $n\times1$
\end_inset

 vector, which is convenient for repeated application.
\end_layout

\begin_layout Standard
Sage conveniently allows us to use vectors as points in plotting commands,
 such as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset

.
 This makes it easy to illustrate how the transformation matrices work.
 To do this, we'll work on a polygon defined by the following points, 
\emph on
in this order:
\emph default

\begin_inset Formula 
\[
\left(1,0\right),\quad\left(\cos\frac{4\pi}{5},\sin\frac{4\pi}{5}\right),\quad\left(\cos\frac{8\pi}{5},\sin\frac{8\pi}{5}\right),\quad\left(\cos\frac{2\pi}{5},\sin\frac{2\pi}{5}\right),\quad\left(\cos\frac{6\pi}{5},\sin\frac{6\pi}{5}\right)\ .
\]

\end_inset

Define a list 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
V
\end_layout

\end_inset

 whose elements are the vectors with these values.
 Plot the polygon defined by these points and you will see an almost-nice,
 five-pointed star:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/star_basic.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
(If you're getting a pentagon instead of a star, make sure the points are
 in the order above.
 If not, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.pop()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.insert()
\end_layout

\end_inset

 until they are.) We say 
\begin_inset Quotes eld
\end_inset

almost-nice
\begin_inset Quotes erd
\end_inset

 because it's a little off-kilter.
 Wouldn't it be nice
\begin_inset Foot
status open

\begin_layout Plain Layout
If you're one of those wackos who thinks this star is just fine the way
 it is, and it would better to rotate the axes instead, well! You have a
 future in mathematics.
 If you're not one of those wackos, and think it's better to rotate the
 star\SpecialChar ldots
 yeah, you might have a future in mathematics, too.
 But we're keeping an extra eye on you, just to make sure you don't get
 out of line.
 Sort of like this star here.
\end_layout

\end_inset

 to have it point upwards?
\end_layout

\begin_layout Standard

\series bold
We can fix this.
 We have the technology.
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
Shamelessreference@Shameless reference to 
\size normal

\begin_inset CommandInset href
LatexCommand href
name "The Six Million Dollar Man"
target "http://en.wikipedia.org/wiki/The Six Million Dollar Man"
literal "false"

\end_inset

 which today's students will never, ever catch
\end_layout

\end_inset

 How shall we go about it? We could rotate it by 
\begin_inset Formula $\nicefrac{1}{20}$
\end_inset

 of a full rotation, or by 
\begin_inset Formula $2\pi/20$
\end_inset

, or by 
\begin_inset Formula $\pi/10$
\end_inset

.
 Up above, we claimed that the rotation matrix would accomplish this, if
 only we set 
\begin_inset Formula $\alpha=\pi/10$
\end_inset

.
 Let's try that.
 We'll create a corresponding rotation matrix 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
M
\end_layout

\end_inset

, then use that to create a new list, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
U
\end_layout

\end_inset

, whose points are the 
\emph on
rotations
\emph default
 of the points of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
V
\end_layout

\end_inset

 by 
\begin_inset Formula $\pi/10$
\end_inset

.
 Creating 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
U
\end_layout

\end_inset

 is easy with a list comprehension:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
M = matrix([[cos(pi/10), -sin(pi/10)], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[sin(pi/10), cos(pi/10)]])
\end_layout

\begin_layout SageInput
U = [M*v for v in V]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Now plot the polygon formed by 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
U
\end_layout

\end_inset

 to verify that we have, in fact, righted our star:
\begin_inset Foot
status open

\begin_layout Plain Layout
Or rather,
\size normal
 if you believe the previous footnote, we have
\size default
 
\size normal
\emph on
wronged
\emph default
 our polygon.
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
polygon(U)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/star_rotated_upside_up.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
How about reflection? If we look at the original star, we could reflect
 it about the 
\begin_inset Formula $y$
\end_inset

-axis, which has slope\SpecialChar ldots

\end_layout

\begin_layout Standard
Hmm.
 Well, now, 
\emph on
that's
\emph default
 annoying.
 The 
\begin_inset Formula $y$
\end_inset

-axis has undefined slope.
 We generally get undefined slope by dividing by
\begin_inset space ~
\end_inset

0.
 The denominator of the slope for the reflection matrix is 
\begin_inset Formula $\sin\beta$
\end_inset

, so if we have 
\begin_inset Formula $\sin\beta=0$
\end_inset

, we should end up reflecting about the 
\begin_inset Formula $y$
\end_inset

-axis.
 That works for 
\begin_inset Formula $\beta=0$
\end_inset

 and 
\begin_inset Formula $\beta=\pi$
\end_inset

; we'll try the first and hope for the best.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
N = matrix([[cos(0), sin(0)], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[sin(0), -cos(0)]])
\end_layout

\begin_layout SageInput
W = [N*v for v in V]
\end_layout

\begin_layout SageInput
polygon(W)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/star_basic.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Well, 
\emph on
that's
\emph default
 annoying.
 It didn't flip at all!
\end_layout

\begin_layout Standard
Actually, it did flip; we just can't see it.
 First off, the slope actually become 
\begin_inset Formula $\nicefrac{1-\cos0}{\sin0}=\nicefrac{1-1}{0}=\nicefrac{0}{0}$
\end_inset

; for a vertical slope, we need 
\emph on
non
\emph default
-zero divided by zero.
 A glance at 
\begin_inset Formula $N$
\end_inset

 reinforces this:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
N
\end_layout

\begin_layout SageOutput
[ 1 0]
\end_layout

\begin_layout SageOutput
[ 0 -1]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you think about how matrix multiplication works, the effect of 
\begin_inset Formula $N$
\end_inset

 on any vector will be to preserve the 
\begin_inset Formula $x$
\end_inset

 value and reverse the 
\begin_inset Formula $y$
\end_inset

 value.
 So we ended up with a vertical flip, rather than a horizontal flip.
 Looks as if we want to use 
\begin_inset Formula $\beta=\pi$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
N = matrix([[cos(pi), sin(pi)], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[sin(pi), -cos(pi)]])
\end_layout

\begin_layout SageInput
W = [N*v for v in V]
\end_layout

\begin_layout SageInput
polygon(W)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/star_flipped_y_axis.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Great!
\end_layout

\begin_layout Standard
For a reflection matrix, points along the axis of reflection remain fixed:
 if we were to apply the 
\emph on
corrected
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
N
\end_layout

\end_inset

 to the vector 
\begin_inset Formula $\left(0,2\right)$
\end_inset

, it would return the vector 
\begin_inset Formula $\left(0,2\right)$
\end_inset

.
 This is a special case of what we call an 
\emph on

\begin_inset Index idx
status open

\begin_layout Plain Layout
eigenvector
\end_layout

\end_inset

eigenvector
\emph default
, a vector that remains on the same line after multiplication by a matrix.
 Every matrix has its own eigenvectors, and we can 
\begin_inset Quotes eld
\end_inset

discover
\begin_inset Quotes erd
\end_inset

 them using the method 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.eigenvectors_right()
\end_layout

\end_inset

.
 In this case:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
N.eigenvectors_right()
\end_layout

\begin_layout SageOutput
[(-1, [(1, 0)], 1), (1, [(0, 1)], 1)]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's a lot of information, so let's see what it's telling us.
\end_layout

\begin_layout Standard
The list contains one tuple per eigenvector.
 Each tuple contains three items:
\end_layout

\begin_layout Itemize
First, it gives us what's called an 
\emph on
eigenvalue
\begin_inset Index idx
status open

\begin_layout Plain Layout
eigenvalue
\end_layout

\end_inset


\emph default
.
 Eigenvalues tell you how the 
\emph on
size
\emph default
 of the vector changes; it will still lie on the same line through the origin,
 but the size will change.
 The basic relationship between a matrix 
\begin_inset Formula $M$
\end_inset

, an eigenvector 
\begin_inset Formula $\mathbf{e}$
\end_inset

, and the corresponding eigenvalue 
\begin_inset Formula $\lambda$
\end_inset

 is that 
\begin_inset Formula $M\mathbf{e}=\lambda\mathbf{e}$
\end_inset

.
 You can also extract a matrix's eigenvalues using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.eigenvalues()
\end_layout

\end_inset

 method.
\end_layout

\begin_layout Itemize
Second, it gives a list of eigenvectors that correspond to that eigenvalue.
 In most cases, you would expect to see only one eigenvector per eigenvalue,
 but it can happen that you get more than one.
\end_layout

\begin_layout Itemize
Finally, it gives the 
\emph on
multiplicity
\emph default
 of the eigenvalue.
 This relates to the following idea: eigenvalues are the roots 
\begin_inset Formula $\lambda_{1}$
\end_inset

, 
\begin_inset Formula $\lambda_{2}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $\lambda_{m}$
\end_inset

 of a polynomial called the matrix's 
\emph on
minimal polynomial
\emph default
.
 This polynomial factors linearly as 
\begin_inset Formula $\left(x-\lambda_{1}\right)^{a_{1}}\left(x-\lambda_{2}\right)^{a_{2}}\cdots\left(x-\lambda_{m}\right)^{a_{m}}$
\end_inset

.
 Each power of a distinct linear factor is the corresponding eigenvalue's
 multiplicity.
 We are not interested in this for the current application.
\end_layout

\begin_layout Standard
You typically hope for the eigenvectors 
\begin_inset Formula $\mathbf{e}_{1}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $\mathbf{e}_{m}$
\end_inset

 to be 
\series bold
linearly independent
\begin_inset Index idx
status open

\begin_layout Plain Layout
linear independence
\end_layout

\end_inset


\series default
; that is, the only way to write
\begin_inset Formula 
\[
a_{1}\mathbf{e}_{1}+\cdots+a_{m}\mathbf{e}_{m}=0
\]

\end_inset

is if 
\begin_inset Formula $a_{1}=\cdots=a_{m}=0$
\end_inset

.
 We can see this in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
N
\end_layout

\end_inset

's eigenvectors, since
\begin_inset Formula 
\[
a_{1}\left(\begin{array}{c}
1\\
0
\end{array}\right)+a_{2}\left(\begin{array}{c}
0\\
1
\end{array}\right)=0\quad\Rightarrow\quad\left(\begin{array}{c}
a_{1}\\
a_{2}
\end{array}\right)=0\quad\Rightarrow\quad a_{1}=0,\ a_{2}=0.
\]

\end_inset

Unfortunately, not every matrix of dimension 
\begin_inset Formula $n$
\end_inset

 has 
\begin_inset Formula $n$
\end_inset

 distinct eigenvalues; if you look at the scaling matrix
\begin_inset Formula 
\[
S=\left(\begin{array}{cc}
3 & 0\\
0 & 3
\end{array}\right),
\]

\end_inset

you will find that it has only one eigenvalue of multiplicity
\begin_inset space ~
\end_inset

2, because it treats every point exactly the same way.
\end_layout

\begin_layout Standard
As we mentioned, each eigenvector remains on the same line through the origin
 when we apply the matrix to it.
 In terms of points, this means the eigenvectors define a line of points
 that may move around on that line, either by reversing direction or by
 changing in size, but the points remain on the same line through the origin.
 In the case of the reflection matrix 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
N
\end_layout

\end_inset

, the eigenvectors are 
\begin_inset Formula $\left(1,0\right)^{T}$
\end_inset

, which lies on the 
\begin_inset Formula $x$
\end_inset

-axis, and 
\begin_inset Formula $\left(0,1\right)^{T}$
\end_inset

, which lies on the 
\begin_inset Formula $y$
\end_inset

-axis.
 The eigenvalue for 
\begin_inset Formula $\left(1,0\right)^{T}$
\end_inset

 is 
\begin_inset Formula $-1$
\end_inset

; this means that 
\begin_inset Formula $\left(1,0\right)$
\end_inset

 moves to 
\begin_inset Formula $\left(-1,0\right)$
\end_inset

, which still lies on the 
\begin_inset Formula $x$
\end_inset

-axis.
 The eigenvalue for 
\begin_inset Formula $\left(0,1\right)^{T}$
\end_inset

 is
\begin_inset space ~
\end_inset

1; this means that 
\begin_inset Formula $\left(0,1\right)$
\end_inset

 moves to 
\begin_inset Formula $\left(0,1\right)$
\end_inset

, which still lies on the 
\begin_inset Formula $y$
\end_inset

-axis.
 This isn't true for points on other lines through the origin; the point
 
\begin_inset Formula $\left(3,5\right)$
\end_inset

, for instance, moves to the point 
\begin_inset Formula $\left(-3,5\right)$
\end_inset

, which lies on a completely different line through the origin.
 Of course, 
\emph on
we expect that
\emph default
 because 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
N
\end_layout

\end_inset

 is a reflection matrix.
\end_layout

\begin_layout Standard
To conclude this investigation, let's consider a different matrix,
\begin_inset Formula 
\[
M=\left(\begin{array}{cc}
3 & 1\\
2 & 2
\end{array}\right).
\]

\end_inset

Use Sage to verify that its eigenvectors are
\begin_inset Formula 
\[
\left(\begin{array}{c}
1\\
1
\end{array}\right)\quad\textrm{and}\quad\left(\begin{array}{r}
1\\
-2
\end{array}\right),
\]

\end_inset

with corresponding eigenvalues 4 and 1.
 This means that we expect points on the same line as 
\begin_inset Formula $\left(1,1\right)^{T}$
\end_inset

 to remain on that line, but to be rescaled by a factor of
\begin_inset space ~
\end_inset

4, while points on the same line as 
\begin_inset Formula $\left(1,-2\right)^{T}$
\end_inset

 will remain in the same place:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/solving_equations_graphics/eigenvector_demonstration.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
As you might imagine, things get a little strange with a rotation matrix,
 because it moves every point in the plane 
\emph on
except
\emph default
 the origin to a different line through the origin.
 In this case, you would find its eigenvectors to have complex values.
 Try it!
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
matrices|)
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Sage has features to find both exact and approximate solutions to equations.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 Sage can find the exact solution to any equation, so the main reason to
 approximate solutions is that they're easier to look at.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command finds both exact and approximate solutions to an equation.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset

 method is not as successful as the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root()
\end_layout

\end_inset

 command, even when we specify a ring of approximations to numbers, like
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RR
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
CC
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 A root's multiplicity is unrelated to the geometry of the curve.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 The results of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command are in a similar format for inequalities and systems of equations.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 Sage sometimes decides how to solve a problem based on the ring in which
 its values lie.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 You must always specify the ring of a matrix when creating it.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 You can extract eigenvalues from the results of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
eigenvectors_right()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
eigenvectors_left()
\end_layout

\end_inset

 commands.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 Eigenvalues are of merely theoretical importance.
\end_layout

\begin_layout Subsection*
Multiple choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Which of the following commands and methods does 
\emph on
not
\emph default
 produce exact solutions 
\emph on
by default?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.eigenvalues()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 The result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 when given one equation in one variable is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 the value of an approximate solution
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a list of lists of solutions and multiplicities
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a list of linear equations that describe the solutions
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a list of lists of linear equations, each of which describes a solution
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 The result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 when given several equations in more than one variable is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 the value of an approximate solution
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a list of lists of solutions and multiplicities
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a list of linear equations that describe the solutions
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a list of lists of linear equations, each of which describes a solution
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
4.
 The result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root()
\end_layout

\end_inset

 when given an equation in one variable is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 the value of the approximate solution
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a list of lists of solutions and multiplicities
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a list of linear equations that describe the solutions
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a list of lists of linear equations, each of which describes a solution
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
5.
 The result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset

 when applied to an equation in one variable is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 the value of the approximate solution
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a list of lists of solutions and multiplicities
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a list of linear equations that describe the solutions
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a list of lists of linear equations, each of which describes a solution
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
6.
 Which of the following commands and methods requires you to specify the
 endpoints of an interval that contains a solution?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
find_root()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 none of the above
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
7.
 Which of the following methods to a matrix returns its eigenvalues?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
eigenvalues()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
eigenvectors_right()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 all of the above
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 none of the above
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
8.
 The vectors 
\begin_inset Formula $\mathbf{v}_{1}$
\end_inset

, 
\begin_inset Formula $\mathbf{v}_{2}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $\mathbf{v}_{n}$
\end_inset

 are linearly independent when:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 We can find a matrix 
\begin_inset Formula $M$
\end_inset

 whose eigenvectors are 
\begin_inset Formula $\mathbf{v}_{1},\mathbf{v}_{2},\ldots,\mathbf{v}_{n}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 The set 
\begin_inset Formula $\left\{ \mathbf{v}_{1},\mathbf{v}_{2},\ldots,\mathbf{v}_{n}\right\} $
\end_inset

 defines a vector space.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 The only way 
\begin_inset Formula $a_{1}\mathbf{v}_{1}+a_{2}\mathbf{v}_{2}+\cdots+a_{n}\mathbf{v}_{n}=0$
\end_inset

 is if 
\begin_inset Formula $a_{1}=a_{2}=\cdots=a_{n}=0$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Vectors declare their independence from a vector space and create their
 own subspace.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
9.
 Why should we expect a reflection matrix to have two linearly independent
 eigenvectors?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Every two-dimensional matrix has two linearly independent eigenvectors.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 A reflection always moves 
\emph on
one
\emph default
 point to a 
\emph on
second
\emph default
 point, and that's how we count the number of linearly independent eigenvectors.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 A reflection is like a mirror, so we ought to expect the second eigenvector
 to mirror the first.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The points of two lines through the origin remain on those lines: the axis
 of symmetry, and the line perpendicular to it.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 Why do we expect the eigenvalues of a rotation matrix to have complex values?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 A rotation matrix moves points on the real plane to points on the complex
 plane, and vice-versa.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 The only point on the real plane that remains on the same line through
 the origin is the origin itself.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Eigenvalues are always complex; we just don't notice that when their values
 are real.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Complex problems require complex solutions.
\end_layout

\end_deeper
\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 to find the solutions to generic degree-three and degree-four polynomial
 equations.
 How many are there? (Don't count by hand! Use Sage to count the solutions!)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command does not return the solutions to a single equation in one variable
 by order of the complex norm.
 Write a procedure that accepts an equation as an argument, calls 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 to solve it, then sorts the solutions using the norm.
 
\emph on
Hint:
\emph default
 You may want to use or adapt the key procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
by_norm()
\end_layout

\end_inset

 that we defined on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "sage fn: by_norm(z)"

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Write a procedure that accepts an inequality as its argument, solves it,
 then produces a graph of its solutions on the number line, similar to the
 one on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "pic: graph of solutions to inequality"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9. (m)
5.
\begin_inset space ~
\end_inset

(a) Write pseudocode for a procedure that accepts two functions 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

, solves for their intersections, then computes the total area between 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

.
 (We find the total area by adding the absolute value of the integrals for
 each interval defined by intersections of 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9. (m)
\begin_inset Phantom HPhantom
status open

\begin_layout Plain Layout
5.
\end_layout

\end_inset


\begin_inset space ~
\end_inset

(b) Implement your pseudocode as a Sage procedure that uses the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
roots()
\end_layout

\end_inset

 command to find exact solutions in 
\begin_inset Formula $\mathbb{R}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9. (m)
\begin_inset Phantom HPhantom
status open

\begin_layout Plain Layout
5.
\end_layout

\end_inset


\begin_inset space ~
\end_inset

(c) Write an interactive procedure that allows the user to specify the functions
 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

, as well as a color.
 It then calls the Sage code you wrote in part (b) to determine the total
 area between 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

, graphs 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 in black with thickness
\begin_inset space ~
\end_inset

2, fills the area between them using the user-specified color, and finally
 writes the area above the curves.
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 We used the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.roots()
\end_layout

\end_inset

 method to find the roots 
\emph on
and
\emph default
 multiplicities of
\begin_inset Formula 
\[
f\left(x\right)=\left(x-1\right)\left(x+2\right)^{2}\left(x-4\right)^{3}.
\]

\end_inset

Create a graph of 
\begin_inset Formula $f$
\end_inset

 on an interval that includes all three roots, but is not so large as to
 lose the details of how 
\begin_inset Formula $f$
\end_inset

 meanders around them.
 Make this plot black, of thickness
\begin_inset space ~
\end_inset

1.
 Add to it three other plots of 
\begin_inset Formula $f$
\end_inset

, each of whose minimum and maximum 
\begin_inset Formula $x$
\end_inset

 values are in the neighborhood of a different root.
 Make these plots red, of thickness
\begin_inset space ~
\end_inset

3.
 Now that you have this plot, describe a geometric similarity between a
 root of multiplicity 
\begin_inset Formula $m$
\end_inset

 and the graph of 
\begin_inset Formula $x^{m}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 While Sage has an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot()
\end_layout

\end_inset

 command, it lacks an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_diff()
\end_layout

\end_inset

 command to perform implicit differentiation.
 (You may want to review the definition of implicit differentiation in your
 calculus book.) Write a procedure to do this, implementing the following
 steps:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Move everything in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 to one side of the equation.
 Make sure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 is a function in terms of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Define 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
yf
\end_layout

\end_inset

 as an implicit function of 
\begin_inset Formula $x$
\end_inset

 using the command, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
yf=function('yf')(x)
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Replace 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

 in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 by 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
yf
\end_layout

\end_inset

.
 
\emph on
Hint:
\emph default
 If you defined 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 as a function in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

, then it's a matter of redefining 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 as a function of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
yf
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Let 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df
\end_layout

\end_inset

 be the derivative of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(e) Solve 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df
\end_layout

\end_inset

 for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
diff(yf)
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(f) Return the solution — not the list of equations, mind, but the right-hand
 side.
 For instance, the result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_diff(y==cos(x*y))
\end_layout

\end_inset

 should be 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
-sin(x*yf(x))*yf(x)/(x*sin(x*yf(x)) + 1)
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Chapter
Decision-making
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: decision making"

\end_inset

As mentioned earlier, one of the fundamental questions of mathematics is,
\end_layout

\begin_layout Standard
\align center

\emph on
How can we find a root
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In case you've forgotten, a 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

 is a value of an expression that, when substituted into the expression,
 yields 0.
\end_layout

\end_inset


\emph on
 of a polynomial?
\end_layout

\begin_layout Standard
\noindent
As that is more or less impractical in many cases, we turn to the related
 question,
\end_layout

\begin_layout Standard
\align center

\emph on
How can we approximate a root of a polynomial?
\end_layout

\begin_layout Standard
\noindent
There are a number of ways to do this, but we will describe a way to 
\begin_inset Quotes eld
\end_inset

approximate
\begin_inset Quotes erd
\end_inset

 the root 
\begin_inset Quotes eld
\end_inset

exactly.
\begin_inset Quotes erd
\end_inset

 That is not really the contradiction it may seem, as our approximation
 consists of a precise interval 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 of rational numbers in which the polynomial has at least one root.
 So the value will be an approximation, insofar as we're not sure 
\emph on
which
\emph default
 
\begin_inset Formula $c\in\left(a,b\right)$
\end_inset

 is the root, but it's an 
\emph on
exact
\emph default
 approximation, in that the solution is free from all error.
\begin_inset Foot
status open

\begin_layout Plain Layout
By contrast, floating point answers are an accurate approximation, rather
 than an exact approximation, in that floating point gives us 
\emph on
one
\emph default
 number which is slightly wrong.
\end_layout

\end_inset

 As a bonus, the technique we'll look at will:
\end_layout

\begin_layout Itemize
work for any continuous function, not just polynomials; and
\end_layout

\begin_layout Itemize
on rare occasions,
\begin_inset Foot
status open

\begin_layout Plain Layout
Very rare, but they do exist.
\end_layout

\end_inset

 give us the exact value!
\end_layout

\begin_layout Standard
This technique is the 
\emph on
method of bisection
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
method of bisection
\end_layout

\end_inset

, and it's based on a big-time fact from Calculus:
\end_layout

\begin_layout Named Theorem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
The Intermediate Value Theorem
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
theorems!Intermediate Value Theorem
\end_layout

\end_inset

If a function 
\begin_inset Formula $f$
\end_inset

 is continuous on the interval 
\begin_inset Formula $\left[a,b\right]$
\end_inset

, then for any 
\begin_inset Formula $y$
\end_inset

-value between 
\begin_inset Formula $f\left(a\right)$
\end_inset

 and 
\begin_inset Formula $f\left(b\right)$
\end_inset

, we can find a 
\begin_inset Formula $c\in\left(a,b\right)$
\end_inset

 such that 
\begin_inset Formula $f\left(c\right)$
\end_inset

 is that 
\begin_inset Formula $y$
\end_inset

-value.
\end_layout

\begin_layout Standard
For instance, 
\begin_inset Formula $f\left(x\right)=\cos x$
\end_inset

 is continuous everywhere, so it's certainly continuous on the interval
 
\begin_inset Formula $\left[\nicefrac{\pi}{6},\nicefrac{\pi}{3}\right]$
\end_inset

.
 Now, 
\begin_inset Formula $f\left(\nicefrac{\pi}{6}\right)=\nicefrac{\sqrt{3}}{2}$
\end_inset

, while 
\begin_inset Formula $f\left(\nicefrac{\pi}{3}\right)=\nicefrac{1}{2}$
\end_inset

, and 
\begin_inset Formula $\nicefrac{\sqrt{2}}{2}$
\end_inset

 lies between 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

 and 
\begin_inset Formula $\nicefrac{\sqrt{3}}{2}$
\end_inset

, so there must be some 
\begin_inset Formula $c\in\left[\nicefrac{\pi}{6},\nicefrac{\pi}{3}\right]$
\end_inset

 such that 
\begin_inset Formula $f\left(c\right)=\nicefrac{\sqrt{2}}{2}$
\end_inset

.
\end_layout

\begin_layout Section*
The method of bisection
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
method of bisection
\end_layout

\end_inset

Our example with 
\begin_inset Formula $\cos x$
\end_inset

 won't seem impressive; after all, you already knew that 
\begin_inset Formula $f\left(\nicefrac{\pi}{4}\right)=\nicefrac{\sqrt{2}}{2}$
\end_inset

.
 Fair enough, but consider this scenario:
\end_layout

\begin_layout Itemize
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\end_layout

\end_inset

if
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $f\left(a\right)$
\end_inset

 is positive and
\end_layout

\begin_layout Itemize
\begin_inset Formula $f\left(b\right)$
\end_inset

 is negative
\end_layout

\end_deeper
\begin_layout Itemize
then
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $0$
\end_inset

 lies between 
\begin_inset Formula $f\left(a\right)$
\end_inset

 and 
\begin_inset Formula $f\left(b\right)$
\end_inset

, so
\end_layout

\begin_layout Itemize
a root 
\begin_inset Formula $c$
\end_inset

 must lie between 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/decision_making_graphics/root_of_cosx-x_large_interval.pdf
	lyxscale 50
	height 1.5in

\end_inset


\begin_inset Graphics
	filename graphics/decision_making_graphics/root_of_cosx-x_second_interval.pdf
	lyxscale 50
	height 1.5in

\end_inset


\begin_inset Graphics
	filename graphics/decision_making_graphics/root_of_cosx-x_third_interval.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: Method of bisection"

\end_inset

The Method of Bisection employs the Intermediate Value Theorem to narrow
 the interval containing a root from 
\begin_inset Formula $\left(0,1\right)$
\end_inset

 down to 
\begin_inset Formula $\left(\nicefrac{1}{2},\nicefrac{3}{4}\right)$
\end_inset

\SpecialChar ldots
 and further!
\end_layout

\end_inset


\end_layout

\end_inset

For example, suppose we want to identify the root of
\begin_inset Formula 
\[
f\left(x\right)=\cos x-x.
\]

\end_inset

If you plot it in Sage, the graph suggests a root lies between 
\begin_inset Formula $x=0$
\end_inset

 and 
\begin_inset Formula $x=1$
\end_inset

.
 But can we trust the graph? Indeed we can; as you learned in Calculus,
\end_layout

\begin_layout Itemize
\begin_inset Formula $\cos x$
\end_inset

 is continuous;
\end_layout

\begin_layout Itemize
\begin_inset Formula $x$
\end_inset

 is a polynomial, and all polynomials are continuous; and
\end_layout

\begin_layout Itemize
sums, differences, and products of continuous functions are continuous.
\end_layout

\begin_layout Standard
So 
\begin_inset Formula $f$
\end_inset

 is continuous, and the Intermediate Value Theorem confirms the visual inspectio
n.
\end_layout

\begin_layout Standard
Of course, knowing there's a root between
\begin_inset space ~
\end_inset

0 and
\begin_inset space ~
\end_inset

1 doesn't exactly build much confidence.
 We'd like to locate this root more accurately than that.
 
\emph on
How?
\end_layout

\begin_layout Standard
In the Method of Bisection, we cut the interval 
\begin_inset Formula $\left[a,b\right]$
\end_inset

 into two parts.
 In this case, we cut it into 
\begin_inset Formula $\left[0,\nicefrac{1}{2}\right]$
\end_inset

 and 
\begin_inset Formula $\left[\nicefrac{1}{2},1\right]$
\end_inset

.We then test the new endpoint in the function: 
\begin_inset Formula $f\left(\nicefrac{1}{2}\right)>0$
\end_inset

.
 We already knew 
\begin_inset Formula $f\left(0\right)>0$
\end_inset

, so the Intermediate Value Theorem cannot guarantee that a root lies between
 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

.
 On the other hand, 
\begin_inset Formula $f\left(1\right)<0$
\end_inset

; since 
\begin_inset Formula $0$
\end_inset

 lies between 
\begin_inset Formula $f\left(\nicefrac{1}{2}\right)$
\end_inset

 and 
\begin_inset Formula $f\left(1\right)$
\end_inset

 , the Intermediate Value Theorem does guarantee that a root lies between
 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

 and
\begin_inset space ~
\end_inset

1.
 So we replace 
\begin_inset Formula $\left[0,1\right]$
\end_inset

 by 
\begin_inset Formula $\left[\nicefrac{1}{2},1\right]$
\end_inset

.
\end_layout

\begin_layout Standard
An interval of size 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

 is still not terribly impressive, but there's no reason we can't keep going.
 Cut the interval into two parts again, 
\begin_inset Formula $\left[\nicefrac{1}{2},\nicefrac{3}{4}\right]$
\end_inset

 and 
\begin_inset Formula $\left[\nicefrac{3}{4},1\right]$
\end_inset

.
 The new endpoint satisfies 
\begin_inset Formula $f\left(\nicefrac{3}{4}\right)<0$
\end_inset

, so the root must lie between 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

 and 
\begin_inset Formula $\nicefrac{3}{4}$
\end_inset

.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: Method of bisection"

\end_inset

 illustrates each of these first three steps in the process.
\end_layout

\begin_layout Standard
We can persist in this as long as we like.
 Each time, the uncertainty decreases by 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

, so repeating this 20 times gives us an interval of width 
\begin_inset Formula $\nicefrac{1}{2^{20}}\approx1.0\times10^{-6}$
\end_inset

, or 
\begin_inset Formula $0.000001$
\end_inset

.
 That's a little rough to do by hand, but it's straightforward for a computer
 to repeat; we've already seen how to do that.
\end_layout

\begin_layout Standard
But how should we tell the computer to decide which endpoint to replace
 by the midpoint? Enter the 
\series bold
if
\series default
/
\series bold
else if
\series default
/
\series bold
else
\series default
 control structure:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
if
\series default
 
\emph on
condition1
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
what to do if condition1 is true
\end_layout

\begin_layout Pseudocode

\series bold
else if
\series default
 
\emph on
condition2
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
what to do if condition2 is true
\end_layout

\begin_layout Pseudocode
\SpecialChar ldots

\end_layout

\begin_layout Pseudocode

\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
what to do if neither condition is true
\end_layout

\begin_layout Standard
\noindent
This directs the execution based on the listed conditions, allowing the
 computation to proceed in a manner appropriate to the situation.
\end_layout

\begin_layout Standard
Not all parts of the structure are necessary.
 Only an 
\series bold
if
\series default
 
\emph on
must
\emph default
 appear; after all, 
\series bold
else
\series default
 makes no sense without an 
\series bold
if
\series default
.
 But you can make sense of an 
\series bold
if
\series default
 that lacks an 
\series bold
else
\series default
; this is often useful if a particular value needs some extra 
\begin_inset Quotes eld
\end_inset

massaging
\begin_inset Quotes erd
\end_inset

 before the algorithm can proceed.
\end_layout

\begin_layout Standard
In our case, we want the algorithm to replace the endpoint with the same
 sign as the midpoint.
 That implies the following pseudocode:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Method_of_Bisection
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a,b\in\mathbb{R}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

, a function such that:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

 is continuous on 
\begin_inset Formula $\left[a,b\right]$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $f\left(a\right)$
\end_inset

 and 
\begin_inset Formula $f\left(b\right)$
\end_inset

 have opposite signs
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

, the number of bisections to perform
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\left[c,d\right]\subseteq\left[a,b\right]$
\end_inset

 such that
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $d-c=\nicefrac{1}{2^{n}}\left(b-a\right)$
\end_inset

, and
\end_layout

\begin_layout Itemize
a root of 
\begin_inset Formula $f$
\end_inset

 lies in 
\begin_inset Formula $\left[c,d\right]$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $c=a$
\end_inset

 and 
\begin_inset Formula $d=b$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
repeat
\series default
 
\begin_inset Formula $n$
\end_inset

 times
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $e=\nicefrac{1}{2}\left(c+d\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $f\left(c\right)$
\end_inset

 
\series bold
and
\series default
 
\begin_inset Formula $f\left(e\right)$
\end_inset

 have the same sign
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $c$
\end_inset

 by 
\begin_inset Formula $e$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $d$
\end_inset

 by 
\begin_inset Formula $e$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $\left[c,d\right]$
\end_inset


\end_layout

\begin_layout Standard
\noindent
Unfortunately, this is not yet enough to implement in Sage, as one question
 remains:
\end_layout

\begin_layout Standard
\noindent
\align center

\emph on
How do we decide whether 
\begin_inset Formula $f\left(c\right)$
\end_inset

 and 
\begin_inset Formula $f\left(e\right)$
\end_inset

 have the same sign?
\end_layout

\begin_layout Standard
\noindent
We consider two ways.
\end_layout

\begin_layout Standard
A clever way that you may have thought of is based on the pre-algebra observatio
n that two real numbers have the same sign if and only if their product
 is positive:
\begin_inset Formula 
\[
\left(-2\right)\times\left(-2\right)>0\quad\textrm{and}\quad2\times2>0\qquad\textrm{but}\qquad\left(-2\right)\times2<0\quad\textrm{and}\quad2\times\left(-2\right)<0.
\]

\end_inset

So we can replace the test
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $f\left(c\right)$
\end_inset

 
\series bold
and
\series default
 
\begin_inset Formula $f\left(e\right)$
\end_inset

 have the same sign
\end_layout

\begin_layout Standard
\noindent
with
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $f\left(c\right)f\left(e\right)>0$
\end_inset


\end_layout

\begin_layout Standard
\noindent
and be done with it.
 This is fairly easy to implement as Sage code, as Sage offers keywords
 that match our pseudocode almost identically:
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
elif
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset


\end_layout

\end_inset

 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
elif
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

.
 As you might expect, the commands you want Sage to execute in each case
 should appear beneath them, indented.
 So our pseudocode translates as follows.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def method_of_bisection(a, b, n, f, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c, d = a, b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute midpoint, then compare
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e = (c + d)/2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if f(c)*f(e) > 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return (c, d)
\end_layout

\end_deeper
\begin_layout Standard
\noindent

\emph on
Notice the colons!
\emph default
 If you accidentally forget one of the colons, Python will raise an error.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invalid syntax
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if f(c)*f(e) > 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\SpecialChar ldots

\end_layout

\begin_layout SageError
SyntaxError: invalid syntax
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Once you've typed it in correctly, let's check that this works.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
method_of_bisection(0, 1, 20, cos(x) - x)
\end_layout

\begin_layout SageOutput
(387493/524288, 774987/1048576)
\end_layout

\end_deeper
\begin_layout Standard
But there is still a more excellent way.
\end_layout

\begin_layout Section*
Boolean logic
\end_layout

\begin_layout Standard
Until now we've used the Sage identifiers 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 without much comment; after all, their meanings are fairly obvious unless
 you have reassigned them.
 Yet these two ideas lie at the foundation of most practical computation.
 A field called Boolean logic considers the logical ways we can perform
 from the two basic concepts of 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 and 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
Notice the distinction between Sage identifiers of terms with fixed meaning
 (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

) and the fundamental constants of Boolean logic (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 and 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Four 
\begin_inset Quotes eld
\end_inset

fundamental
\begin_inset Quotes erd
\end_inset

 operations
\end_layout

\begin_layout Standard
The four fundamental operations of Boolean logic are the operators 
\series bold
or
\series default
, 
\series bold
and
\series default
, 
\series bold
xor
\series default
,
\begin_inset Foot
status open

\begin_layout Plain Layout
Shorthand for 
\series bold
\size normal
exclusive or
\series default
, which name derives from the fact that, in general, you can 
\emph on
either
\emph default
 cut the cake 
\emph on
or
\emph default
 have it, 
\emph on
but not both.

\emph default
 Phrased slightly different, you can have 
\emph on
exclusively
\emph default
 one option 
\emph on
or
\emph default
 the other.
\end_layout

\begin_layout Plain Layout

\size normal
How does this differ from regular old 
\series bold
or
\series default
? The rule does not apply on birthdays, as you can cut your cake 
\series bold
or
\series default
 have it 
\series bold
or
\series default
 both.
 (Complaining that your parents didn't buy enough gifts is also an option,
 but let's not get carried away.) Since you 
\emph on
can
\emph default
 have both, regular old 
\series bold
or
\series default
 is considered an 
\begin_inset Quotes eld
\end_inset

inclusive
\begin_inset Quotes erd
\end_inset

 or.
\end_layout

\begin_layout Plain Layout
You might wonder why we shorten 
\series bold
exclusive or
\series default
 to 
\series bold
xor
\series default
.
 This is because computer scientists, especially computer engineers, are
 violently allergic to writing any word that is more than three or four
 letters long.
 (
\begin_inset CommandInset href
LatexCommand href
name "Really."
target "https://en.wikipedia.org/wiki/Motorola_6800#Example_code"
literal "false"

\end_inset

 You 
\begin_inset CommandInset href
LatexCommand href
name "think"
target "https://en.wikipedia.org/wiki/Intel_8086#Example_code"
literal "false"

\end_inset

 I'm 
\begin_inset CommandInset href
LatexCommand href
name "making"
target "https://en.wikipedia.org/wiki/MOS_Technology_6502#Example_code"
literal "false"

\end_inset

 this 
\begin_inset CommandInset href
LatexCommand href
name "up"
target "https://en.wikipedia.org/wiki/Zilog_Z80#Example_code"
literal "false"

\end_inset

? — Well, okay, we're exaggerating a little, but only a little.)
\end_layout

\end_inset

 and 
\series bold
not
\series default
.
\begin_inset Foot
status open

\begin_layout Plain Layout
This is an example of the outright mendacity we promised in the preface.
 As promised, it sounds a lot better than the truth.
 The lie consists in calling the operations 
\begin_inset Quotes eld
\end_inset

fundamental,
\begin_inset Quotes erd
\end_inset

 for the list contains at least one redundant operation, making at least
 one of them 
\emph on
not
\emph default
 
\begin_inset Quotes eld
\end_inset

fundamental.
\begin_inset Quotes erd
\end_inset

 In particular, we can rewrite 
\emph on
a
\series bold
\emph default

\begin_inset space ~
\end_inset

xor
\series default
\emph on

\begin_inset space ~
\end_inset

b
\emph default
 as [
\emph on
a
\emph default

\begin_inset space ~
\end_inset


\series bold
and
\begin_inset space ~
\end_inset

(not
\series default

\begin_inset space ~
\end_inset


\emph on
b
\emph default
)] 
\series bold
or
\series default
 [(
\series bold
not
\series default
\emph on

\begin_inset space ~
\end_inset

a
\emph default
)
\begin_inset space ~
\end_inset


\series bold
and
\series default

\begin_inset space ~
\end_inset


\emph on
b
\emph default
].
 So we can already reduce the list to 
\series bold
or
\series default
, 
\series bold
and
\series default
, and 
\series bold
not
\series default
.
\end_layout

\begin_layout Plain Layout
But that's not all! We can also rewrite 
\emph on
a
\emph default

\begin_inset space ~
\end_inset


\series bold
and
\series default

\begin_inset space ~
\end_inset


\emph on
b
\emph default
 as 
\series bold
not 
\series default
[(
\series bold
not
\series default

\begin_inset space ~
\end_inset


\emph on
a
\emph default
)
\begin_inset space ~
\end_inset


\series bold
or
\begin_inset space ~
\end_inset


\series default
(
\series bold
not
\series default

\begin_inset space ~
\end_inset


\emph on
b
\emph default
)].
 (This latter fact is known as DeMorgan's Laws.) So we can actually reduce
 the list of logical operations to 
\series bold
or
\series default
 and 
\series bold
not
\series default
.
 While it is fitting that the number of fundamental operations on two objects
 (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 and 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

) should number two (
\series bold
not
\series default
 and 
\series bold
or
\series default
), no one in his right mind does this.
 It is much better just to lie to you and tell you all four operations are
 
\begin_inset Quotes eld
\end_inset

fundamental.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

 They are governed by the following 
\begin_inset Quotes eld
\end_inset

truth
\begin_inset Quotes erd
\end_inset

 tables, which indicate how variables with the values 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 or 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 behave under the given operations.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
not
\series default
 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $y$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset

 
\series bold
or
\series default
 
\begin_inset Formula $y$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $y$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset

 
\series bold
and
\series default
 
\begin_inset Formula $y$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $y$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x$
\end_inset

 
\series bold
xor
\series default
 
\begin_inset Formula $y$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Having made the meanings of these terms precise, we hasten to point out
 that they really ought to be intuitive to you; the only real difference
 between the precise meanings and your intuitive understandings appears
 in 
\series bold
or
\series default
 and 
\series bold
xor
\series default
.
 We generally will not find 
\series bold
xor
\series default
 necessary in this text, but it does have its uses.
\end_layout

\begin_layout Subsection*
Boolean operators in Sage
\end_layout

\begin_layout Standard
\noindent
These concepts all translate immediately into Sage: 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

, 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
not
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
or
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
and
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xor
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
With their help, we can now rewrite our Sage code with Boolean logic instead
 of a mathematical trick.
 Checking that two real numbers 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $e$
\end_inset

 have the same sign is a matter of testing that
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode
(
\emph on

\begin_inset Formula $f\left(c\right)>0$
\end_inset


\emph default
 
\series bold
and 
\begin_inset Formula $f\left(e\right)>0$
\end_inset


\series default
) 
\series bold
or (
\begin_inset Formula $f\left(c\right)<0$
\end_inset

 and
\series default
 
\begin_inset Formula $f\left(e\right)<0$
\end_inset

)
\end_layout

\begin_layout Standard
\noindent
and this translates directly into the Sage code
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
(f(c) > 0 and f(e) > 0) or (f(c) < 0 and f(e) < 0)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You may be wondering if the parentheses are actually needed here.
 
\emph on
In this case, no,
\emph default
 because Sage always tests 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
and
\end_layout

\end_inset

 before it tests 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
or
\end_layout

\end_inset

.
 In general, however, it is a good practice to indicate explicitly the order
 of operations, as it matters a great deal whether you mean
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
False and False or True
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
False and (False or True)
\end_layout

\begin_layout SageOutput
False
\end_layout

\begin_layout SageInput
(False and False) or True
\end_layout

\begin_layout SageOutput
True
\end_layout

\end_deeper
\begin_layout Standard
\noindent

\emph on
Be sure you understand why we get those results.
\end_layout

\begin_layout Standard
We can now state a different Sage code for the Method of Bisection.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def method_of_bisection(a, b, n, f, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c, d = a, b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute midpoint, then compare
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e = (c + d)/2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (f(c) > 0 and f(e) > 0) or (f(c) < 0 and f(e) < 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return (c, d)
\end_layout

\end_deeper
\begin_layout Subsection*
Another Boolean relation, and a caution on using it
\end_layout

\begin_layout Standard
Until now, we've relied on the Boolean relations 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
==
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
<
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
>
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
<=
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
>=
\end_layout

\end_inset

.
 You may have noticed that we did not list an operator for inequality.
 Technically, we can translate the pseudocode
\end_layout

\begin_layout Pseudocode
\begin_inset Formula $a\neq b$
\end_inset


\end_layout

\begin_layout Standard
\noindent
as
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
not (a == b)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
but that isn't very elegant.
 Sage offers us a different symbol in these circumstances, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
!=
\end_layout

\end_inset

, which 
\emph on
sort of
\emph default
 looks like a sloppy way of slashing through an equals sign, then dropping
 some ink.
\end_layout

\begin_layout Standard
Both equality and inequality can be dangerous when performing comparisons.
 Exact numbers are no problem, but if your value has floating point, then
 the computer might mistakenly think two numbers are different when they
 are not.
 For example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
14035706228479900.
 - 14035706228479899.99 != 0
\end_layout

\begin_layout SageOutput
False
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's a very odd conclusion to make, for which we can thank the rounding
 of floating point numbers.
 On the other hand, recall from p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "sage: result from eulers method"

\end_inset

 the result of Euler's Method, which we concluded was
\begin_inset space ~
\end_inset

8.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
8 - 7.99999999999999 != 0
\end_layout

\begin_layout SageOutput
True
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Imagine an algorithm that terminates only if it has actually computed
\begin_inset space ~
\end_inset

0.
 We probably 
\emph on
do
\emph default
 have equality here, but the computer doesn't detect it yet (if at all).
\end_layout

\begin_layout Standard
The solution in cases like this is to test that the difference between the
 values is sufficiently small, rather than whether they are equal.
 For instance, if lying within ten decimal digits suffices, the following
 test would fix the previous one.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
8 - 7.99999999999999 > 10**(-10)
\end_layout

\begin_layout SageOutput
False
\end_layout

\end_deeper
\begin_layout Section*
Breaking a loop
\end_layout

\begin_layout Standard
There will be occasions when there's no point to continuing a loop.
 One example would occur if we applied the Method of Bisection to a function
 whose root is a rational number with a power of
\begin_inset space ~
\end_inset

2 in the denominator.
 For example, 
\begin_inset Formula $f\left(x\right)=4x+3$
\end_inset

 has a root at 
\begin_inset Formula $x=\nicefrac{-3}{4}$
\end_inset

.
 Even if you ask the Method of Bisection to repeat 20 times, in all likelihood
 it will finish far, far earlier.
 Suppose, for instance, that we start on the interval 
\begin_inset Formula $\left(-1,1\right)$
\end_inset

.
 The first bisection gives us the interval 
\begin_inset Formula $\left(-1,\nicefrac{-1}{2}\right)$
\end_inset

, while the second gives us the interval 
\begin_inset Formula $\left(-1,\nicefrac{-3}{4}\right)$
\end_inset

.
 At this point we've already found a root 
\begin_inset Formula $f\left(\nicefrac{-3}{4}\right)=0$
\end_inset

, so we really ought to quit, but the algorithm doesn't include a way to
 test this.
 Instead, it continues on for
\begin_inset space ~
\end_inset

18 more iterations, concluding with the unwieldy-looking 
\begin_inset Formula $\left(\nicefrac{-393217}{524288},\nicefrac{-3}{4}\right)$
\end_inset

.
\end_layout

\begin_layout Standard
A better approach would be to re-formulate the loop so that it stops the
 moment it finds a root.
 Testing for this is straightforward in Sage, but how do we tell it to stop
 the loop? One way would be to place a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset

 statement in the loop, but that's not a good idea if an algorithm is looking
 for a value so that it can then perform some computation with it 
\emph on
before
\emph default
 returning.
\end_layout

\begin_layout Standard
This is where the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset

 keyword
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\end_layout

\end_inset

 comes in.
 A 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset

 statement tells Sage to stop the current loop, and proceed from the first
 statement outside the loop's indented block.
 A 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset

 applies only once, so if the loop is nested inside another loop, Sage will
 not break out of it.
\end_layout

\begin_layout Standard
We can now reformulate our 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
method_of_bisection()
\end_layout

\end_inset

 procedure as follows.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def method_of_bisection(a, b, n, f, x=x):
\begin_inset CommandInset label
LatexCommand label
name "page: method_of_bisection with break"

\end_inset


\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c, d = a, b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute midpoint, then compare
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e = (c + d)/2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (f(c) > 0 and f(e) > 0) or (f(c) < 0 and f(e) < 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif f(e) == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

break
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return (c, d)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This time, when the code computes 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
e == -3/4
\end_layout

\end_inset

, it determines that
\end_layout

\begin_layout Itemize
the condition for the first 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 statement is false, as neither 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(e) > 0
\end_layout

\end_inset

 nor 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(e) < 0
\end_layout

\end_inset

; but
\end_layout

\begin_layout Itemize
the condition for the second 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 statement is true, as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(e) == 0
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
So the code should assign 
\begin_inset Formula $-\nicefrac{3}{4}$
\end_inset

 to both 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
c
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

, then execute the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset

 statement.
 The first statement outside the loop's indented block is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return (c, d)
\end_layout

\end_inset

, so the code will return the tuple 
\begin_inset Formula $\left(-\nicefrac{3}{4},-\nicefrac{3}{4}\right)$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
method_of_bisection(-1, 1, 20, 4*x + 3)
\end_layout

\begin_layout SageOutput
(-3/4, -3/4)
\end_layout

\end_deeper
\begin_layout Section*
Exceptions
\end_layout

\begin_layout Standard
Exceptions are one of the newer concepts in computer programming, and they
 are related to decision-making, if only because they can replace 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 statements in many situations.
 We discuss this here briefly.
\end_layout

\begin_layout Standard
Suppose you have an algorithm that needs to divide:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode
let 
\begin_inset Formula $c=n/d$
\end_inset


\end_layout

\begin_layout Standard
\noindent
For instance, you have a division algorithm for some mathematical objects.
 This innocuous statement masks a mathematical danger: what if 
\begin_inset Formula $d=0$
\end_inset

?
\end_layout

\begin_layout Standard
We could of course guard the statement with an 
\series bold
if
\series default
/
\series bold
else
\series default
 sentinel:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
if
\series default
 
\begin_inset Formula $d\neq0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $c=n/d$
\end_inset


\end_layout

\begin_layout Pseudocode

\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
do something smart about the case 
\begin_inset Formula $d=0$
\end_inset

 — scold the user, say
\end_layout

\begin_layout Standard
\noindent
Of course, the code may contain other variables with their own potentials
 for dangerous values, leading to the following ugly-looking code:
\end_layout

\begin_layout Pseudocode

\series bold
if
\series default
 
\emph on
condition1
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
condition2
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
condition3
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
condition4
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else if
\series default
 
\emph on
condition5
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else if
\series default
 
\emph on
condition6
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Standard
\noindent
This is not merely ugly, it is hard to read.
 Computer scientists have a technical name for it: the Pyramid of Doom.
\begin_inset Foot
status open

\begin_layout Plain Layout
Honest, 
\begin_inset CommandInset href
LatexCommand href
name "I am not making this up"
target "https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)"
literal "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In pseudocode, we try to list the problems before they occur, by specifying
 in the 
\series bold
inputs
\series default
 section that, for instance, 
\begin_inset Formula $d\neq0$
\end_inset

.
 For instance, pseudocode that expects to take a derivative at an arbitrary
 point would probably state something like this:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

, a function that is differentiable everywhere on the real line
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
but we don't do it all the time, especially when it should be obvious from
 the algorithm's purpose.
 After all, it's pseudocode, which is supposed to be readable.
 If we specified every constraint, the 
\series bold
inputs
\series default
 section would become a tedious recitation of pedantries.
 Mathematicians often rely on a reader's intuition.
\end_layout

\begin_layout Standard
We don't have this outlet in actual program code, so we adopt a different
 approach, called exception handling.
 Exception handling relies on what we call a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 block.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset


\end_layout

\end_inset

 As the name suggests, it 
\emph on
tries
\emph default
 a block of code which is indented beneath the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 statement, and if an error occurs, it applies a different block of code
 that appears beneath an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 statement.
 Both 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset


\end_layout

\end_inset

 and 
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 are keywords, so you cannot use them as identifiers.
\end_layout

\begin_layout Standard
The precise usage is as follows:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
try:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

first_try_statement
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

second_try_statement
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
except ExceptionList:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

first_exception_statement
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

second_exception_statement
\end_layout

\end_deeper
\begin_layout Standard
\noindent
When Sage encounters such a block of code, it tries 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
first_try_statement
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
second_try_statement
\end_layout

\end_inset

, \SpecialChar ldots
 .
 If it can perform all the tasks listed under the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 statement, it skips over the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 block entirely, and continues on.
\end_layout

\begin_layout Standard
However, if Sage encounters some error, it compares it to the exceptions
 listed in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ExceptionList
\end_layout

\end_inset

.
 If one of them matches, it performs 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
first_exception_statement
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
second_exception_statement
\end_layout

\end_inset

, and so forth, to completion — unless it encounters another error.
 In that case, Sage gives up and passes the error back to the client.
\begin_inset Foot
status open

\begin_layout Plain Layout
If you don't know the type of an error, or you want to process all possible
 errors with the same code, or if you're feeling particularly lazy, it is
 actually possible to catch 
\emph on
all
\emph default
 errors by omitting the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ExceptionType
\end_layout

\end_inset

.
 The authors of this text feel particularly lazy most of the time, but for
 pedagogical reasons we think it better to avoid this.
\end_layout

\begin_layout Plain Layout
You may sometimes wish to process information that comes back from the exception.
 In this case, you can use the construct
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
except ExceptionType as e:
\end_layout

\end_deeper
\begin_layout Plain Layout
\noindent
and then look at the details of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
e
\end_layout

\end_inset

.
 We do not go into these possibilities.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's an example you can test without even writing a procedure:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
try:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1/0
\end_layout

\begin_layout SageMoreInput
except ZeroDivisionError:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Infinity
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you type this in a cell or on the command line, then execute it, Sage
 first tries to divide
\begin_inset space ~
\end_inset

1 by
\begin_inset space ~
\end_inset

0.
 That obviously won't work, and Sage raises a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset

.
 Our 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 clause catches this error, so Sage passes into that block, finding the
 statement 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
Infinity
\end_layout

\end_inset

.
 You should not be surprised, then, that the result is:
\begin_inset Foot
status open

\begin_layout Plain Layout
It is also possible to 
\begin_inset Quotes eld
\end_inset

nest
\begin_inset Index idx
status open

\begin_layout Plain Layout
nesting
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 clauses; that is, place a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 clause inside another.
 You can do this in either a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 or an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 clause.
 For instance:
\end_layout

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
try:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1/0
\end_layout

\begin_layout SageMoreInput
except ZeroDivisionError:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

try:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0**Infinity
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

except NotImplementedError:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print('No dice')
\end_layout

\end_deeper
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageOutput
+Infinity
\end_layout

\end_deeper
\begin_layout Standard
Rather than process all exceptions in one 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 block, it is possible to process exceptions to one 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 block in several 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 blocks that follow.
 Line up each 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 clauses with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 clause, list the precise error for each except, and supply indented code
 accordingly.
 This helps keep 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 structures from turning into a modern Pyramid of Doom.
\end_layout

\begin_layout Standard
In addition to catching errors, a procedure can invoke another keyword,
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset


\end_layout

\end_inset

, to 
\begin_inset Quotes eld
\end_inset

raise
\begin_inset Quotes erd
\end_inset

 errors of its own.
 The usage is as follows:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
raise
\emph on
 
\emph default
ErrorType(message)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
For 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
message
\end_layout

\end_inset

, you can use any string.
 For 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ErrorType
\end_layout

\end_inset

, one can raise any exception of the appropriate type; the two usual suspects
 are:
\end_layout

\begin_layout Itemize
\noindent
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

, where the input is of the wrong type: for instance, the algorithm expects
 a matrix, but received a number; and
\end_layout

\begin_layout Itemize
\noindent
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

, where the input has the right type, but the wrong value: for instance,
 the algorithm expects a nonzero number, but received zero.
\end_layout

\begin_layout Standard
We will not use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset

 keyword in general, but you should be aware that this mechanism is how
 Sage's authors communicate errors to you.
\end_layout

\begin_layout Standard
Let's try this approach on something more substantial.
\end_layout

\begin_layout Subsection*
A 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

 example
\end_layout

\begin_layout Standard
An exercise on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "exc: normal line function"

\end_inset

 asked you to write a Sage procedure to compute the normal line to a mathematica
l function 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

.
 The procedure you wrote should work in 
\emph on
most
\emph default
 situations.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('t')
\end_layout

\begin_layout SageOutput
t
\end_layout

\begin_layout SageInput
normal_line(t**2, 1, t)
\end_layout

\begin_layout SageOutput
1/2*t + 1/2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In all likelihood, however, your code would encounter the following error:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Symbolic division by zero
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
normal_line((t - 1)**2 + 2, 1, t)
\end_layout

\begin_layout SageError
ZeroDivisionError: Symbolic division by zero
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Well, of 
\emph on
course
\emph default
 this would happen:
\end_layout

\begin_layout Itemize
\noindent
the normal line is perpendicular to the tangent line;
\end_layout

\begin_layout Itemize
a perpendicular line is a negative reciprocal; and
\end_layout

\begin_layout Itemize
\noindent
the slope of the line tangent to 
\begin_inset Formula $\left(t-1\right)^{2}+2$
\end_inset

 at 
\begin_inset Formula $t=1$
\end_inset

 is
\begin_inset space ~
\end_inset

0.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Reciprocal
\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

division,
\begin_inset Quotes erd
\end_inset

 and division by zero means 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard

\emph on
This problem is unavoidable.
 
\emph default
What we need is a way to deal with it, and as it happens, we have at least
 two at our disposal.
 But first we need to think about the underlying problem; namely, the derivative
 is
\begin_inset space ~
\end_inset

0.
 In this case, the normal line is actually the vertical line 
\begin_inset Formula $x=a$
\end_inset

.
 We illustrate this with the function 
\begin_inset Formula $f\left(t\right)=\left(t-1\right)^{2}+2$
\end_inset

 at 
\begin_inset Formula $t=1$
\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/decision_making_graphics/normal_line_demo.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
A vertical line is not a function, so one option is to raise an exception
 of our own.
 Something like this, perhaps?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
raise ValueError('The normal line is vertical.')
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This works, and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

 seems the appropriate exception, since the type is just fine (a function,
 and a differentiable function, to boot) but its value is inappropriate.
\end_layout

\begin_layout Standard
The trouble with this approach is that it reports an error when the situation
 really is salvageable! After all, a normal line 
\emph on
exists;
\emph default
 it just isn't a 
\emph on
function
\emph default
.
 A more appropriate approach might be to return an equation for the normal
 line.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
return x==a
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Now, this might make your original algorithm inconsistent if you returned
 a function (which, most likely, you did).
 We can still make the algorithm consistent by modifying the well-behaved
 case to return the equation 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
y == m(x - a) + f(a)
\end_layout

\end_inset

 instead of the right-hand side alone.
\end_layout

\begin_layout Standard
So, how to implement this in Sage? Again, we have two options.
 The first is to use an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 structure as a 
\begin_inset Quotes eld
\end_inset

guard
\begin_inset Quotes erd
\end_inset

 around the computation of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

.
 This way, no exception occurs at all.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def normal_line_with_guard(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f, x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if df(a) == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# horizontal perpendicular to vertical
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = x == a
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = 1/df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = y == m*(x - a) + f(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The other approach is to use a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 structure to catch a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def normal_line_with_catch(f, a, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f, x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

try:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = 1/df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = y == m*(x - a) + f(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

except ZeroDivisionError:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# horizontal perpendicular to vertical
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = x == a
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Try them both to see that both procedures work with both vertical and skew
 normal lines:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
normal_line_with_guard((t - 1)**2 + 2, 0, t)
\end_layout

\begin_layout SageOutput
y == -1/2*t + 3
\end_layout

\begin_layout SageInput
normal_line_with_guard((t - 1)**2 + 2, 1, t)
\end_layout

\begin_layout SageOutput
t == 1
\end_layout

\begin_layout SageInput
normal_line_with_catch((t - 1)**2 + 2, 0, t)
\end_layout

\begin_layout SageOutput
y == -1/2*t + 3
\end_layout

\begin_layout SageInput
normal_line_with_catch((t - 1)**2 + 2, 1, t)
\end_layout

\begin_layout SageOutput
t == 1
\end_layout

\end_deeper
\begin_layout Standard
Which approach is 
\begin_inset Quotes eld
\end_inset

better?
\begin_inset Quotes erd
\end_inset

 The second version is generally recommended for two reasons:
\end_layout

\begin_layout Itemize
The logic flows better, so it is more readable.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 construct does not make it obvious 
\emph on
why
\emph default
 we test 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
df(a)==0
\end_layout

\end_inset

, just 
\emph on
that
\emph default
 we test it.
 It requires the reader to think more about what we're doing.
 By contrast, the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 construct makes it clear that an error might occur (the only reason to
 use a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

); if so, what that error is (
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset

); and moreover, what to do in case it does occur (the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 block).
\end_layout

\begin_layout Itemize
Recall that Sage's interface uses Python.
 As computer languages go, Python's exceptions are efficient.
 There is a small penalty to using exceptions; in our tests, the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
/else
\end_layout

\end_inset

 guard is about 20% faster than the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 catch when division by zero actually occurs.
\end_layout

\begin_deeper
\begin_layout Standard
Don't jump to that conclusion yet! Division by zero happens 
\emph on
rarely,
\emph default
 so we should ask ourselves how the approaches compare in the usual circumstance
s.
 It turns out that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 catch is 
\emph on
more than 30% faster
\emph default
 than the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 guard!
\end_layout

\end_deeper
\begin_layout Subsection*
A more involved example
\end_layout

\begin_layout Standard
On p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "exc: Dodgson's method"

\end_inset

 we describe Dodgson's method to compute a determinant.
 Dodgson's method is an algorithm you can implement using a 
\series bold
for
\series default
 loop, so your instructor may have assigned it already.
 It's a cute algorithm; if you haven't tried it by hand yet, try it now
 real quick.
\end_layout

\begin_layout Standard
Unfortunately, it has problems.
 Those problems are hard to fix.
 Another algorithm to compute determinants is based on Gaussian elimination.
 It also has problems, but these are easy to fix.
 We start with the pseudocode below, which starts counting rows and matrices
 from
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Gaussian_determinant
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $M$
\end_inset

, an 
\begin_inset Formula $n\times n$
\end_inset

 matrix
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\det M$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $N$
\end_inset

 be a copy of 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $d=1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $i\in\left\{ 1,\ldots,n-1\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $j\in\left\{ i+1,\ldots,n\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $N_{j,i}\neq0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $a=N_{j,i}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

multiply row 
\begin_inset Formula $j$
\end_inset

 by 
\begin_inset Formula $N_{i,i}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

subtract 
\begin_inset Formula $a$
\end_inset

 times row 
\begin_inset Formula $i$
\end_inset

 from row 
\begin_inset Formula $j$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

divide 
\begin_inset Formula $d$
\end_inset

 by 
\begin_inset Formula $N_{i,i}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $d\times\left(N_{1,1}\times N_{2,2}\times\cdots\times N_{n,n}\right)$
\end_inset


\end_layout

\begin_layout Standard
\noindent
Before implementing it, let's see it in action on
\begin_inset Formula 
\[
M=\left(\begin{array}{ccc}
3 & 2 & 1\\
5 & 4 & 3\\
6 & 3 & 4
\end{array}\right)\,.
\]

\end_inset

The algorithm begins by copying 
\begin_inset Formula $M$
\end_inset

 to 
\begin_inset Formula $N$
\end_inset

 and setting 
\begin_inset Formula $d=1$
\end_inset

.
 It then loops through all but the last row of 
\begin_inset Formula $N$
\end_inset

, storing the row value in 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $i=1$
\end_inset

, the outer loops finds an inner loop with 
\begin_inset Formula $j=2$
\end_inset

.
 As 
\begin_inset Formula $N_{2,1}=5\neq0$
\end_inset

, the algorithm stores
\begin_inset space ~
\end_inset

5 in 
\begin_inset Formula $a$
\end_inset

, multiplies row
\begin_inset space ~
\end_inset

2 by 
\begin_inset Formula $N_{i,i}=3$
\end_inset

, subtracts 
\begin_inset Formula $a=5$
\end_inset

 times row
\begin_inset space ~
\end_inset

1 from row
\begin_inset space ~
\end_inset

2, then divides 
\begin_inset Formula $d$
\end_inset

 by 
\begin_inset Formula $N_{i,i}=3$
\end_inset

, obtaining 
\begin_inset Formula $d=1\div3=\nicefrac{1}{3}$
\end_inset

.
 The resulting matrix is
\begin_inset Formula 
\[
N=\left(\begin{array}{ccc}
3 & 2 & 1\\
0 & 2 & 4\\
6 & 3 & 4
\end{array}\right)\,.
\]

\end_inset

The inner loop next sets 
\begin_inset Formula $j=3$
\end_inset

.
 As 
\begin_inset Formula $N_{3,1}=6\neq0$
\end_inset

, the algorithm performs the innermost block again on row
\begin_inset space ~
\end_inset

3, obtaining
\begin_inset Formula 
\[
N=\left(\begin{array}{ccc}
3 & 2 & 1\\
0 & 2 & 4\\
0 & -3 & 6
\end{array}\right)\,.
\]

\end_inset

It also modified 
\begin_inset Formula $d$
\end_inset

, so that 
\begin_inset Formula $d=\nicefrac{1}{9}$
\end_inset

.
 So far, so good.
 The algorithm has completed the inner loop on 
\begin_inset Formula $j$
\end_inset

 when 
\begin_inset Formula $i=1$
\end_inset

.
\end_layout

\begin_layout Standard
The outer loop proceeds to 
\begin_inset Formula $i=2$
\end_inset

, and finds an inner loop with 
\begin_inset Formula $j=3$
\end_inset

.
 As 
\begin_inset Formula $N_{3,2}=-3\neq0$
\end_inset

, the algorithm stores
\begin_inset space ~
\end_inset


\begin_inset Formula $-3$
\end_inset

 in 
\begin_inset Formula $a$
\end_inset

, multiplies row
\begin_inset space ~
\end_inset

3 by 
\begin_inset Formula $N_{i,i}=2$
\end_inset

, subtracts 
\begin_inset Formula $a=-3$
\end_inset

 times row
\begin_inset space ~
\end_inset

2 from row
\begin_inset space ~
\end_inset

3, then divides 
\begin_inset Formula $d$
\end_inset

 by 
\begin_inset Formula $N_{i,i}=2$
\end_inset

, obtaining 
\begin_inset Formula $d=\left(\nicefrac{1}{9}\right)\div2=\nicefrac{1}{18}$
\end_inset

.
 The resulting matrix is
\begin_inset Formula 
\[
N=\left(\begin{array}{ccc}
3 & 2 & 1\\
0 & 2 & 4\\
0 & 0 & 24
\end{array}\right)\,.
\]

\end_inset

The algorithm has completed the inner loop on 
\begin_inset Formula $j$
\end_inset

 when 
\begin_inset Formula $i=2$
\end_inset

.
 That was the last value of 
\begin_inset Formula $i$
\end_inset

, so the loops are complete; the algorithm returns
\begin_inset Formula 
\[
d\times\left(N_{1,1}\times N_{2,2}\times N_{3,3}\right)=\nicefrac{1}{18}\times\left(3\times2\times24\right)=8.
\]

\end_inset

Either Sage or a more traditional method will confirm that 
\begin_inset Formula $\det M=8$
\end_inset

.
\end_layout

\begin_layout Standard
We can implement this in Sage in the following code:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def gaussian_determinant(M):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

N = copy(M)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = N.nrows()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n-1):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(i+1,n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if not (N[j,i] == 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# clear column beneath this row
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = d/N[i,i]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = N[j,i]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

N.set_row_to_multiple_of_row(j,j,N[i,i])
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

N.add_multiple_of_row(j,i,-a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return d*prod(N[i,i] for i in range(n))
\end_layout

\end_deeper
\begin_layout Standard
If we try it on the remaining matrices given in the exercise on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "exc: Dodgson's method"

\end_inset

, we see that it works for the third matrix, but not the second.
 What goes wrong?
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational division by zero
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageError
ZeroDivisionError: Rational division by zero
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Division occurs in only one place in the algorithm: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

 by 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
N[i,i]
\end_layout

\end_inset

.
 We must have encountered a
\begin_inset space ~
\end_inset

0 on the main diagonal.
\end_layout

\begin_layout Standard
How did this happen? We started with
\begin_inset Formula 
\[
M=\left(\begin{array}{rrrr}
1 & -4 & 1 & 2\\
-1 & 4 & 4 & 1\\
3 & 3 & 3 & 4\\
2 & 5 & 2 & -1
\end{array}\right)\ ,
\]

\end_inset

and the first pass through the outer loop leaves us with
\begin_inset Formula 
\[
N=\left(\begin{array}{rrrr}
1 & -4 & 1 & 2\\
0 & 0 & 5 & 3\\
0 & 15 & 0 & -2\\
0 & 13 & 0 & -5
\end{array}\right).
\]

\end_inset

There we go! During the second pass through the loop, the algorithm divides
 
\begin_inset Formula $d$
\end_inset

 by
\begin_inset space ~
\end_inset

0, a disaster.
\end_layout

\begin_layout Standard
Unlike Dodgson's Method, an easy fix is available.
 Remember that Gaussian elimination allows us to swap rows, as that merely
 re-orders the equations that correspond to each row.
 If we can find another row below 
\begin_inset Formula $i=2$
\end_inset

 with a nonzero element in column
\begin_inset space ~
\end_inset

2, we can swap that row with row
\begin_inset space ~
\end_inset

2 and proceed as before.
 In the example above, row
\begin_inset space ~
\end_inset

3 has a non-zero element in column
\begin_inset space ~
\end_inset

2, so we swap it and row 2, obtaining
\begin_inset Formula 
\[
N=\left(\begin{array}{rrrr}
1 & -4 & 1 & 2\\
0 & 15 & 0 & -2\\
0 & 0 & 5 & 3\\
0 & 13 & 0 & -5
\end{array}\right).
\]

\end_inset

With a non-zero element in row
\begin_inset space ~
\end_inset

1, column
\begin_inset space ~
\end_inset

1, we can now resume the algorithm.
 When 
\begin_inset Formula $j=3$
\end_inset

 there is nothing to do, so the only inner loop that does anything is when
 
\begin_inset Formula $j=4$
\end_inset

, obtaining
\begin_inset Formula 
\[
N=\left(\begin{array}{rrrr}
1 & -4 & 1 & 2\\
0 & 15 & 0 & -2\\
0 & 0 & 5 & 3\\
0 & 0 & 0 & -49
\end{array}\right)
\]

\end_inset

and 
\begin_inset Formula $d=\nicefrac{1}{15}$
\end_inset

.
 Nothing happens on the next value of 
\begin_inset Formula $i$
\end_inset

, either, so the algorithm returns
\begin_inset Formula 
\[
\frac{1}{15}\times\left[1\times15\times5\times\left(-49\right)\right]=-245.
\]

\end_inset

Again, we can verify using Sage or a traditional algorithm for computing
 determinants that 
\begin_inset Formula $\det M$
\end_inset

 is.
 \SpecialChar ldots
uhm, 245.
\end_layout

\begin_layout Standard
What? We got 
\begin_inset Formula $-245$
\end_inset

!
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\size huge
\color red
PANIC!
\end_layout

\begin_layout Standard
\noindent
Once we're done panicking, let's think about what might have changed, in
 particular, what might have made the sign go wrong.
\end_layout

\begin_layout Standard
The only thing that changed is that we swapped rows.
 You should remember from past experience with matrices that swapping rows
 changes the sign of the determinant.
 
\emph on
There!
\emph default
 Our method of 
\begin_inset Quotes eld
\end_inset

saving
\begin_inset Quotes erd
\end_inset

 the algorithm involved swapping rows, so somehow we have to ensure we multiply
 the determinant by
\begin_inset space ~
\end_inset


\begin_inset Formula $-1$
\end_inset

.
 This isn't too hard; simply multiply
\begin_inset space ~
\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

 by
\begin_inset space ~
\end_inset


\begin_inset Formula $-1$
\end_inset

.
\end_layout

\begin_layout Standard
Before we implement this improved algorithm, we should ask ourselves: what
 if we hadn't been able to find a non-zero element in column
\begin_inset space ~
\end_inset

2 among the rows below row
\begin_inset space ~
\end_inset

2? In that case, the structure of the matrix tells us the determinant is
\begin_inset space ~
\end_inset

0.
 This covers all our bases.
\end_layout

\begin_layout Standard
We could use an 
\series bold
if
\series default
/
\series bold
else
\series default
 control structure to implement the modified algorithm, and this would work
 just fine (see the exercises).
 We use a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 this time, partly to illustrate how it works.
 However, rather than stuff all this material into the same procedure, let's
 split separate tasks into their separate procedures, each of which handles
 a 
\begin_inset Quotes eld
\end_inset

bite-sized
\begin_inset Quotes erd
\end_inset

 subproblem.
\end_layout

\begin_layout Standard
A procedure titled 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
clear_column()
\end_layout

\end_inset

 could handle the ordinary task of row reduction.
 Everything involving saving a zero division could go into a procedure titled,
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
unzero()
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def unzero(M, d, i):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# use to swap rows when M[i,i] = 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = M.nrows()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# look for row k w/nonzero in col j
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for k in range(i+1,n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if not (M[k,i] == 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M.swap_rows(k,i)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = -d
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

break
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# M[i,i] == 0? column clear (
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

failure
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if M[i,i] == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

success = False
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = d/M[i,i]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

success = True
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return success, M, d
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
clear_column()
\end_layout

\end_inset

 procedure could then handle the simplified task of clearing the remaining
 elements of the column.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def clear_column(M, d, i):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = M.nrows()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# clear column beneath this row
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(i+1, n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if not (M[j,i] == 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

try:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = d/M[i,i]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

except ZeroDivisionError:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# look for pivot in lower row
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

success, M, d = unzero(M, d, i)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if not success:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

raise ZeroDivisionError('Result is 0')
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = M[j,i]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M.set_row_to_multiple_of_row(j, j, M[i,i])
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

M.add_multiple_of_row(j, i, -a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return M, d
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That allows us to simplify the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
gaussian_determinant()
\end_layout

\end_inset

 procedure significantly, making it far more understandable.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def gaussian_determinant(M):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

N = copy(M)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = N.nrows()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# clear columns left to right
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n-1):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

try:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

N, d = clear_column(N, d, i)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

except ZeroDivisionError:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return d*prod(N[i,i] for i in range(n))
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The procedure now returns the correct determinant for any matrix you throw
 at it.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
M = matrix([[1,-4,1,2],[-1,4,4,1],[3,3,3,4],[2,5,2,-1]])
\end_layout

\begin_layout SageInput
gaussian_determinant(M)
\end_layout

\end_deeper
\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Sage offers the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 control structure to make decisions.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 Sage raises a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
SyntaxError
\end_layout

\end_inset

 if you forget to include the colon at the end of an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 Boolean logic is based on the three values 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

, 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

, and 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
Sometimes
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 
\series bold
and
\series default
 (
\series bold
not
\series default
 (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 
\series bold
or
\series default
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

))
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 
\series bold
or
\series default
 (
\series bold
not
\series default
 (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 
\series bold
and
\series default
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

))
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 
\series bold
and
\series default
 (
\series bold
not
\series default
 (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 
\series bold
xor
\series default
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

))
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 
\series bold
or
\series default
 (
\series bold
not
\series default
 (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 
\series bold
xor
\series default
 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

))
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 You should always use the inclusive 
\series bold
or
\series default
 because 
\begin_inset CommandInset href
LatexCommand href
name "discrimination"
target "http://www.merriam-webster.com/dictionary/discrimination"
literal "false"

\end_inset

 is always and everywhere bad.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 If an algorithm can take three possible courses of action, the only way
 to implement it is with the following structure:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
if 
\emph on
condition1
\emph default
:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

block1
\end_layout

\begin_layout SageMoreInput
else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if 
\emph on
condition2
\emph default
:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

block2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

block3
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 A 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 catch is less efficient than an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 guard, but this penalty is worth it for the sake of readability.
\end_layout

\begin_layout Subsection*
Multiple choice
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 The best control structure for a 
\emph on
general decision
\emph default
 uses which keyword(s)?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
elif
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
2.
 A Boolean statement in Sage can have which values?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
On
\end_layout

\end_inset

, 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
Off
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
true
\end_layout

\end_inset

, 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
false
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

, 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
-1
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 What does it mean to 
\begin_inset Quotes eld
\end_inset

nest
\begin_inset Quotes erd
\end_inset

 control structures?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 To place one control structure (like an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 statement) inside a different control structure (like a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 statement).
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 To place one control structure (like an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 statement) inside the same control structure (another 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 statement).
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 To program in such a way that control structures aren't necessary.
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 To build two control structures a nice, comfortable home where they can
 raise a family of control structures.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 What indicates the commands to be executed when the condition of an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

 statement is true?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 a colon at the end of the line
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 indentation of the commands
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 braces 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
{
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 both a colon and indentation
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
5.
 Which keyword indicates that a loop should terminate early because it is
 effectively finished?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
abort
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
exit
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
return
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 Which symbol indicates to Sage that two expressions are 
\emph on
not
\emph default
 equal?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
=/=
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
!=
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
#
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 None; you have to use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
not (a == b)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
7.
 Taking the square root of a negative number produces what kind of exception?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ZeroDivisionError
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 Why should it produce an exception?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
8.
 The best control structure to watch for 
\emph on
a specific error
\emph default
 uses which keyword(s)?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
elif
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
9.
 Which of the following is not performed in a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 statement?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Sage executes every statement indented under the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 statement that does not raise an error.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 If no error occurs in the statements listed under the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 block, Sage skips the statements indented under the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 block.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 If an error occurs in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

 block and the next 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 statement lists that error, or none at all, Sage executes every statement
 indented under the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 statement that does not raise an error.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 If an error occurs in the statements listed under the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 block and the next 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 statement lists that error, Sage executes every statement indented under
 the next 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

 statement that does not raise an error.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 Traditionally, what is meant by the 
\begin_inset Quotes eld
\end_inset

pyramid of doom?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 a situation where we have to nest 
\series bold
try
\series default
 statements very deeply
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 a situation where an 
\series bold
if
\series default
 has many, many 
\series bold
else if
\series default
's
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 a situation where we have to nest 
\series bold
if
\series default
 statements very deeply
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 yet another sequel in the Indiana Jones series
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
11.
 A good reason to use parentheses when a condition has more than one Boolean
 operator is that:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (M)
A.
 \SpecialChar ldots
it clarifies the condition's logic to anyone who reads it.
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
B.
 \SpecialChar ldots
it avoids subtle bugs due to the order Sage evaluates 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
and
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
or
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
not
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
C.
 all of the above
\end_layout

\begin_layout Labeling
\labelwidthstring (M)
D.
 none of the above
\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9. 
1.
 Compare and contrast the appropriate times to use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
elif
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 as opposed to the appropriate times to use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9. 
2.
 How would you modify the 
\emph on
Method_of_Bisection
\emph default
 pseudocode to test that 
\begin_inset Formula $f\left(a\right)$
\end_inset

 and 
\begin_inset Formula $f\left(b\right)$
\end_inset

 have different signs before starting the loop, and returning 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 if they do not?
\end_layout

\begin_layout Labeling
\labelwidthstring 9. 
3.
 If someone were to modify the implementation of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
method_of_bisection()
\end_layout

\end_inset

 to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset

 an exception in case 
\begin_inset Formula $f\left(a\right)$
\end_inset

 and 
\begin_inset Formula $f\left(b\right)$
\end_inset

 were the same sign:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) What kind of exception should they use, 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

, 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

, or something else altogether?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) What kind of structure should they use, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
else
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
try
\end_layout

\end_inset

/
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
except
\end_layout

\end_inset

?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 Write a procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
abmatrix()
\end_layout

\end_inset

 that accepts as input a positive integer 
\begin_inset Formula $n$
\end_inset

 and two objects 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

, then returns the 
\begin_inset Formula $n\times n$
\end_inset

 matrix 
\begin_inset Formula $C$
\end_inset

 where 
\begin_inset Formula $C$
\end_inset

 is the matrix below.
 
\begin_inset Formula 
\[
\begin{array}{cc}
 & n\textrm{ columns}\\
n\textrm{ rows}\left\{ \begin{array}{c}
\\
\\
\\
\\
\\
\end{array}\right. & \overbrace{\left(\begin{array}{ccccc}
a & b & a & b\\
b & a & b & a & \cdots\\
a & b & a & b\\
b & a & b & a\\
 & \vdots &  &  & \ddots
\end{array}\right)}
\end{array}
\]

\end_inset

Since 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 might be symbolic, you should create this matrix over the symbolic ring.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Compute 
\begin_inset Formula $\det C$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Why does that result make sense? 
\emph on
Hint:
\emph default
 Think about linear independence, or rather, the lack thereof.
\end_layout

\end_deeper
\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write a procedure that computes the largest element in a list.
 Sage has a built-in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max
\end_layout

\end_inset

 procedure, but use a loop here.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Write Sage procedures that:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) returns the largest element of a matrix;
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) returns the smallest element of a matrix;
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) returns the sum of all the elements of a matrix.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 Write pseudocode for a Sage procedure that accepts as input a mathematical
 function 
\begin_inset Formula $f$
\end_inset

 and a real number 
\begin_inset Formula $a$
\end_inset

, then returns a tuple with two values: whether 
\begin_inset Formula $f$
\end_inset

 is increasing at 
\begin_inset Formula $x=a$
\end_inset

 (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if so) and whether 
\begin_inset Formula $f$
\end_inset

 is concave up at 
\begin_inset Formula $x=a$
\end_inset

 (
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if so).
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Write a procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
lp()
\end_layout

\end_inset

 which accepts as arguments two lists 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
M
\end_layout

\end_inset

, verifies that they are the same length, and if so, returns a list 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
N
\end_layout

\end_inset

 with the same number of elements, where 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
N[i]
\end_layout

\end_inset

 is the product of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L[i]
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
M[i]
\end_layout

\end_inset

.
 If the two lists are not the same length, the procedure shoud 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset

 an 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
AttributeError
\end_layout

\end_inset

.
 For instance, the result of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
LP([1,3,5],[2,4,6])
\end_layout

\end_inset

 would be 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[2,12,30]
\end_layout

\end_inset

, while the invocation 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
LP([1,3],[2,4,6])
\end_layout

\end_inset

 would raise the error.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 When you ask Sage to solve a trigonometric function, it returns only one
 solution.
 For instance, the solution to 
\begin_inset Formula $\sin2x=\nicefrac{1}{2}$
\end_inset

 is actually 
\begin_inset Formula $\left\{ \nicefrac{\pi}{12}+\pi k\right\} \cup\left\{ \nicefrac{5\pi}{12}+\pi k\right\} $
\end_inset

.
 Write a procedure to add periodic solutions to a trigonometric equation
 of the form 
\begin_inset Formula $\sin\left(ax+b\right)=0$
\end_inset

.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Rethink this problem.
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 Part of your program will need to solve 
\begin_inset Formula $ax+b=0$
\end_inset

.
 You can obtain this information using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.operands()
\end_layout

\end_inset

 method.
 To see how it works, assign 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(x) = sin(2*x + 3)
\end_layout

\end_inset

 and then type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f.operands()
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 In this problem, you'll write an interactive procedure that approximates
 definite integrals in one of three ways.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Adapt the 
\emph on
Left_Riemann_approximation
\emph default
 pseudocode to write pseudocode for Riemann approximation using right endpoints.
 Translate that into Sage code 
\emph on
without
\emph default
 using comprehensions.
 Verify that your code produces accurate approximations.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Adapt the 
\emph on
Left_Riemann_approximation
\emph default
 pseudocode to write pseudocode for Riemann approximation using midpoints.
 Translate that into Sage code 
\emph on
without
\emph default
 using comprehensions.
 Verify that your code produces accurate approximations.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Write an interactive procedure with the following interface objects:
\end_layout

\begin_deeper
\begin_layout Itemize
an input box for a function 
\begin_inset Formula $f\left(x\right)$
\end_inset

;
\end_layout

\begin_layout Itemize
an input box for a left endpoint 
\begin_inset Formula $a$
\end_inset

;
\end_layout

\begin_layout Itemize
an input box for a right endpoint 
\begin_inset Formula $b$
\end_inset

;
\end_layout

\begin_layout Itemize
a slider for a number 
\begin_inset Formula $n$
\end_inset

 of approximations, with minimum value 10, maximum value 200, and step size
 10; and finally,
\end_layout

\begin_layout Itemize
a selector with options 
\begin_inset Quotes eld
\end_inset

left approximation,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

right approximation,
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

midpoint approximation.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The body of the procedure will call the Sage procedure you wrote for the
 requested approximation and return its value.
\end_layout

\end_deeper
\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
7.
 Typically, a user of the Method of Bisection would not know in advance
 how many steps she wants the algorithm's main loop to perform.
 What she has in mind is the decimal precision needed between the endpoints:
 for example, they should be the same up to the thousandths place.
 One way to implement this is by replacing the input 
\begin_inset Formula $n$
\end_inset

 with a positive integer 
\begin_inset Formula $d$
\end_inset

 which specifies the number of digits.
 We can then compute 
\begin_inset Formula $n$
\end_inset

 from 
\begin_inset Formula $d$
\end_inset

 in the algorithm's body.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Modify the 
\emph on
Method_of_Bisection
\emph default
 pseudocode so that it accepts 
\emph on
d
\emph default
 instead of 
\emph on
n
\emph default
 and computes 
\emph on
n
\emph default
 as its very first step.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 In general, we round 
\begin_inset Formula $\log_{10}n$
\end_inset

 to the next-highest integer to find the number of digits in 
\begin_inset Formula $n$
\end_inset

.
 (
\begin_inset Formula $\log_{10}2\approx0\mapsto1$
\end_inset

, 
\begin_inset Formula $\log_{10}9\approx1\mapsto1$
\end_inset

, 
\begin_inset Formula $\log_{10}10=1\mapsfrom1$
\end_inset

, \SpecialChar ldots
) So if the algorithm divided by
\begin_inset space ~
\end_inset

10, you could repeat it 
\begin_inset Formula $d$
\end_inset

 times to obtain a precision of 
\begin_inset Formula $d$
\end_inset

 digits.
 Alas! the algorithm divides by
\begin_inset space ~
\end_inset

2, so you have to use a 
\begin_inset Formula $\log_{2}$
\end_inset

.
 
\emph on
How precisely
\emph default
 you have to use it, we leave as a task to you, but you will also have to
 consider 
\begin_inset Formula $b-a$
\end_inset

, not just 
\begin_inset Formula $d$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Implement the pseudocode in Sage code.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
8.
 Write Sage procedures that accept as input a matrix 
\begin_inset Formula $M$
\end_inset

 and return 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if 
\begin_inset Formula $M$
\end_inset

 satisfies one of these conditions, and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 otherwise:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
is_square()
\end_layout

\end_inset

: 
\begin_inset Formula $M$
\end_inset

 is square
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
is_zero_one_negative()
\end_layout

\end_inset

: every entry of 
\begin_inset Formula $M$
\end_inset

 is
\begin_inset space ~
\end_inset

0,
\begin_inset space ~
\end_inset

1, or
\begin_inset space ~
\end_inset


\begin_inset Formula $-1$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sums_to_one()
\end_layout

\end_inset

: every row and every column of 
\begin_inset Formula $M$
\end_inset

 sums to
\begin_inset space ~
\end_inset

1
\end_layout

\begin_layout Standard
Then write a Sage procedure that accepts as input a matrix 
\begin_inset Formula $M$
\end_inset

 and returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if all three conditions are satisfied, and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 otherwise.
 Make this procedure modular, so that it invokes the previous three procedures
 rather than repeating their code!
\end_layout

\end_deeper
\begin_layout Chapter
Repeating yourself indefinitely
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: indefinite loops"

\end_inset

Earlier we spoke of repeating oneself 
\begin_inset Quotes eld
\end_inset

definitely,
\begin_inset Quotes erd
\end_inset

 which occurs when we know exactly how many times we have to repeat a task.
 Our examples for this involved Euler's Method to approximate the solution
 to a differential equation, Riemann sums to approximate an integral, and
 checking whether the elements of a finite ring actually form a field.
 Later we used the same ideas to find the roots of a continuous function
 via the Method of Bisection and to modify matrices.
\end_layout

\begin_layout Standard
Not all loops are definite; sometimes you can't practically know at the
 outset how many times you have to repeat a task.
 One such example is 
\series bold
Newton's Method
\series default
.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Newton's Method
\end_layout

\end_inset

 This can be faster than the Method of Bisection, but it uses tangent lines,
 so it requires the function to be differentiable, not just continuous.
\end_layout

\begin_layout Standard
(What is the difference between a continuous function and a differentiable
 function, you ask? We can think of the difference in an geometric way:
 a continuous function's graph is 
\begin_inset Quotes eld
\end_inset

unbroken,
\begin_inset Quotes erd
\end_inset

 while a differentiable function's graph is 
\begin_inset Quotes eld
\end_inset

smooth.
\begin_inset Quotes erd
\end_inset

 A smooth function is necessarily unbroken, while an unbroken function might
 not be smooth.
 In fact, differentiable functions are always continuous, while continuous
 functions are not always smooth.
 So the Method of Bisection works everywhere that Newton's Method works,
 though not, perhaps, as quickly; while Newton's Method does not work everywhere
 the Method of Bisection works.
 For that matter, Newton's Method might not work everywhere it works,
\begin_inset Foot
status open

\begin_layout Plain Layout
That may seem like a curious combination of words, but it's the unvarnished
 truth, as we will show shortly.
 If you think it doesn't make sense, give it a few paragraphs and you'll
 see.
 (Modulo some artistic license in the meanings of the words, of course.)
\end_layout

\end_inset

 depending on how careless you are with the setup.)
\end_layout

\begin_layout Standard
The idea of Newton's Method is based on two facts.
\end_layout

\begin_layout Itemize
The line tangent to a curve travels in the same direction as that curve.
\end_layout

\begin_layout Itemize
It is easy to find the root of a line: 
\begin_inset Formula $mx+b=0$
\end_inset

 implies 
\begin_inset Formula $x=\nicefrac{-b}{m}$
\end_inset

.
\end_layout

\begin_layout Standard
Put them together, and the main insight is that if you start close to the
 root of a function, then follow the tangent line down to 
\emph on
its
\emph default
 root, you shouldn't end up too far from the root you started from — and,
 hopefully, you'll be closer than when you started.
 You can repeat this process as long as necessary until you achieve the
 desired accuracy in digits.
 See Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: idea of Newton's Method"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/Newtons_method_ln(3-x)_at_2.8.pdf
	lyxscale 50
	height 1.5in

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/Newtons_method_ln(3-x)_at_2.478.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifx 
\backslash
onlineordeadtree 
\backslash
online 
\backslash
animategraphics[autopause,controls,autoplay,final,height=3in]{8}{graphics/animat
ions/newtons_method/nm_anim_}{0}{13} 
\backslash
else 
\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/newtons_method/nm_anim_0
\backslash
string".pdf}
\backslash
 
\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/newtons_method/nm_anim_1
\backslash
string".pdf}
\backslash
 
\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/newtons_method/nm_anim_2
\backslash
string".pdf}
\backslash
 
\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/newtons_method/nm_anim_3
\backslash
string".pdf}
\backslash
 
\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/newtons_method/nm_anim_4
\backslash
string".pdf}
\backslash
 
\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/newtons_method/nm_anim_5
\backslash
string".pdf}
\backslash

\backslash

\backslash
includegraphics[height=1.5in]{
\backslash
string"graphics/animations/newtons_method/nm_anim_6
\backslash
string".pdf} 
\backslash
fi
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: idea of Newton's Method"

\end_inset

The basic idea behind Newton's Method: start near a root, follow the tangent
 line, and end up at a point (hopefully) closer to the root.
 Repeat as long as desired.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
How do we decide that we have arrived at the desired accuracy? The usual
 trick is round each approximation to the desired number of digits, and
 stop only when we twice have the same value.
 As you can imagine, it is not obvious how we might determine in advance
 the number of steps necessary to do this.
 It is easier simply to test, after each iteration, whether the previous
 approximation and the current approximation agree to the specified number
 of digits.
 Up to this point, however, we have no way of doing this.
\end_layout

\begin_layout Section*
Implementing an indefinite loop
\end_layout

\begin_layout Standard
When you don't know how many times to repeat, but can apply a condition
 like the one above that simplifies to 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 or 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

, we opt for what is called a 
\series bold
while
\series default
 loop.
 Pseudocode for a 
\series bold
while
\series default
 loop has this form:
\end_layout

\begin_layout Standard
\align center

\series bold
while
\series default
 
\emph on
condition
\end_layout

\begin_layout Standard
\noindent
and is followed by an indented list of statements.
 The idea is that the algorithm executes 
\emph on
every
\emph default
 statement whenever 
\emph on
condition
\emph default
 is true at the beginning of the loop; the algorithm does not test 
\emph on
condition
\emph default
 and quit in the middle of the loop if 
\emph on
condition
\emph default
 suddenly becomes true after one of the statements.
 This translates directly into Sage code: use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 keyword, followed by a Boolean condition and a colon,
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 
\emph on
condition
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
followed by an indented list of statements.
 If you choose, you can use a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
break
\end_layout

\end_inset

 command in a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop, just as with a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop, though we don't recommend it.
\end_layout

\begin_layout Standard
To implement Newton's Method, we need to track two values: the current approxima
tion of the root, say 
\begin_inset Formula $a$
\end_inset

, and the next approximation to the root, say 
\begin_inset Formula $b$
\end_inset

.
 The user specifies 
\begin_inset Formula $a$
\end_inset

, and we compute 
\begin_inset Formula $b$
\end_inset

.
 As long as 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 disagree in at least one of the specified number 
\begin_inset Formula $d$
\end_inset

 of digits, we continue the loop.
\end_layout

\begin_layout Standard
A small complication arises here.
 A 
\series bold
while
\series default
 loop tests for equality at the beginning of the loop, rather than at the
 end.
 However, we compute 
\begin_inset Formula $b$
\end_inset

 
\emph on
inside
\emph default
 the loop, so we can't know its value at the beginning unless we perform
 an extra computation before the loop! That would waste space in the program,
 and make it a little harder to read.
\end_layout

\begin_layout Subsection*
Pseudocode
\end_layout

\begin_layout Standard
To make sure the algorithm approximates at least once, we take advantage
 of the problem's nature and create an 
\series bold
obviously wrong value
\series default
 for 
\begin_inset Formula $b$
\end_inset

.
 In this case, it would be extremely odd indeed if someone were to ask us
 to round to the ones digit, so we use 
\begin_inset Formula $b=a+2$
\end_inset

 instead.
\begin_inset Foot
status open

\begin_layout Plain Layout
Another, surer way to do this is to set 
\begin_inset Formula $b=a+10^{-\left(d-1\right)}$
\end_inset

, but we don't feel like explaining this beyond saying that if someone is
 odd enough to specify 
\begin_inset Formula $d=0$
\end_inset

, then this would give us 
\begin_inset Formula $b=a+10^{1}$
\end_inset

, and if someone were to say something more reasonable like 
\begin_inset Formula $d=3$
\end_inset

, then 
\begin_inset Formula $b=a+10^{-2}$
\end_inset

, so that 
\begin_inset Formula $b-a=10^{-2}>10^{-3}=d$
\end_inset

.
 And so forth.
 Beyond that, we leave it to the reader to figure out why 
\begin_inset Formula $10^{-\left(d-1\right)}$
\end_inset

 is such a good idea — unless the instructor should assign the corresponding
 exercise\SpecialChar ldots

\end_layout

\end_inset

 In this case, it would be extremely odd indeed if 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 agree up to 
\begin_inset Formula $d$
\end_inset

 decimal digits.
\end_layout

\begin_layout Standard
To describe the idea in pseudocode, we make use of a third variable, 
\begin_inset Formula $c$
\end_inset

, as a temporary placeholder for the most recent approximation to the root.
 The use of a placeholder allows us to organize the computation in such
 a way that we can 
\begin_inset Quotes eld
\end_inset

slide
\begin_inset Quotes erd
\end_inset

 from older to newer values on each pass through the loop.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Newtons_method
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

, a function that is differentiable around 
\begin_inset Formula $a$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $a$
\end_inset

, an approximation to a root of 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $d$
\end_inset

, the number of digits to approximate a root of 
\begin_inset Formula $f$
\end_inset

near 
\begin_inset Formula $a$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
a root of 
\begin_inset Formula $f$
\end_inset

, correct to 
\begin_inset Formula $d$
\end_inset

 decimal digits
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b=a+2$
\end_inset

, 
\begin_inset Formula $c=a$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
while
\series default
 the first 
\begin_inset Formula $d$
\end_inset

 decimal digits of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 differ
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $a=c$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b$
\end_inset

 be the root of the line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $c=b$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $a$
\end_inset


\end_layout

\begin_layout Standard
Let's see how this works on the same example we used with the Method of
 Bisection, 
\begin_inset Formula $f\left(x\right)=\cos x-x$
\end_inset

.
 Both 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $\cos x$
\end_inset

 are differentiable, so their difference is, too; we can proceed.
 Inspection of the graph shows us that a root should occur somewhere between
 
\begin_inset Formula $x=0$
\end_inset

 and 
\begin_inset Formula $x=1$
\end_inset

; since 
\begin_inset Formula $x=1$
\end_inset

 looks closer, we'll start the algorithm with 
\begin_inset Formula $a=1$
\end_inset

 and 
\begin_inset Formula $d=3$
\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/cos(x)-x.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
The algorithm initializes 
\begin_inset Formula $b$
\end_inset

 to 
\begin_inset Formula $3$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

 to
\begin_inset space ~
\end_inset

1 before entering the loop.
\end_layout

\begin_layout Itemize
At the beginning of the first pass through the loop, the algorithm verifies
 that the first three digits of 
\begin_inset Formula $a=1$
\end_inset

 and 
\begin_inset Formula $b=3$
\end_inset

 differ.
 It assigns 
\begin_inset Formula $a=1$
\end_inset

, then 
\begin_inset Formula $b$
\end_inset

 the root of the line tangent to 
\begin_inset Formula $\cos x-x$
\end_inset

.
 To find this, we need the equation of the tangent line; that requires a
 point, which we have at
\begin_inset Foot
status open

\begin_layout Plain Layout
Well, 
\emph on
approximately
\emph default
 at.

\emph on
 
\emph default
We have to resort to floating-point values because in this case the exact
 values get ugly fast, and slow down computation immensely.
\end_layout

\end_inset

 
\begin_inset Formula $\left(1,\cos1-1\right)\approx\left(1,-0.459698\right)$
\end_inset

, and a slope, which we don't.
 The slope of the tangent line is the value of the derivative, so we compute
\begin_inset Formula 
\[
f'\left(x\right)=-\sin x-1
\]

\end_inset

and evaluate 
\begin_inset Formula $f'\left(1\right)\approx-1.84147$
\end_inset

.
 Our tangent line is thus 
\begin_inset Formula $y+0.459698=-1.84147\left(x-1\right)$
\end_inset

.
 To find the root, set 
\begin_inset Formula $y=0$
\end_inset

 and solve for 
\begin_inset Formula $x$
\end_inset

, obtaining the new approximation 
\begin_inset Formula $b=c=0.7503638678$
\end_inset

.
\end_layout

\begin_layout Itemize
At the beginning of the second pass through the loop, the algorithm verifies
 that the first three digits of 
\begin_inset Formula $a=1$
\end_inset

 and 
\begin_inset Formula $b=0.75038678$
\end_inset

 differ.
 It assigns 
\begin_inset Formula $a=0.75038678$
\end_inset

, then 
\begin_inset Formula $b$
\end_inset

 the root of the line tangent to 
\begin_inset Formula $\cos x-x$
\end_inset

.
 We already know the derivative 
\begin_inset Formula $f'\left(x\right)$
\end_inset

, and evaluate 
\begin_inset Formula $f'\left(0.75038678\right)\approx-1.6736325442$
\end_inset

.
 Our tangent line is thus 
\begin_inset Formula $y+0.0000464559=-1.6736325442\left(x-0.75038678\right)$
\end_inset

.
 (Notice that the 
\begin_inset Formula $y$
\end_inset

-value 
\begin_inset Formula $4.6\times10^{-5}$
\end_inset

 is already very, very close to
\begin_inset space ~
\end_inset

0.) To find the root, set 
\begin_inset Formula $y=0$
\end_inset

 and solve for 
\begin_inset Formula $x$
\end_inset

, obtaining the new approximation 
\begin_inset Formula $b=c=0.7391128909$
\end_inset

.
\end_layout

\begin_layout Itemize
At the beginning of the third pass, the algorithm verifies that 
\begin_inset Formula $a=0.75038678$
\end_inset

 and 
\begin_inset Formula $b=0.7391128909$
\end_inset

 differ in their first
\begin_inset space ~
\end_inset

3 decimal digits.
 It assigns 
\begin_inset Formula $a=0.7391128909$
\end_inset

, then 
\begin_inset Formula $b$
\end_inset

 the root of the line tangent to 
\begin_inset Formula $\cos x-x$
\end_inset

.
 Passing over the details, we have the new approximation 
\begin_inset Formula $b=c=0.7390851334$
\end_inset

.
\end_layout

\begin_layout Itemize
At the beginning of the fourth pass, the algorithm notices that the first
 three decimal digits of 
\begin_inset Formula $a=0.7391128909$
\end_inset

 and 
\begin_inset Formula $b=0.7390851334$
\end_inset

 agree.
 The 
\series bold
while
\series default
 loop terminates, and there is nothing for the algorithm to do but return
 
\begin_inset Formula $a\approx0.7391128909$
\end_inset

.
\end_layout

\begin_layout Standard
Notice how quickly Newton's Method reached its goal! How does it compare
 with the Method of Bisection? Recall that the Method of Bisection halves
 the interval on each step, so depending on the choice of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

, we would have needed to run 
\begin_inset Formula $n$
\end_inset

 steps such that 
\begin_inset Formula $2^{-n}\left(b-a\right)<10^{-3}$
\end_inset

, or 
\begin_inset Formula $n>-\log_{2}\nicefrac{10^{-3}}{b-a}=3\log_{2}10+\log_{2}\left(b-a\right)\approx10+\log_{2}\left(b-a\right)$
\end_inset

.
 The best guess we can make at 
\begin_inset Formula $\left(a,b\right)$
\end_inset

 by eyeballing the graph is probably 
\begin_inset Formula $\left(\nicefrac{1}{2},\nicefrac{3}{4}\right)$
\end_inset

, so 
\begin_inset Formula $\log_{2}\left(b-a\right)=\log_{2}\nicefrac{1}{2}=-1$
\end_inset

.
 Hence the Method of Bisection needs 
\begin_inset Formula $n>9$
\end_inset

 to approximate the root out to the thousandths place.
 Using Newton's Method required less than one-third as much time.
\end_layout

\begin_layout Subsection*
Sage code
\end_layout

\begin_layout Standard
Sage doesn't have a command that tests immediately whether two numbers differ
 in their first 
\begin_inset Formula $d$
\end_inset

 decimal digits, so we have to figure out how to do this on our own.
 This isn't too hard, however; recall that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
round()
\end_layout

\end_inset

 command will round a number to the specified number of digits.
 So, all we need to do is round 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 to three digits, then check whether they are equal.
\end_layout

\begin_layout Standard
We also have to tell Sage to solve the equation of the line tangent to the
 curve.
 Back on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "subsec: equation of tangent line"

\end_inset

 we discussed how to construct the equation of a tangent line, so we don't
 repeat that here.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 command will give us the root, but remember that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 returns a list of solutions in the form of equations, so we have to extract
 the solution using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[0]
\end_layout

\end_inset

 to obtain the first element of the list, and the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.rhs()
\end_layout

\end_inset

 method to obtain the right-hand side of the equation.
\end_layout

\begin_layout Standard
These considerations suggest the following Sage code:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def newtons_method(f, a, d, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f, x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b, c = a + 2, a
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# loop until desired precision found
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while round(a, d) != round(b, d):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = c
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# find root of tangent line
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sol = solve(m*(x - a) + f(a), x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = sol[0].rhs()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return a
\end_layout

\end_deeper
\begin_layout Standard
\noindent
How does this work on the example we specified earlier?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
newtons_method(cos(x) - x, 1, 3)
\end_layout

\begin_layout SageOutput
((cos(cos(1)/(sin(1) + 1) + sin(1)/(sin(1) + 1)) + sin(cos(1)/(sin(1) +
 1) + sin(1)/(sin(1) + 1)))*sin(1) + cos(1)*sin(cos(1)/(sin(1) + 1) + sin(1)/(si
n(1) + 1)) + cos(cos(1)/(sin(1) + 1) + sin(1)/(sin(1) + 1)))/((sin(cos(1)/(sin(1
) + 1) + sin(1)/(sin(1) + 1)) + 1)*sin(1) + sin(cos(1)/(sin(1) + 1) + sin(1)/(si
n(1) + 1)) + 1)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Oops! That illustrates what we meant by needing to approximate our answers.
 Let's modify the code so that the assignment of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 inside the loop changes to
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = round(sol[0].rhs(), d+2)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Rounding to 
\begin_inset Formula $d+2$
\end_inset

 places should guarantee that we don't lose any accuracy in the first 
\begin_inset Formula $d$
\end_inset

 places, and it also ensures that we have an approximation, instead of the
 complicated symbolic expression we came up with earlier.
 We'll also using a floating-point first approximation, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
1.
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
newtons_method(cos(x) - x, 1., 3)
\end_layout

\begin_layout SageOutput
0.73911
\end_layout

\end_deeper
\begin_layout Subsection*
The relationship between definite and indefinite loops
\end_layout

\begin_layout Standard
It turns out that definite loops are really just a special kind of indefinite
 loop, and any 
\series bold
for
\series default
 loop can be implemented as a 
\series bold
while
\series default
 loop.
 In Sage, for instance, we can pass through a list 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L
\end_layout

\end_inset

 using a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop as follows:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
i = 0
\end_layout

\begin_layout SageInput
while i < len(L):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# do something with L[i]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = i + 1
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Unindexed collections like sets are only a little harder.
 Suppose 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

 is a set; we can 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
copy()
\end_layout

\end_inset

 it, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pop()
\end_layout

\end_inset

 elements out of it, and work with them.
 When we're done, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

 is still there.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
T = copy(S)
\end_layout

\begin_layout SageInput
while not len(T) == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t = T.pop()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# do something with t
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Nevertheless, it is useful from the perspective of someone reading a program
 to distinguish when a loop is definite from when it is indefinite.
 In the second case, for instance, it is quite possible that the lines indented
 beneath 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while not len(T) == 0:
\end_layout

\end_inset

 modify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
T
\end_layout

\end_inset

.
 In this case, the loop is 
\emph on
not
\emph default
 definite; even a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop of this sort can be definite only if the collection is not modified.
\begin_inset Foot
status open

\begin_layout Plain Layout
Technically, one could modify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
T
\end_layout

\end_inset

 even in a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop, but the meaning of the word makes it less likely a person would do
 that.
 It is routine, however, to perform a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop over a collection that is modified during the loop.
\end_layout

\end_inset


\end_layout

\begin_layout Section*
What could possibly go wrong?
\end_layout

\begin_layout Standard
We said that 
\series bold
for 
\series default
loops were 
\begin_inset Quotes eld
\end_inset

definite
\begin_inset Quotes erd
\end_inset

 because they iterate over a well-specified finite collection.
 This guarantees their termination.
 We have seen that 
\series bold
while
\series default
 loops work differently: they continue as long as a condition is true, so
 in fact they might never end.
 For a very easy example (don't try this at home, kids!):
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
while True:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = 1
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In this loop, the condition is specified to be 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

.
 It will never change to anything else.
 Nothing in the loop changes the fact that 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 is 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

, and the 
\series bold
while
\series default
 loop will never end.
 This is a good way to 
\begin_inset Quotes eld
\end_inset

hang
\begin_inset Quotes erd
\end_inset

 the computer, and if you were naughty enough to ignore our caution (really,
 don't try this at home, kids!) then you will need to stop Sage by either
 clicking the Stop button (cloud), selecting the Action menu, then clicking
 Interrupt (other server), or holding
\family typewriter
 
\family default

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\family typewriter
Ctrl
\end_layout

\end_inset

 and press 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 (command line).
\end_layout

\begin_layout Standard
This is not the only place it can show up; carefully prepared conditions
 can also go awry.
 Newton's Method can lead to an infinite loop when we do the following (one
 last time: don't try this at home, kids!):
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = x**3 - 2*x + 2
\end_layout

\begin_layout SageInput
newtons_method(f(x), 0, 3)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
In this case, the derivative is 
\begin_inset Formula $f'\left(x\right)=3x^{2}-2$
\end_inset

.
 The line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=0$
\end_inset

 is 
\begin_inset Formula $y=-2x+2$
\end_inset

; its root is 
\begin_inset Formula $x=1$
\end_inset

.
 The line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=1$
\end_inset

 is 
\begin_inset Formula $y=\left(x-1\right)+1$
\end_inset

; its root is 
\begin_inset Formula $x=0$
\end_inset

.
 We are back where we began\SpecialChar ldots
 oops!
\end_layout

\begin_layout Standard
The reader who looks at this example more carefully may object that it is
 unrealistic, in that the choice of 
\begin_inset Formula $x=0$
\end_inset

 seems obviously unwise, being somewhat distant from a root at
\begin_inset Formula 
\[
-\ \frac{\sqrt[3]{81}\left(2\cdot\sqrt[3]{81}+3\,\sqrt[3]{9-\sqrt{57}}\right)}{27\,\sqrt[3]{9-\sqrt{57}}}\approx-1.7693.
\]

\end_inset

It is even more obvious from the graph, which illustrates the oscillation
 of approximations between 
\begin_inset Formula $x=0$
\end_inset

 and 
\begin_inset Formula $x=1$
\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/newtons_infinite.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
While this is true, it is also the case that starting at 
\begin_inset Formula $x=0.5$
\end_inset

 will also lead you into this very oscillation; it just takes more steps
 before the algorithm starts whiplashing between
\begin_inset space ~
\end_inset

0 and
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout Subsection*
Going astray
\end_layout

\begin_layout Standard
An example of a 
\emph on
theoretical
\emph default
 infinite loop occurs with 
\begin_inset Formula $f\left(x\right)=\nicefrac{1}{1+x^{2}}-\nicefrac{1}{2}$
\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/newtons_led_astray.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Suppose we start Newton's method at 
\begin_inset Formula $x=3$
\end_inset

, which is not too far from the root at 
\begin_inset Formula $x=1$
\end_inset

.
 In this case, Sage suddenly quits with the error,
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
IndexError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
list index out of range
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
newtons_method(f(x), 3., 3)
\end_layout

\begin_layout SageError
IndexError: list index out of range
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you look at the additional information provided by Sage, you will see
 it complaining about the line 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b = round(sol[0].rhs(), d+2)
\end_layout

\end_inset

.
 Basically, 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
IndexError
\end_layout

\end_inset

 means that an entry doesn't exist in the list at the specified index.
 The index appears between brackets: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[0]
\end_layout

\end_inset

 in this case, so Sage can't find an entry in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sol
\end_layout

\end_inset

.
 This suggests there was no solution.
\end_layout

\begin_layout Standard
What happened? If you trace the computations by hand, or else place a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
print(a)
\end_layout

\end_inset

 at the beginning of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop, you will see the approximations thrash wildly between negative and
 positive values of increasingly large size:
\begin_inset Formula 
\[
3,\ -3.66667,\ 8.58926,\ -149.80063,\ 840240.29866,\ -1.48303\times10^{17},\ 8.15439\times10^{50}.
\]

\end_inset

This error is due to the fact that we're working with approximations, and
 the numbers get so large that the computer decides there is no solution
 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
solve()
\end_layout

\end_inset

 gives up, returning an empty list.
 Try tracing the tangent lines on the plot to see how this happens.
\end_layout

\begin_layout Standard
Again, the reader might object that 
\begin_inset Formula $x=3$
\end_inset

 does not seem like an especially compelling point to start Newton's Method.
 True, but 
\begin_inset Formula $x=0.09$
\end_inset

 is less worrisome, and that will do something similar.
\end_layout

\begin_layout Standard
A similar phenomenon can occur in Newton's Method when you aim for one root,
 but end up at another.
 This isn't a text on Numerical Analysis, so we won't go into those details,
 or some other difficulties with Newton's Method; we encourage the interested
 reader to pursue a text on that.
\end_layout

\begin_layout Section*
Division of Gaussian integers
\end_layout

\begin_layout Standard
We turn to an interesting ring called the 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
integers|seealso 
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

Gaussian integers
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Gaussian integers
\end_layout

\end_inset

Gaussian integers
\series default
, written 
\begin_inset Formula $\mathbb{Z}\left[i\right]$
\end_inset

 for short.
 Gaussian integers have the form 
\begin_inset Formula $a+bi$
\end_inset

, where 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 are integers.
 This differs from the complex numbers, which have the superficially similar
 form 
\begin_inset Formula $a+bi$
\end_inset

, with the difference that for complex numbers 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 are real numbers.
 In short,
\end_layout

\begin_layout Itemize
\begin_inset Formula $2+3i$
\end_inset

 is both complex and a Gaussian integer, while
\end_layout

\begin_layout Itemize
\begin_inset Formula $2+\nicefrac{i}{3}$
\end_inset

 and 
\begin_inset Formula $2+i\sqrt{3}$
\end_inset

 are complex, but not Gaussian integers.
\end_layout

\begin_layout Standard
Addition, subtraction, and multiplication of Gaussian integers is identical
 to complex numbers:
\begin_inset Formula 
\begin{align*}
\left(a+bi\right)+\left(c+di\right) & =\left(a+c\right)+\left(b+d\right)i\\
\left(a+bi\right)-\left(c+di\right) & =\left(a-c\right)+\left(b-d\right)i\\
\left(a+bi\right)\left(c+di\right) & =\left(ac-bd\right)+\left(ad+bc\right)i\ .
\end{align*}

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Gaussian integers!division|(
\end_layout

\end_inset

For division, however, we do not want to go from Gaussian integers to complex
 numbers, as Sage might give us by default:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
(2 + 3*I) / (1 - I)
\end_layout

\begin_layout SageOutput
5/2*I - 1/2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Rather, we would like a way to compute a quotient and remainder, much as
 Sage offers the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
//
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%
\end_layout

\end_inset

 operators for integers.
 In particular, we'd like an algorithm that behaves much like division of
 integers:
\end_layout

\begin_layout Named Theorem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
The Division Theorem for Integers
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
theorems!Division Theorem for Integers
\end_layout

\end_inset

Given an integer 
\begin_inset Formula $n$
\end_inset

, called the 
\series bold
dividend
\series default
, and a nonzero integer 
\begin_inset Formula $d$
\end_inset

, called the 
\series bold
divisor
\series default
, we can find an integer 
\begin_inset Formula $q$
\end_inset

, called the 
\series bold
quotient
\series default
, and a nonnegative integer 
\begin_inset Formula $r$
\end_inset

, called the 
\series bold
remainder
\series default
, such that
\begin_inset Formula 
\[
n=qd+r\qquad\textrm{and}\qquad r<\left|d\right|.
\]

\end_inset


\end_layout

\begin_layout Standard
Remember that the absolute value of a real number gives us an idea of its
 size; the analogue for complex numbers is the norm 
\begin_inset Formula $\Vert z\Vert$
\end_inset

.
 Translated to Gaussian integers, the theorem would become
\end_layout

\begin_layout Named Theorem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
The Division Theorem for Gaussian Integers
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
theorems!Division Theorem for Gaussian Integers
\end_layout

\end_inset

Given a Gaussian integer 
\begin_inset Formula $z$
\end_inset

, called the 
\series bold
dividend
\series default
, and a nonzero Gaussian integer 
\begin_inset Formula $d$
\end_inset

, called the 
\series bold
divisor
\series default
, we can find a Gaussian integer 
\begin_inset Formula $q$
\end_inset

, called the 
\series bold
quotient
\series default
, and another Gaussian integer 
\begin_inset Formula $r$
\end_inset

, called the 
\series bold
remainder
\series default
, such that
\begin_inset Formula 
\[
z=qd+r\qquad\textrm{and}\qquad\Vert r\Vert<\Vert d\Vert.
\]

\end_inset


\end_layout

\begin_layout Standard
This theorem says nothing about the remainder being nonnegative because
 
\begin_inset Quotes eld
\end_inset

negative
\begin_inset Quotes erd
\end_inset

 doesn't really make sense for Gaussian integers.
\end_layout

\begin_layout Standard
The Division Theorem for Gaussian Integers is in fact true, and we will
 prove it by constructing an algorithm that does what it claims.
 But how should we construct such an algorithm? Division of integers is
 repeated subtraction, and you can create a perfectly good division algorithm
 in the following way:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
divide_integers
\begin_inset CommandInset label
LatexCommand label
name "alg: integer division"

\end_inset


\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $n,d\in\mathbb{Z}$
\end_inset

 such that 
\begin_inset Formula $d\neq0$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $q\in\mathbb{Z}$
\end_inset

 and 
\begin_inset Formula $r\in\mathbb{N}$
\end_inset

 such that 
\begin_inset Formula $n=qd+r$
\end_inset

 and 
\begin_inset Formula $r<\left|d\right|$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $r=\left|n\right|$
\end_inset

, 
\begin_inset Formula $q=0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 have the same sign
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $s=1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $s=-1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
while
\series default
 
\begin_inset Formula $r<0$
\end_inset

 
\series bold
or 
\series default

\begin_inset Formula $r\geq\left|d\right|$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $q$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $r$
\end_inset

 by 
\begin_inset Formula $r-sd$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $q$
\end_inset

, 
\begin_inset Formula $r$
\end_inset


\end_layout

\begin_layout Standard
\noindent
This algorithm uses 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

step
\begin_inset Quotes erd
\end_inset

 the quotient in the correct direction towards 
\begin_inset Formula $n$
\end_inset

.
 For instance, if we divide 
\begin_inset Formula $-17$
\end_inset

 by 5, then 
\begin_inset Formula $r$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 have the following values at the beginning of each loop (
\begin_inset Formula $q$
\end_inset

 decreases because we have 
\begin_inset Formula $s=-1$
\end_inset

):
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $r$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-17$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-12$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $q$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $-4$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
Once 
\begin_inset Formula $r=3$
\end_inset

 and 
\begin_inset Formula $q=-4$
\end_inset

, the algorithm notices that 
\begin_inset Formula $r<\left|d\right|$
\end_inset

, so the 
\series bold
while
\series default
 loop ends, giving us the correct expression 
\begin_inset Formula 
\[
-17=qd+r=\left(-4\right)\times5+3.
\]

\end_inset


\end_layout

\begin_layout Standard
It makes sense that division of Gaussian integers should work the same way.
 Our general strategy, then, will take this approach:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode
let 
\begin_inset Formula $r=z$
\end_inset

, 
\begin_inset Formula $q=0$
\end_inset


\end_layout

\begin_layout Pseudocode

\series bold
while
\series default
 
\begin_inset Formula $\Vert r\Vert\geq\Vert d\Vert$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset Quotes eld
\end_inset

step 
\begin_inset Formula $q$
\end_inset

 up
\begin_inset Quotes erd
\end_inset

 using an appropriate value 
\begin_inset Formula $s$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $r$
\end_inset

 by 
\begin_inset Formula $r-sd$
\end_inset


\end_layout

\begin_layout Pseudocode

\series bold
return
\series default
 
\begin_inset Formula $q$
\end_inset

, 
\begin_inset Formula $r$
\end_inset


\end_layout

\begin_layout Standard
\noindent
Now we have to figure out what it means to 
\begin_inset Quotes eld
\end_inset

step 
\begin_inset Formula $q$
\end_inset

 up.
\begin_inset Quotes erd
\end_inset

 The difficulty lies in the fact that we can 
\begin_inset Quotes eld
\end_inset

increase
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $q$
\end_inset

 in two different directions: the real direction and the imaginary direction.
 As you saw in the introduction to the complex plane on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "complex plane"

\end_inset

, multiplying a complex number by 
\begin_inset Formula $i$
\end_inset

 rotates it 
\begin_inset Formula $90^{\circ}$
\end_inset

 counterclockwise:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/4+i_times_i_labeled.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
It is, therefore, possible to 
\begin_inset Quotes eld
\end_inset

step 
\begin_inset Formula $q$
\end_inset

 up
\begin_inset Quotes erd
\end_inset

 two different ways.
\end_layout

\begin_layout Standard
We'll solve this using a two-stage approach: first we minimize the distance
 when multiplying by integers; then we minimize the distance when multiplying
 by integer multiples of 
\begin_inset Formula $i$
\end_inset

.
 For instance, suppose we divide 
\begin_inset Formula $8+7i$
\end_inset

 by 
\begin_inset Formula $2+i$
\end_inset

.
 The divisor lies along the line of slope
\begin_inset space ~
\end_inset


\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

, so we 
\begin_inset Quotes eld
\end_inset

step
\begin_inset Quotes erd
\end_inset

 along that line in the appropriate direction until any further step would
 increase the distance.
 From geometry, we know this means getting as close to the altitude dropped
 from 
\begin_inset Formula $\left(8,7\right)$
\end_inset

 to the line 
\begin_inset Formula $y=\nicefrac{x}{2}$
\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/gaussian_division_extend_real_first_labeled.pdf
	lyxscale 50
	height 1.75in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Unfortunately, the 
\emph on
closest
\emph default
 point is 
\color red

\begin_inset Formula $\left(9\nicefrac{1}{5},4\nicefrac{3}{5}\right)$
\end_inset


\color inherit
 (in red), which corresponds to a complex number, but not a Gaussian integer.
 The closest Gaussian integer is the blue point that lies beyond the red
 point; the only way to check this is to compare the norm of each point
 as we move along the line.
\end_layout

\begin_layout Standard
The next stage is to step from our minimal Gaussian integer along a line
 perpendicular to the blue one, corresponding to repeated multiplication
 of 
\begin_inset Formula $d$
\end_inset

 by 
\begin_inset Formula $i$
\end_inset

.
 Again, we step along the line until any further step would increase the
 norm.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/indefinite_loop_graphics/gaussian_division_extend_real_first_then_imaginary_labeled.pdf
	lyxscale 50
	height 1.75in

\end_inset


\end_layout

\begin_layout Standard
\noindent
The closest point on the line 
\emph on
with integer values
\emph default
 is 
\begin_inset Formula $\left(9,7\right)$
\end_inset

, which corresponds to 
\begin_inset Formula $9+7i$
\end_inset

.
 We obtained this value after multiplying first by
\begin_inset space ~
\end_inset

5, then by 
\begin_inset Formula $i$
\end_inset

:
\begin_inset Formula 
\[
\left(2+i\right)\left(5+i\right)=10+2i+5i-1=9+7i.
\]

\end_inset

The remainder is
\begin_inset space ~
\end_inset


\begin_inset Formula $-1$
\end_inset

, whose norm is smaller than the divisor's.
\end_layout

\begin_layout Standard
Writing this as pseudocode gives us the following.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
divide_gaussian_integers
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $z,d\in\mathbb{Z}\left[i\right]$
\end_inset

 such that 
\begin_inset Formula $d\neq0$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $q,r\in\mathbb{Z}\left[i\right]$
\end_inset

 such that 
\begin_inset Formula $z=qd+r$
\end_inset

 and 
\begin_inset Formula $\Vert r\Vert<\Vert d\Vert$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $r=z$
\end_inset

, 
\begin_inset Formula $q=0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $\Vert r-d\Vert<\Vert r\Vert$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $s=1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $s=-1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
while
\series default
 
\begin_inset Formula $\Vert r-sd\Vert<\Vert r\Vert$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $q$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $r$
\end_inset

 by 
\begin_inset Formula $r-sd$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $\Vert r-id\Vert<\Vert r\Vert$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $s=i$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $s=-i$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
while
\series default
 
\begin_inset Formula $\Vert r-sd\Vert<\Vert r\Vert$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $q$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $r$
\end_inset

 by 
\begin_inset Formula $r-sd$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $q$
\end_inset

, 
\begin_inset Formula $r$
\end_inset


\end_layout

\begin_layout Standard
\noindent
As we planned, this algorithm uses an 
\series bold
if
\series default
 statement to check first whether it is better to step forward or backward
 by a real-valued factor.
 It then selects 
\begin_inset Formula $s$
\end_inset

 to be
\begin_inset space ~
\end_inset

1 or
\begin_inset space ~
\end_inset


\begin_inset Formula $-1$
\end_inset

 depending on which is more appropriate.
 The 
\series bold
while
\series default
 loop then steps in the appropriate direction, decreasing the norm until
 further steps would increase it.
 We cannot rely on the test 
\begin_inset Formula $\Vert r\Vert\geq\Vert d\Vert$
\end_inset

 as with integers, because we may need further minimization after the first
 stage because we still have 
\begin_inset Formula $\Vert r\Vert>\Vert d\Vert$
\end_inset

.
 This is why the loop checks 
\begin_inset Formula $\Vert r-sd\Vert<\Vert r\Vert$
\end_inset

 instead; roughly speaking, this translates as 
\begin_inset Quotes eld
\end_inset

stepping further reduces the norm of 
\begin_inset Formula $r$
\end_inset

.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The algorithm then uses a second 
\series bold
if
\series default
 statement to check whether it is better to step forward or backward by
 an imaginary-valued factor.
 It selects 
\begin_inset Formula $s$
\end_inset

 to be 
\begin_inset Formula $i$
\end_inset

 or 
\begin_inset Formula $-i$
\end_inset

 depending on which is more appropriate.
 The 
\series bold
while
\series default
 loop then steps in the appropriate direction, decreasing the norm until
 further steps would increase it.
 We could in fact test 
\begin_inset Formula $\Vert r\Vert\geq\Vert d\Vert$
\end_inset

 here, but for the sake of consistency we used the same basic structure.
\end_layout

\begin_layout Standard
This translates to the Sage code in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sage: division of Gaussian integers"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def divide_gaussian_integers(z, d):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

r, q = z, 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# which real way to step?
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if norm(r - d) < norm(r):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

s = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

s = -1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# loop to step
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while norm(r - s*d) < norm(r):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

q = q + s
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

r = r - s*d
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# which imaginary way to step?
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if norm(r - I*d) < norm(r):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

s = I
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

s = -I
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# loop to step
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while norm(r - s*d) < norm(r):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

q = q + s
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

r = r - s*d
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return q, r
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sage: division of Gaussian integers"

\end_inset

Sage code for division of Gaussian integers
\end_layout

\end_inset


\end_layout

\end_inset

 How does it perform on some examples?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
divide_gaussian_integers(4 + I, 1 - I)
\end_layout

\begin_layout SageOutput
(2*I + 1, 1)
\end_layout

\begin_layout SageInput
divide_gaussian_integers(8 + 7*I, 2 + I)
\end_layout

\begin_layout SageOutput
(5 + I, -1)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We already verified the second computation by stepped through it earlier;
 the first is not hard to do yourself.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
Gaussian integers!division|)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
A well-orderly retreat
\end_layout

\begin_layout Standard
With Newton's method, we encountered an infinite loop with unfortunate combinati
ons of a function 
\begin_inset Formula $f$
\end_inset

 and initial guess 
\begin_inset Formula $a$
\end_inset

.
 Is it possible to find two Gaussian integers such that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loops of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
divide_gaussian_integers()
\end_layout

\end_inset

 become infinite?
\end_layout

\begin_layout Standard
Not in this case, no.
 The difference is that the loops are built in such a way that we can describe
 the condition using a nonnegative integer that decreases after every successful
 pass through the loop.
 In both loops, that value is 
\begin_inset Formula $\Vert z-qd\Vert$
\end_inset

.
 Why? The algorithm initializes 
\begin_inset Formula $r=z$
\end_inset

, then 
\begin_inset Quotes eld
\end_inset

steps
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $q$
\end_inset

 closer to 
\begin_inset Formula $z$
\end_inset

 if and only if that would decrease the distance between 
\begin_inset Formula $z$
\end_inset

 and 
\begin_inset Formula $qd$
\end_inset

; in other words, 
\begin_inset Formula $\Vert z-qd\Vert$
\end_inset

.
 The norm is always an integer, and positive integers enjoy a property called
 the 
\series bold
well-ordering property
\series default
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
well-ordering property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
natural numbers!well-ordering property
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "WOP defininition"

\end_inset


\end_layout

\begin_layout Standard
\align center

\emph on
Every nonempty subset of 
\begin_inset Formula $\mathbb{N}$
\end_inset

 has a least element.
\end_layout

\begin_layout Standard
\noindent
If the loop were infinite, we could consider all the values of 
\begin_inset Formula $\Vert z-qd\Vert$
\end_inset

, having a subset of 
\begin_inset Formula $\mathbb{N}$
\end_inset

.
 The algorithm performs the loop if this distance decreases, and the well-orderi
ng property guarantees that this can happen only finitely many times, contradict
ing the supposition that the loop is infinite.
\end_layout

\begin_layout Standard
If possible, it is a very good idea when working with 
\series bold
while
\series default
 loops to formulate them in such a way that you exploit the well-ordering
 property somehow, thus guaranteeing termination.
 You can do this in pretty much every circumstance, though the consequence
 may be undesirable.
 One way to do this with Newton's Method, for instance, is to set a variable
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max_iterations
\end_layout

\end_inset

 to some large number, decrease it by one on every pass through the loop,
 then rephrase the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop's condition so that it quits the moment 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max_iterations
\end_layout

\end_inset

 hits
\begin_inset space ~
\end_inset

0.
 You might even choose to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset

 an exception.
 We conclude this section with a modified 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
terminating_newtons_method()
\end_layout

\end_inset

 that illustrates this technique.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def terminating_newtons_method(f, a, d, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

df(x) = diff(f, x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# a + 2 should be too far for premature termination
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b, c = a + 2, a
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

max_iterations = 100
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# loop for desired precision, up to threshhold
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while max_iterations > 0 and round(a, d) != round(b, d):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

a = c
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

m = df(a)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

sol = solve(m*(x - a) + f(a), x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b = sol[0].rhs()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

max_iterations = max_iterations - 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# error? report if so
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if max_iterations == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

raise ValueError('Too many iterations: ')
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

+ 'try a different initial value'
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return a
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Try it with the nonterminating example from before (
\begin_inset Formula $f=x^{3}-2x+2$
\end_inset

, 
\begin_inset Formula $a=0$
\end_inset

) and see how this behaves much better.
\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 In Sage, the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 keyword implements an indefinite loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 A 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop stops as soon as the condition becomes false, even if it hasn't completed
 all the statements indented beneath it.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 The smartest way to loop through a collection is using a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 An indefinite loop is a special kind of definite loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 It is impossible to create an infinite loop when using an indefinite loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 It is impossible to prevent 
\emph on
every
\emph default
 indefinite loop from becoming an infinite loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Newton's Method finds every root the Method of Bisection will find.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 Newton's Method finds some roots the Method of Bisection will not find.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 Gaussian division is more complicated than complex division because it
 requires a quotient 
\emph on
and
\emph default
 a remainder.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
10.
 The well-ordering property states that every subset of the natural numbers
 
\begin_inset Formula $\mathbb{N}$
\end_inset

 has a least element.
\end_layout

\begin_layout Subsection*
Multiple choice
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 A loop that iterates over a specific collection is a:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 definite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 indefinite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 infinite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 specific loop
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
2.
 A loop that repeats a specific number of times is a:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 definite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 indefinite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 infinite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 specific loop
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 A loop that repeats based on whether a condition remains true or false
 is a:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 definite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 indefinite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 infinite loop
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 specific loop
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 The main reason to use an indefinite loop instead of a definite loop is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 An indefinite loop is easier to guarantee termination.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 An indefinite loop is harder to guarantee termination.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 To decide whether to terminate, the loop must test a Boolean condition.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Definite loops are just a special kind of indefinite loop, so it's more
 consistent to use indefinite loops exclusively.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
5.
 Which of the following best characterizes the idea behind Newton's Method?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 Use the tangent line to find a new approximation, hopefully closer to the
 correct root.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Use the tangent line to find a new approximation, definitely closer to
 the correct root.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 Bisect the interval repeatedly until the endpoints agree on the first 
\begin_inset Formula $d$
\end_inset

 decimal digits.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 Trace along the curve with extreme precision, zooming and moving back and
 forth until you have the correct result.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 For which of the following functions would you be better advised to use
 the Method of Bisection to find a root, rather than Newton's Method?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Formula $\left|x+3\right|$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Formula $\sin\left(x+\pi\right)$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Formula $\left(x-3\right)^{2}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Formula $\ln\left(x-3\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
7.
 Under what conditions can Newton's Method fail to find a root?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 the function is discontinuous
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 the function is non-differentiable
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 the starting point leads away from the root
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 all of the above
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
8.
 Which of the following is a correct geometric interpretation of what happens
 when you multiply a complex number by 
\begin_inset Formula $-i$
\end_inset

? (
\emph on
Note that it is negative!
\emph default
)
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 The new number corresponds to a 
\begin_inset Formula $90^{\circ}$
\end_inset

 clockwise rotation in the complex plane.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 The new number corresponds to a 
\begin_inset Formula $90^{\circ}$
\end_inset

 counter-clockwise rotation in the complex plane.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 The new number corresponds to a 
\begin_inset Formula $180^{\circ}$
\end_inset

 rotation in the complex plane.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The new number is in the same direction as the original number, only longer.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
9.
 For which of the following pairs of numbers should Gaussian division fail?
 (dividend comes first, divisor second)
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Formula $4+i$
\end_inset

, 
\begin_inset Formula $1+i$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 0, 
\begin_inset Formula $1+i$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Formula $1+i$
\end_inset

, 0
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 none of the above
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
10.
 The reason we raised a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

 in the last version of Newton's Method is that:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 We consider the function was a bad value, because it is not continuous
 at 
\begin_inset Formula $a$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 We consider the starting point 
\begin_inset Formula $a$
\end_inset

 a bad value, because the function is not differentiable there.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 The values have grown too large, and Sage was unable to find a solution.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 We consider the starting point a bad value, because it seems caught in
 an infinite loop.
\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Consider the following Sage procedure:
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def aw(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t = 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while i <= n:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

t = t + i**2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = i + 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return t
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Compute 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
aw(4)
\end_layout

\end_inset

 by hand, showing your work.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Rewrite 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
aw(n)
\end_layout

\end_inset

 as a one-line mathematical expression, using summation notation.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Translate 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
aw(n)
\end_layout

\end_inset

 into a new procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
af(n)
\end_layout

\end_inset

, which does the same thing, but uses a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop instead.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Both the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop and the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop are inefficient.
 How would it be smarter to implement this procedure?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
2.
 The Syracuse sequence is defined in the following manner.
 Let 
\begin_inset Formula $S_{1}\in\mathbb{N}$
\end_inset

, and
\begin_inset Formula 
\[
S_{i+1}=\begin{cases}
\nicefrac{S_{i}}{2}, & S_{i}\textrm{ is even;}\\
3S_{i}+1,\quad & S_{i}\textrm{ is odd.}
\end{cases}
\]

\end_inset

The sequence terminates once 
\begin_inset Formula $S_{i}=1$
\end_inset

.
 It is believed that the sequence terminates with 
\begin_inset Formula $S_{i}=1$
\end_inset

 for every value of 
\begin_inset Formula $S_{1}$
\end_inset

, but no one actually knows this.
 Compute by hand the sequence for several different values of 
\begin_inset Formula $S_{1}$
\end_inset

, and notice how it always seems to reach 
\begin_inset Formula $S_{i}=1$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Division of univariate polynomials 
\begin_inset Formula $f$
\end_inset

 by 
\begin_inset Formula $g$
\end_inset

 works in the following way (here, 
\begin_inset Formula $\deg\left(r\right)$
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

degree of 
\begin_inset Formula $r$
\end_inset


\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Formula $\textrm{lc}\left(r\right)$
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

leading coefficient of 
\begin_inset Formula $r$
\end_inset


\begin_inset Quotes erd
\end_inset

):
\end_layout

\begin_deeper
\begin_layout Itemize
let 
\begin_inset Formula $r=f$
\end_inset

, 
\begin_inset Formula $q=0$
\end_inset


\end_layout

\begin_layout Itemize

\series bold
while
\series default
 
\begin_inset Formula $\deg\left(r\right)\geq\deg\left(g\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
let 
\begin_inset Formula $t=x^{\deg\left(r\right)-\deg\left(g\right)}$
\end_inset

, 
\begin_inset Formula $c=\nicefrac{\textrm{lc}\left(r\right)}{\textrm{lc}\left(g\right)}$
\end_inset


\end_layout

\begin_layout Itemize
replace 
\begin_inset Formula $r$
\end_inset

 by 
\begin_inset Formula $r-ctg$
\end_inset


\end_layout

\begin_layout Itemize
add 
\begin_inset Formula $ct$
\end_inset

 to 
\begin_inset Formula $q$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
return 
\begin_inset Formula $q$
\end_inset

, 
\begin_inset Formula $r$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(a) Choose 5 pairs of polynomials, and perform the division algorithm on
 them.
 You can use Sage to help speed the subtractions, but if you use Sage's
 Division command you won't be able to answer at least one of the next few
 problems.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Do you think this algorithm exploits the well-ordering property? Why
 or why not?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Is there a pattern to how many times the algorithm passes through the
 loop?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Could the loop be written as a 
\series bold
for
\series default
 loop? If so, how? If not, why not?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 Show how these 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loops can be rewritten using a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop in each case:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a)
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
for k in range(num):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<body> # possibly depending on k
\end_layout

\end_deeper
\end_deeper
\begin_layout Labeling
\labelwidthstring (m)
(b)
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
for elem in L: # L is a collection (list/tuple/set)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<body>
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# depending on elem
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
5.
 Can every 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop be rewritten into a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop? Explain!
\end_layout

\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 In Short Answer #1, you worked with the Syracuse sequence.
 Write pseudocode for how you might implement this as a program.
 It should accept an argument for 
\begin_inset Formula $S_{1}$
\end_inset

, sets 
\begin_inset Formula $s=S_{1}$
\end_inset

, apply the formula to 
\begin_inset Formula $s$
\end_inset

 to find its next value, and terminate when 
\begin_inset Formula $s=1$
\end_inset

.
 Implement your pseudocode.
 (You can test whether 
\begin_inset Formula $s$
\end_inset

 is even using Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%
\end_layout

\end_inset

 operator, as a number is even when the remainder after division by
\begin_inset space ~
\end_inset

2 is
\begin_inset space ~
\end_inset

0.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 The traditional algorithm for integer division on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "alg: integer division"

\end_inset

 finds the closest 
\emph on
nonnegative
\emph default
 remainder.
 In many cases, allowing a negative remainder would leave a smaller distance
 between 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $dq$
\end_inset

.
 For example, traditional division would have
\begin_inset Formula 
\[
-17=-4\times5+3\ ,
\]

\end_inset

while allowing negative remainders would have
\begin_inset Formula 
\[
-17=-3\times5+\left(-2\right)\ .
\]

\end_inset

It is possible to formulate an algorithm that performs 
\emph on
this
\emph default
 
\begin_inset Quotes eld
\end_inset

smallest remainder
\begin_inset Quotes erd
\end_inset

 division.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Try some examples where you use repeated subtraction to perform 
\begin_inset Quotes eld
\end_inset

smallest remainder
\begin_inset Quotes erd
\end_inset

 division.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) How would you teach a friend to perform this division? Think about the
 precise instructions you'd have to give, and formulate pseudocode.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Implement your algorithm as a Sage program, and test it.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 When we implemented the Method of Bisection, we used a logarithm to determine
 the required number of steps.
 This was the only way we were able to use a definite loop.
 It is possible to rephrase the algorithm with an indefinite loop, similar
 to Newton's Method: terminate once 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 agree to the specified number of digits.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Do this.
 Rewrite both the pseudocode and then the Sage code to see this in action.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Which method do you prefer, and why?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Which method do you think is easier for someone else to read, understand,
 and/or modify? Again, why?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 In Short Answer #3, you worked on division of univariate polynomials.
 Write full pseudocode for it — that is, give the algorithm a name, specify
 the inputs precisely, and the outputs precisely.
 Then implement it as a Sage program, and test it on the same examples you
 did in that problem.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 A positive integer 
\begin_inset Formula $n$
\end_inset

 is 
\series bold
prime
\series default
 if no integer from
\begin_inset space ~
\end_inset

2 to 
\begin_inset Formula $\sqrt{n}$
\end_inset

 divides 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Write a Sage procedure that accepts a value of 
\begin_inset Formula $n$
\end_inset

 as input and finds the smallest nontrivial positive divisor of 
\begin_inset Formula $n$
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
A positive divisor is nontrivial if it is not
\begin_inset space ~
\end_inset

1.
\end_layout

\end_inset

 If the number is prime, the procedure should 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
raise
\end_layout

\end_inset

 a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Write another Sage procedure that accepts a positive integer 
\begin_inset Formula $k$
\end_inset

 as input and returns a list of every prime number less than or equal to
 
\begin_inset Formula $k$
\end_inset

.
 Have the procedure invoke the answer to part (a).
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) The Goldbach conjecture asserts that every even number is the sum of
 two prime numbers.
 Despite having been verified up to unimaginably ginormous values, no one
 has yet proved the Goldbach conjecture is true for all positive integers.
 Write a procedure that accepts a positive integer 
\begin_inset Formula $m$
\end_inset

 as input, raises a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

 if 
\begin_inset Formula $m$
\end_inset

 is not even; otherwise, it finds two prime numbers that sum to 
\begin_inset Formula $m$
\end_inset

.
 Have the procedure invoke the answer to part (b).
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 The greatest common divisor of two integers is the largest integer that
 divides both of them.
 An algorithm to compute the greatest common divisor was already known to
 Euclid of Alexandria more than
\begin_inset space ~
\end_inset

2000 years ago:
\end_layout

\begin_deeper
\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
gcd
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a,b\in\mathbb{Z}$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
the greatest common divisor of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $m=\left|a\right|$
\end_inset

, 
\begin_inset Formula $n=\left|b\right|$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
while
\series default
 
\begin_inset Formula $n\neq0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $d=n$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $n$
\end_inset

 by the remainder of division of 
\begin_inset Formula $m$
\end_inset

 by 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $m$
\end_inset

 by 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(a) Implement this as Sage code, and check that it gives correct greatest
 common divisors for several large numbers.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Choose a small pair of nonzero integers and trace through the algorithm,
 step-by-step, showing how it arrives at the 
\begin_inset Formula $\gcd$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
7.
 The Extended Euclidean Algorithm not only finds the gcd of two nonzero
 integers 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

, it finds numbers 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 such that
\begin_inset Formula 
\[
\gcd\left(a,b\right)=ac+bd.
\]

\end_inset

For instance, 
\begin_inset Formula $\gcd\left(4,6\right)=-1\times4+1\times6$
\end_inset

.
 We can describe it as follows:
\end_layout

\begin_deeper
\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
extended_euclidean_algorithm
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $a,b\in\mathbb{Z}$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $c,d\in\mathbb{Z}$
\end_inset

 such that 
\begin_inset Formula $\gcd\left(a,b\right)=ac+bd$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $m=\left|a\right|$
\end_inset

, 
\begin_inset Formula $n=\left|b\right|$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $s=0$
\end_inset

, 
\begin_inset Formula $c=1$
\end_inset

, 
\begin_inset Formula $t=1$
\end_inset

, 
\begin_inset Formula $d=0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
while
\series default
 
\begin_inset Formula $n\neq0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $q$
\end_inset

 be the quotient of dividing 
\begin_inset Formula $m$
\end_inset

 by 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $r$
\end_inset

 be the remainder of dividing 
\begin_inset Formula $m$
\end_inset

 by 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $m=n$
\end_inset

 and 
\begin_inset Formula $n=r$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $w=c$
\end_inset

, then 
\begin_inset Formula $c=s$
\end_inset

 and 
\begin_inset Formula $s=w-qs$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $w=d$
\end_inset

, then 
\begin_inset Formula $d=t$
\end_inset

 and 
\begin_inset Formula $t=w-qt$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $c$
\end_inset

, 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Standard
\noindent
Implement this as Sage code, and verify that it gives the correct values
 of 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 for several large values of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

; that is, verify that the values 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 it returns satisfy 
\begin_inset Formula $ac+bd=\gcd\left(a,b\right)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Chapter
Repeating yourself inductively
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: repeating inductively"

\end_inset

Another form of repetition is called 
\emph on
recursion
\emph default
.
 The term literally means, 
\begin_inset Quotes eld
\end_inset

running again,
\begin_inset Quotes erd
\end_inset

 because the idea is that an algorithm solves a problem by breaking it into
 simpler cases, invoking itself on those smaller cases, then putting the
 results back together.
 Those smaller cases typically break their cases into even smaller cases.
 This may sound a bit dodgy: What's to stop us from hitting an infinite
 chain?
\end_layout

\begin_layout Standard
When organizing a recursion, we try to set it up in such a way that this
 strategy creates a chain of problems that lead to a smallest possible element.
 If we can relate them to the natural numbers, then even better, as the
 natural numbers enjoy a property called the 
\series bold
well-ordering property
\series default
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
well-ordering property
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
natural numbers!well-ordering property
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\emph on
Every nonempty subset of 
\begin_inset Formula $\mathbb{N}$
\end_inset

 has a least element.
\end_layout

\begin_layout Standard
\noindent
(If this sounds familiar, it's because we referred to it 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "WOP defininition"
plural "false"
caps "false"
noprefix "false"

\end_inset

 of Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap: indefinite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

.)
\end_layout

\begin_layout Section*
Recursion
\end_layout

\begin_layout Subsection*
A classical example
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion|(
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Pascal's triangle|(
\end_layout

\end_inset

A number of problems translate naturally to recursion.
 One example is Pascal's triangle, which looks like so:
\begin_inset Formula 
\[
\begin{array}{ccccccccccc}
 &  &  &  &  & 1\\
 &  &  &  & 1 &  & 1\\
 &  &  & 1 &  & 2 &  & 1\\
 &  & 1 &  & 3 &  & 3 &  & 1\\
 & 1 &  & 4 &  & 6 &  & 4 &  & 1\\
\iddots &  &  &  &  & \vdots &  &  &  &  & \ddots
\end{array}
\]

\end_inset

The rows of this triangle appear in many places, such as the expansion of
 binomials:
\begin_inset Formula 
\[
\begin{array}{ccccccccccccc}
\left(x+1\right)^{0} & = &  &  &  &  &  & 1\\
\left(x+1\right)^{1} & = &  &  &  &  & 1x & + & 1\\
\left(x+1\right)^{2} & = &  &  &  & 1x^{2} & + & 2x & + & 1\\
\left(x+1\right)^{3} & = &  &  & 1x^{3} & + & 3x^{2} & + & 3x & + & 1\\
\left(x+1\right)^{4} & = &  & 1x^{4} & + & 4x^{3} & + & 6x^{2} & + & 4x & + & 1\\
\vdots &  & \iddots &  &  &  &  &  &  &  &  &  & \ddots
\end{array}
\]

\end_inset

Take a moment to try and deduce the triangle's pattern.
\end_layout

\begin_layout Standard
Do you see it? if not, take another moment to try and work it out.
\end_layout

\begin_layout Standard
Hopefully you saw that each row is defined in the following way.
 Let the top row be row
\begin_inset space ~
\end_inset

1, the next row down row
\begin_inset space ~
\end_inset

2, and so forth.
\end_layout

\begin_layout Itemize
The first and last elements on 
\emph on
each
\emph default
 row are both
\begin_inset space ~
\end_inset

1.
\end_layout

\begin_layout Itemize
The remaining elements satisfy 
\begin_inset Formula $q_{j}=p_{j-1}+p_{j}$
\end_inset

, where
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $q_{j}$
\end_inset

 is the element in entry 
\begin_inset Formula $j$
\end_inset

 on row 
\begin_inset Formula $i$
\end_inset

, and
\end_layout

\begin_layout Itemize
\begin_inset Formula $p_{j-1}$
\end_inset

 and 
\begin_inset Formula $p_{j}$
\end_inset

 are the elements in entries 
\begin_inset Formula $j-1$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 on row 
\begin_inset Formula $i-1$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
To know the entries in row
\begin_inset space ~
\end_inset


\begin_inset Formula $i$
\end_inset

, then, we first need to know the entries on row 
\begin_inset Formula $i-1$
\end_inset

.
 We can loop through those entries to give us the subsequent entries.
 We know how many entries there are in that row: 
\begin_inset Formula $i-1$
\end_inset

, though we can also inquire from the row itself.
\begin_inset Foot
status open

\begin_layout Plain Layout
In the pseudocode, we could have written 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\left|\textit{prev}\right|$
\end_inset


\begin_inset Quotes erd
\end_inset

 to indicate this.
 In the Sage code, we could simply write 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
prev.len()
\end_layout

\end_inset

.
\end_layout

\end_inset

 So we can apply a definite loop.
 This gives us the following, recursive pseudocode to compute row 
\begin_inset Formula $i$
\end_inset

:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
pascals_row
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $i\in\mathbb{N}$
\end_inset

, the desired row of Pascal's triangle
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
the sequence of numbers in row 
\begin_inset Formula $i$
\end_inset

 of Pascal's triangle
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $i=1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
result
\emph default
 = [1]
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else if
\series default
 
\begin_inset Formula $i=2$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
result
\emph default
 = [1,1]
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
prev
\emph default
 = 
\emph on
pascals_row
\emph default
(
\begin_inset Formula $i-1$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
result
\emph default
 = [1]
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $j\in\left(2,3,\ldots,i-1\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

append 
\begin_inset Formula $\textit{prev}_{j-1}+\textit{prev}_{j}$
\end_inset

 to 
\emph on
result
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

append 1 to 
\emph on
result
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\emph on
result
\end_layout

\begin_layout Standard
\noindent
This translates to the following Sage code:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def pascals_row(i):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if i == 1:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = [1]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif i == 2:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = [1, 1]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute previous row first
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

prev = pascals_row(i - 1)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# this row starts with 1...
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = [1]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# ...adds two above next in this row...
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(1, i - 1):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result.append(prev[j-1] + prev[j])
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# ...
 and ends with 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result.append(1)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We can verify it on the lines we saw above, and generate more that you can
 verify by hand:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
pascals_row(1)
\end_layout

\begin_layout SageOutput
[1]
\end_layout

\begin_layout SageInput
pascals_row(5)
\end_layout

\begin_layout SageOutput
[1, 4, 6, 4, 1]
\end_layout

\begin_layout SageInput
pascals_row(10)
\end_layout

\begin_layout SageOutput
[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
Pascal's triangle|)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
An example so classical it's medieval
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
Fibonacci sequence|(
\end_layout

\end_inset

The next example is one of the fundamental problems of mathematics,
\end_layout

\begin_layout Standard
\align center

\emph on
How quickly will a population of bunnies grow?
\end_layout

\begin_layout Standard
\align center
\begin_inset CommandInset label
LatexCommand label
name "img: rabbit island"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{https://en.wikipedia.org/wiki/Okunoshima}{
\end_layout

\end_inset


\begin_inset Graphics
	filename graphics/bunnies/rabbit_island_cropped_scaled.jpg
	lyxscale 10
	width 4.5in

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\size footnotesize
\emph on
You have to ask?!?
\end_layout

\begin_layout Standard
\noindent
You think we're joking, but we're not.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "At least one journal"
target "http://www.fq.math.ca"
literal "false"

\end_inset

 is dedicated to these bunnies.
\end_layout

\end_inset

 As you might guess, these bunnies are no ordinary bunnies; they obey some
 special laws of reproduction:
\end_layout

\begin_layout Itemize
In the beginning, there was one pair — but they were immature.
\end_layout

\begin_layout Itemize
Every pair of bunnies takes one season to mature.
\end_layout

\begin_layout Itemize
Once mature, every pair of bunnies produces a new pair of bunnies every
 season.
\end_layout

\begin_layout Itemize
The bunnies are immortal.
 They have no predators, and they obtain their energy from the sun, so they
 never run out of food.
 Amazingly, they never tire of the new children waking them up at night,
 crawling all over them, and generally getting in the way of nobler pursuits,
 such as the contemplation of the form of the ideal bunny.
\begin_inset Foot
status open

\begin_layout Plain Layout
Gratuitous (and irrelevant) reference to Platonic philosophy included at
 no extra charge.
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Foot
status open

\begin_layout Plain Layout
Come to think of it, it may be a wiser idea to call them flowers than bunnies,
 especially since flowers are so much more awesome than bunnies.
 — Well, that's not actually true, is it? Bunnies eat flowers, but flowers
 don't eat bunnies.
 Wouldn't it be awesome if they were bunny-eating flowers, though? Well,
 no, not really; they made a movie about that, and those flowers almost
 took over the world.
 Kind of weird to realize that bunnies are more peaceful than flowers, isn't
 it? In any case, the die was cast several centuries back when a more clever
 mathematician than we are proposed the problem using bunnies, so bunnies
 it is.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The formula for the number of pairs of bunnies in one season is defined
 by the number in the previous two seasons:
\begin_inset Formula 
\[
b_{n}=b_{n-1}+b_{n-2}.
\]

\end_inset

This is a perfect example of recursion.
 It is natural to try and implement this recursively with a procedure that
 accepts an integer for the number of seasons that have passed.
 If it is
\begin_inset space ~
\end_inset

1 or
\begin_inset space ~
\end_inset

2, the answer is easy: 1.
 Otherwise, we compute the number of bunnies in the previous two seasons.
\begin_inset CommandInset label
LatexCommand label
name "fibonacci algorithm"

\end_inset


\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
funny_bunnies
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

, the number of seasons
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
the number of bunny couples after 
\begin_inset Formula $n$
\end_inset

 seasons
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $n=1$
\end_inset

 
\series bold
or
\series default
 
\begin_inset Formula $n=2$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
result
\emph default
 = 1
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
result
\emph default
 = 
\emph on
funny_bunnies
\emph default
(
\begin_inset Formula $n-1$
\end_inset

) + 
\emph on
funny_bunnies
\emph default
(
\begin_inset Formula $n-2$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\emph on
result
\end_layout

\begin_layout Standard
\noindent
To translate this to Sage code, keep in mind that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

 does 
\emph on
not
\emph default
 iterate on the last value, so we need its limit to be 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n-1
\end_layout

\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def funny_bunnies(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if n == 1 or n == 2:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = funny_bunnies(n-1) + funny_bunnies(n-2)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\begin_layout SageInput
[funny_bunnies(i) for i in range(2,10)]
\end_layout

\begin_layout SageOutput
[2, 3, 5, 8, 13, 21, 34]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's a very interesting list of numbers.
 It is so interesting that it's named after a mathematician who described
 it during the Middle Ages, Leonardo da Pisa, better known as Fibonacci,
\begin_inset Foot
status open

\begin_layout Plain Layout
Fibonacci lived in a period known as the High Middle Ages, and didn't care
 about bunnies so much as the fact that people were still using I, V, X,
 L, C, D, and M to write numbers and do arithmetic — Roman numerals, that
 is.
 He realized this was very inefficient, and it would be better to use the
 Hindu-Arabic way of writing numbers: 0, 1, 2, \SpecialChar ldots
, 9 and all that.
 Trouble was, most people were accustomed to working with a old-timey calculator
 called an 
\emph on
abacus
\emph default
, and had been trained how to use an abacus with Roman numerals.
 Then, as now, people were reluctant to give up a computational crutch.
\end_layout

\begin_layout Plain Layout
To get around this, he wrote a book called 
\emph on
Liber Abaci
\emph default
 (
\begin_inset Quotes eld
\end_inset

Book of the Abacus
\begin_inset Quotes erd
\end_inset

).
 The book's main point was to show how you could solve all the same problems
 with Hindu-Arabic numbers 
\emph on
without
\emph default
 using an abacus, and work far more efficiently, to boot.
 Getting work done faster allowed one to do more business.
 The Platonic bunnies were one of the examples he used in the book.
 It was quite possibly the first time someone used a funny bunny to make
 money.
\end_layout

\begin_layout Plain Layout
Oh, we're not done making you groan yet, not by a long shot.
 You may think 
\emph on
Liber Abaci
\emph default
 kind of a dull title — certainly not as catchy as the slogan, 
\begin_inset Quotes eld
\end_inset

Think Different,
\begin_inset Quotes erd
\end_inset

 though Fibonacci would have had stronger grounds to use that slogan than
 anyone who popularized it today — but people back then were interested
 more in substance than in style, so Fibonacci succeeded both in weaning
 people off Roman numerals and in getting his name attached to a sequence
 of numbers that, ironically, had been studied by Indian (Hindu) mathematicians
 long before Leo was himself a Fibonacci number.
\end_layout

\begin_layout Plain Layout
Still, not bad, for a bunch of intellectually backwards middle-agers.
\end_layout

\begin_layout Plain Layout
(And, yes, we do recognize the irony in referring to an abacus as a 
\begin_inset Quotes eld
\end_inset

computational crutch
\begin_inset Quotes erd
\end_inset

 in a text dedicated to doing math problems with the Sage computer algebra
 system, but this footnote is designed to be rich in irony.)
\end_layout

\end_inset

 so people call it the 
\series bold
Fibonacci sequence
\series default
.
 We can describe it as follows:
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Formula $F$
\end_inset

 stands for 
\begin_inset Quotes eld
\end_inset

funny,
\begin_inset Quotes erd
\end_inset

 not 
\begin_inset Quotes eld
\end_inset

Fibonacci.
\begin_inset Quotes erd
\end_inset

 Why do you ask?
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "pg: Fibaonacci definition"

\end_inset


\begin_inset Formula 
\[
F_{\textrm{next}}=F_{\textrm{total}}+F_{\textrm{mature}}.
\]

\end_inset

That means, 
\begin_inset Quotes eld
\end_inset

the number of bunnies next season is the sum of the total number of bunnies
 and the number of mature bunnies.
\begin_inset Quotes erd
\end_inset

 We could also say that the number of total bunnies is the 
\begin_inset Quotes eld
\end_inset

current
\begin_inset Quotes erd
\end_inset

 number of bunnies, while the number of mature bunnies is the number of
 bunnies we had last season.
 That means 
\begin_inset Quotes eld
\end_inset

the number of bunnies next season is the sum of the number of bunnies this
 season and the number of bunnies last season.
\begin_inset Quotes erd
\end_inset

 So we could write:
\begin_inset Formula 
\[
F_{\textrm{next}}=F_{\textrm{curr}}+F_{\textrm{prev}}.
\]

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Fibonacci sequence|)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
An example you can't actually program
\end_layout

\begin_layout Standard
Another example is the proof technique called 
\emph on
induction.

\emph default
 The principle of induction is that:
\end_layout

\begin_layout Itemize
if you can prove:
\end_layout

\begin_deeper
\begin_layout Itemize
a property applies to
\begin_inset space ~
\end_inset

1, and
\end_layout

\begin_layout Itemize
whenever it applies to 
\begin_inset Formula $n$
\end_inset

, it also applies to 
\begin_inset Formula $n+1$
\end_inset

,
\end_layout

\end_deeper
\begin_layout Itemize
then the property applies to all the positive integers.
\end_layout

\begin_layout Standard
The idea is that if we can show the first bullet is true, then the second
 bullet is true for any positive integer 
\begin_inset Formula $m$
\end_inset

 because
\end_layout

\begin_layout Itemize
if it's true for 
\begin_inset Formula $m-1$
\end_inset

, then it's true for 
\begin_inset Formula $m$
\end_inset

; and
\end_layout

\begin_layout Itemize
if it's true for 
\begin_inset Formula $m-2$
\end_inset

, then it's true for 
\begin_inset Formula $m-1$
\end_inset

, and
\begin_inset Newline newline
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Itemize
if it's true for
\begin_inset space ~
\end_inset

1, then it's true for 2.
\end_layout

\begin_layout Standard
We know it's true for
\begin_inset space ~
\end_inset

1 (that's in the first bullet), so the chain of implications tells us it's
 true for 
\begin_inset Formula $m$
\end_inset

, which was an arbitrary positive integer.
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion|)
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Alternatives to recursion
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion!alternatives|(
\end_layout

\end_inset

Recursion is fairly common, and reasonably easy to implement, but it may
 not always be the best approach.
 It's not hard at all to compute Pascal's triangle even to the 900th row,
 and you might be able to take it further if Sage did not place a limit
 on the number of times you can apply recursion:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RuntimeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
maximum recursion depth exceeded while calling a Python object
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
P = pascals_row(900)
\end_layout

\begin_layout SageInput
len(P)
\end_layout

\begin_layout SageOutput
900
\end_layout

\begin_layout SageInput
P[-3]
\end_layout

\begin_layout SageOutput
403651
\end_layout

\begin_layout SageInput
P = pascals_row(1000)
\end_layout

\begin_layout SageError
RuntimeError: maximum recursion depth exceeded while calling a Python object
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This limit is there for good reason, by the way; recursion can use up quite
 a bit of a special sort of memory,
\begin_inset Foot
status open

\begin_layout Plain Layout
For those who know some computer science, we're talking about the stack.
\end_layout

\end_inset

 and too deep a recursion can also indicate an infinite loop, or at least
 that something has gone terribly awry.
\end_layout

\begin_layout Standard
With the Fibonacci sequence, things go awry rather quickly, but in a different
 way.
 Try computing the 
\begin_inset Formula $n$
\end_inset

th Fibonacci number for really-not-very-large-at-all values of 
\begin_inset Formula $n$
\end_inset

, and you'll see the length the problems take a sharp turn upwards quickly.
 On the authors' machines, for instance, there is already a noticeable lag
 at 
\begin_inset Formula $n=30$
\end_inset

; 
\begin_inset Formula $n=35$
\end_inset

 takes several seconds; and for 
\begin_inset Formula $n=40$
\end_inset

 you might just be able to make yourself a cup of coffee
\begin_inset Foot
status open

\begin_layout Plain Layout
Whether you'd want to drink it is another story, but before the authors
 get into another argument on caffeinated drinks, we'll stop there.
\end_layout

\end_inset

 before it finished.
 You might think you could get around this delay with a faster computer,
 and you'd be wrong, very wrong.
 The problem is that there are too many branches at each step.
 To see this clearly, let's expand a computation of the 7th Fibonacci number
 down to one of the two base cases:
\begin_inset Formula 
\begin{align*}
F_{7} & =F_{6}+F_{5}\\
 & =\left(F_{5}+F_{4}\right)+\left(F_{4}+F_{3}\right)\\
 & =\left[\left(F_{4}+F_{3}\right)+\left(F_{3}+F_{2}\right)\right]+\left[\left(F_{3}+F_{2}\right)+\left(F_{2}+F_{1}\right)\right]\\
 & =\left[\left[\left(F_{3}+F_{2}\right)+\left(F_{2}+F_{1}\right)\right]+\left(F_{2}+F_{1}\right)+F_{2}\right]+\left[\left[\left(F_{2}+F_{1}\right)+F_{2}\right]+\left(F_{2}+F_{1}\right)\right]\\
 & =\left[\left[\left[\left(F_{2}+F_{1}\right)+F_{2}\right]+\left(F_{2}+F_{1}\right)\right]+\left(F_{2}+F_{1}\right)+F_{2}\right]\\
 & \qquad+\left[\left[\left(F_{2}+F_{1}\right)+F_{2}\right]+\left(F_{2}+F_{1}\right)\right]
\end{align*}

\end_inset

Twelve 
\begin_inset Formula $F$
\end_inset

's are 
\emph on
not
\emph default
 the base cases 
\begin_inset Formula $F_{1}$
\end_inset

 and 
\begin_inset Formula $F_{2}$
\end_inset

; each of those requires a recursion.
 That's an awful lot, but it doesn't sound that bad.
 On the other hand, consider the next number,
\begin_inset Formula 
\[
F_{8}=F_{7}+F_{6}.
\]

\end_inset

We've already counted 12 recursions for 
\begin_inset Formula $F_{7}$
\end_inset

, and you can look up to see that 
\begin_inset Formula $F_{6}$
\end_inset

 requires
\begin_inset space ~
\end_inset

7.
 So 
\begin_inset Formula $F_{8}$
\end_inset

 will want
\begin_inset space ~
\end_inset


\begin_inset Formula $12+7+1=20$
\end_inset

 recursions.
 (We need
\begin_inset space ~
\end_inset

1 extra for the expansion of 
\begin_inset Formula $F_{7}$
\end_inset

 itself.) You can see immediately that the number of recursions of the Fibonacci
 sequence grows in a Fibonacci-like fashion:
\begin_inset Formula 
\[
0,0,1,2,4,7,12,20,33,54,\ldots
\]

\end_inset

Already 
\begin_inset Formula $F_{10}$
\end_inset

 requires 
\begin_inset Formula $54\approx5\times10$
\end_inset

 recursions; notice the jump in size from 
\begin_inset Formula $F_{7}$
\end_inset

, which required 
\begin_inset Quotes eld
\end_inset

only
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $12\approx2\times7$
\end_inset

.
 With the Fibonacci sequence, the number of recursions is growing too fast!
\end_layout

\begin_layout Standard
Computing the 100th Fibonacci number might, therefore, seem out of reach,
 but there are several ways around this conundrum.
 The first two approaches to solving this problem rely on the fact that
 when computing 
\begin_inset Formula $F_{7}$
\end_inset

, we computed 
\begin_inset Formula $F_{5}$
\end_inset

 twice:
\begin_inset Formula 
\[
F_{7}=F_{6}+F_{5}=\left(\mathbf{F_{5}}+F_{4}\right)+\mathbf{F_{5}}.
\]

\end_inset

We then computed 
\begin_inset Formula $F_{4}$
\end_inset

 three times:
\begin_inset Formula 
\[
F_{7}=\left[\left(\mathbf{F_{4}}+F_{3}\right)+\mathbf{F_{4}}\right]+\left(\mathbf{F_{4}}+F_{3}\right).
\]

\end_inset

\SpecialChar ldots
and so forth.
 So the problem isn't that the Fibonacci 
\emph on
inherently
\emph default
 requires an unreasonable amount of recursion; it's that we're wasting a
 lot of computations that we could reuse.
\end_layout

\begin_layout Subsection*
Caching
\end_layout

\begin_layout Standard
One way to avoid wasting computations is to 
\begin_inset Quotes eld
\end_inset

remember
\begin_inset Quotes erd
\end_inset

 them in what's called a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
caching
\end_layout

\end_inset

cache
\series default
.
 You can think of it this way: we 
\emph on
stash
\emph default
 previous results in the 
\emph on
cache
\emph default
.
 To implement the cache, we use a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
global variable
\end_layout

\end_inset

global
\series default
 variable; that is, a variable that exists outside a procedure, which we
 can access from inside it.
 The reason for this is that if the cache were merely local to the procedure,
 then the same values wouldn't be available when we tackle the subproblem.
\end_layout

\begin_layout Standard
We describe two ways to cache results.
 One of them is to do so explicitly, with a list whose 
\begin_inset Formula $i$
\end_inset

th value is the 
\begin_inset Formula $i$
\end_inset

th Fibonacci number.
 We initialize the list as 
\begin_inset Formula $F=\left[1,1\right]$
\end_inset

.
 Whenever we compute a Fibonacci number, we first check whether 
\begin_inset Formula $F$
\end_inset

 already has the value.
 If it does, we return that value rather than recurse.
 If it does not, we compute it, then add it to 
\begin_inset Formula $F$
\end_inset

 at the end.
 For instance, when computing 
\begin_inset Formula $F_{5}$
\end_inset

:
\end_layout

\begin_layout Itemize
We need to compute 
\begin_inset Formula $F_{4}$
\end_inset

 and 
\begin_inset Formula $F_{3}$
\end_inset

.
 We have neither, so we recurse.
\end_layout

\begin_deeper
\begin_layout Itemize
For 
\begin_inset Formula $F_{4}$
\end_inset

, we need to compute 
\begin_inset Formula $F_{3}$
\end_inset

 and 
\begin_inset Formula $F_{2}$
\end_inset

.
 We don't have 
\begin_inset Formula $F_{3}$
\end_inset

, so we recurse.
\end_layout

\begin_deeper
\begin_layout Itemize
For 
\begin_inset Formula $F_{3}$
\end_inset

, we need to compute 
\begin_inset Formula $F_{2}$
\end_inset

 and 
\begin_inset Formula $F_{1}$
\end_inset

.
 We have both, so we compute 
\begin_inset Formula $F_{3}=F_{2}+F_{1}=1+1=2$
\end_inset

 and store that at the end of the list 
\begin_inset Formula $F$
\end_inset

, which is now 
\begin_inset Formula $[1,1,2]$
\end_inset

.
 We then return it
\end_layout

\begin_layout Itemize
For 
\begin_inset Formula $F_{2}$
\end_inset

, we already have it, so we return 
\begin_inset Formula $F_{2}=1$
\end_inset

.
\end_layout

\begin_layout Itemize
We now have 
\begin_inset Formula $F_{3}$
\end_inset

 and 
\begin_inset Formula $F_{2}$
\end_inset

 , so we compute 
\begin_inset Formula $F_{4}=F_{3}+F_{2}=2+1=3$
\end_inset

, store that value at the end of the list, and return it.
\end_layout

\end_deeper
\begin_layout Itemize
For 
\begin_inset Formula $F_{3}$
\end_inset

, we 
\emph on
now
\emph default
 have it in the list (it was computed above) so we simply return it.
\end_layout

\end_deeper
\begin_layout Itemize
We now have 
\begin_inset Formula $F_{4}$
\end_inset

 and 
\begin_inset Formula $F_{3}$
\end_inset

, so we compute 
\begin_inset Formula $F_{5}=F_{4}+F_{3}=3+2=5$
\end_inset

, store that value at the end of the list, and return it.
\end_layout

\begin_layout Standard
This saved us the trouble of computing 
\begin_inset Formula $F_{4}$
\end_inset

 more than once, and of computing 
\begin_inset Formula $F_{3}$
\end_inset

 more than once.
 What's more, the definition of the Fibonacci numbers is convenient to this
 method: when it comes time to store 
\begin_inset Formula $F_{n}$
\end_inset

, we already have 
\begin_inset Formula $F_{1}$
\end_inset

, 
\begin_inset Formula $F_{2}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $F_{n-1}$
\end_inset

 in the list, so we can store it in the right place.
\begin_inset Foot
status open

\begin_layout Plain Layout
Not all recursive sequences are this lucky.
 If the sequence were defined by 
\begin_inset Formula $S_{n}=S_{n-2}+S_{n-3}$
\end_inset

, for instance, you'd have to make sure the cache had the right length before
 storing it.
 So we're a little lucky with the Fibonacci sequence.
\end_layout

\end_inset

 To write pseudocode for this, we introduce a new 
\begin_inset Quotes eld
\end_inset

bold word
\begin_inset Quotes erd
\end_inset

 for our pseudocode: 
\series bold
global
\series default
.
 This heads a list of global variables used by the algorithm; for clarity,
 we list it after 
\series bold
inputs
\series default
 and 
\series bold
outputs
\series default
.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
cached_fibonacci
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

 with 
\begin_inset Formula $n\geq1$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $F_{n}$
\end_inset

, the 
\begin_inset Formula $n$
\end_inset

th Fibonacci number
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
globals
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $F$
\end_inset

, a list of Fibonacci numbers (in order)
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $n\leq$
\end_inset

 
\begin_inset Formula $\left|F\right|$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
result
\emph default
 = 
\begin_inset Formula $F_{n}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
result
\emph default
 = 
\emph on
cached_fibonacci
\emph default
(
\begin_inset Formula $n-1$
\end_inset

) + 
\emph on
cached_fibonacci
\emph default
(
\begin_inset Formula $n-2$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

append 
\emph on
result
\emph default
 to 
\begin_inset Formula $F$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\emph on
result
\end_layout

\begin_layout Standard
\noindent
To turn this into pseudocode, we use the Sage keyword 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset

,
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset


\end_layout

\end_inset

 which indicates that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
F
\end_layout

\end_inset

 is a variable that lives outside the procedure.
 This isn't strictly necessary for Sage, but it helps alert readers that
 a global variable is expected.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
F = [1,1]
\end_layout

\begin_layout SageInput
def cached_fibonacci(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

global F # cache of previous values
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# if already computed, return it
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if n <= len(F):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = F[n-1]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# need to recurse: bummer
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = cached_fibonacci(n-1) 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

+ cached_fibonacci(n-2)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

F.append(result)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notice that we had to adjust one item from the pseudocode: instead of returning
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
F[n]
\end_layout

\end_inset

, we returned 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
F[n-1]
\end_layout

\end_inset

.
 We did this because the pseudocode assumes that lists start with index
\begin_inset space ~
\end_inset

1, but Sage starts its indices at index
\begin_inset space ~
\end_inset

0.
\end_layout

\begin_layout Standard
You can test and compare the results between the two.
 It will become evident very quickly that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cached_fibonacci()
\end_layout

\end_inset

 is much, 
\emph on
much
\emph default
 faster than 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
funny_bunnies()
\end_layout

\end_inset

 once 
\begin_inset Formula $n$
\end_inset

 grows to anything larger than the dinkiest of numbers:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
cached_fibonacci(10)
\end_layout

\begin_layout SageOutput
55
\end_layout

\begin_layout SageInput
cached_fibonacci(25)
\end_layout

\begin_layout SageOutput
75025
\end_layout

\begin_layout SageInput
cached_fibonacci(35)
\end_layout

\begin_layout SageOutput
9227465
\end_layout

\end_deeper
\begin_layout Standard
\noindent
To 
\emph on
really
\emph default
 drive the point home, we'll compute one that would take far too long with
 the recursive implementation:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
cached_fibonacci(100)
\end_layout

\begin_layout SageOutput
354224848179261915075
\end_layout

\end_deeper
\begin_layout Standard

\series bold
\emph on
Don't
\series default
\emph default
 overlook the first line of the code above, where we set 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
F = [1,1]
\end_layout

\end_inset

.
 If you forget that, you'll encounter an error.
 If you were a 
\emph on
good
\emph default
 reader and did not make that mistake, we will simulate the error by resetting
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
F
\end_layout

\end_inset

, then running 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cached_fibonacci
\end_layout

\end_inset

:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
NameError
\end_layout

\end_inset

!global name@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
global name \SpecialChar ldots
 is not defined
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
reset('F')
\end_layout

\begin_layout SageInput
cached_fibonacci(10)
\end_layout

\begin_layout SageError
NameError: global name 'F' is not defined
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you were still a good reader and reset 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
F
\end_layout

\end_inset

 to see what would happen, and now you want to run it again, just assign
 it anew:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
F = [1,1]
\end_layout

\begin_layout SageInput
cached_fibonacci(10)
\end_layout

\begin_layout SageOutput
55
\end_layout

\end_deeper
\begin_layout Standard
Two last words to the wise.
 While this algorithm is cached, it is 
\emph on
still recursive;
\emph default
 we haven't changed the fact that, when we encounter a 
\begin_inset Quotes eld
\end_inset

cache miss
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Formula $n$
\end_inset

 is larger than the size of 
\begin_inset Formula $F$
\end_inset

), the algorithm has to call itself.
 Since Sage has a built-in limit for recursion, we still encounter the same
 problem as we did with 
\emph on
pascals_row
\emph default
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RuntimeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
maximum recursion depth exceeded while calling a Python object
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
cached_fibonacci(1000)
\end_layout

\begin_layout SageError
RuntimeError: maximum recursion depth exceeded while calling a Python object
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You can actually change this, but it's dangerous, so we won't tell you how.
 There are usually better options, anyway — to find one, see the next section.
\end_layout

\begin_layout Standard
Finally, you don't usually have to implement caching on your own.
 In the cloud, Sage will give you a cache for free; just type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
@cached_function
\end_layout

\end_inset

 and then start the procedure definition on the line below.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
@cached_function
\end_layout

\begin_layout SageMoreInput
def decorated_fibonacci(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if n == 1 or n == 2:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = decorated_fibonacci(n-1) 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

+ decorated_fibonacci(n-2)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\begin_layout SageInput
decorated_fibonacci(100)
\end_layout

\begin_layout SageOutput
354224848179261915075
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notice that we obtained the same result as with our home-grown cache.
\end_layout

\begin_layout Subsection*
Turning recursion into a loop
\end_layout

\begin_layout Standard
Another way to avoid wasting computations is to reformulate the recursion
 as a loop.
 Let 
\begin_inset Formula $b_{\textrm{mat}}$
\end_inset

 count the pairs of mature bunnies, let 
\begin_inset Formula $b_{\textrm{tot}}$
\end_inset

 count the total pairs of bunnies, and let 
\begin_inset Formula $b_{\textrm{next}}$
\end_inset

 count the pairs of bunnies we can expect next season.
 Since the bunnies are immortal, 
\begin_inset Formula $b_{\textrm{next}}$
\end_inset

 will count all 
\begin_inset Formula $b_{\textrm{tot}}$
\end_inset

 of the bunnies we have now, but since each mature pair produces a new pair,
 
\begin_inset Formula $b_{\textrm{next}}$
\end_inset

 must also count all 
\begin_inset Formula $b_{\textrm{mat}}$
\end_inset

 mature pairs twice to account for next season's new pairs.
 So
\begin_inset Formula 
\[
b_{\textrm{next}}=b_{\textrm{tot}}+b_{\textrm{mat}}.
\]

\end_inset

Once the next season comes, 
\begin_inset Formula $b_{\textrm{tot}}$
\end_inset

 will be the number of mature bunnies that are now producing pairs, while
 
\begin_inset Formula $b_{\textrm{next}}$
\end_inset

 will be the new bunny total, so we could replace 
\begin_inset Formula $b_{\textrm{mat}}$
\end_inset

 by 
\begin_inset Formula $b_{\textrm{tot}}$
\end_inset

 and 
\begin_inset Formula $b_{\textrm{tot}}$
\end_inset

 by 
\begin_inset Formula $b_{\textrm{next}}$
\end_inset

 to compute the following season's total.
 And so forth.
 Since we know the first two season's values already, we never need to count
 those.
 Keeping in mind that 
\begin_inset Formula $n=1$
\end_inset

 is the first season and 
\begin_inset Formula $n=2$
\end_inset

 the second, we need the loop to calculate 
\begin_inset Formula $b_{\textrm{tot}}$
\end_inset

 for 
\begin_inset Formula $n=3$
\end_inset

, 
\begin_inset Formula $n=4$
\end_inset

, \SpecialChar ldots
 That suggests the following pseudocode.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
immortal_bunnies
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

, the number of seasons
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
the number of 
\begin_inset Quotes eld
\end_inset

immortal
\begin_inset Quotes erd
\end_inset

 bunnies after 
\begin_inset Formula $n$
\end_inset

 seasons
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b_{\textrm{mat}}=b_{\textrm{tot}}=1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
repeat
\series default
 
\begin_inset Formula $n-2$
\end_inset

 times
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b_{\textrm{next}}=b_{\textrm{tot}}+b_{\textrm{mat}}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b_{\textrm{mat}}=b_{\textrm{tot}}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b_{\textrm{tot}}=b_{\textrm{next}}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $b_{\textrm{tot}}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
To translate this to Sage code, keep in mind that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
range()
\end_layout

\end_inset

 does 
\emph on
not
\emph default
 iterate on the last value, so we need its limit to be 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n-1
\end_layout

\end_inset

.
 It is also more 
\begin_inset Quotes eld
\end_inset

natural
\begin_inset Quotes erd
\end_inset

 in Sage to start counting at 
\begin_inset Formula $n=0$
\end_inset

, so the loop will differ slightly from the pseudocode:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def immortal_bunnies(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b_mat = b_tot = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# bottom-up loop
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for each in range(n-1):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b_next = b_tot + b_mat
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b_mat, b_tot = b_tot, b_next
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return b_tot
\end_layout

\begin_layout SageInput
[immortal_bunnies(i) for i in range(2,10)]
\end_layout

\begin_layout SageOutput
[2, 3, 5, 8, 13, 21, 34, 55]
\end_layout

\end_deeper
\begin_layout Standard
Unlike caching, Sage does not provide an automatic method that turns a recursive
 procedure into a looped procedure.
 Doing this is something we have to work out on our own, reasoning from
 the logic of the problem.
 As is considered an advanced topic in computer science, we do not dwell
 on it further.
 The interested reader can find further information in computer science
 texts that discuss 
\begin_inset Quotes eld
\end_inset

dynamic programming.
\begin_inset Quotes erd
\end_inset

 
\begin_inset Foot
status open

\begin_layout Plain Layout

\size small
The inventor of dynamic programming once said that he invented the term
 because his company answered to a man who harbored 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "a pathological fear and hatred of the word research. ...You can imagine how he felt, then, about the term mathematical."
target "https://en.wikipedia.org/wiki/Dynamic_programming#History"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

 Using a term like 
\begin_inset Quotes eld
\end_inset

dynamic programming
\begin_inset Quotes erd
\end_inset

 helped him steer clear of his supervisor's wrath.
 He added, 
\begin_inset Quotes eld
\end_inset

I thought dynamic programming was a good name\SpecialChar ldots
 not even a Congressman could
 object to.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Eigenvalues and eigenvectors resolve a bunny dilemma
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "subsec: eigenvalues and eigenvectors resolve a bunny dilemma"

\end_inset

You may not be familiar with eigenvalues and eigenvectors, even if you've
 seen them in a class.
 We conclude this chapter with an illustration of how immensely useful they
 can be.
\end_layout

\begin_layout Standard
As you have probably noticed, even the non-recursive implementations of
 the Fibonacci sequence rely on its recursive description, whose recursive
 nature requires us to know some previous values.
 It would be nice to have a formula that didn't depend on previous values,
 at least not explicitly.
 Such a formula is called a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
sequence!closed form
\end_layout

\end_inset

closed form of a sequence.
\end_layout

\begin_layout Standard
Another way to describe this is as a matrix equation.
 The matrices
\begin_inset Formula 
\[
\left(\begin{array}{c}
F_{\textrm{curr}}\\
F_{\textrm{prev}}
\end{array}\right)\quad\textrm{and}\quad\left(\begin{array}{c}
F_{\textrm{next}}\\
F_{\textrm{curr}}
\end{array}\right)
\]

\end_inset

represent the information we need both this season and next season to compute
 the following season's bunnies.
 Now, the sum of the numbers in the first matrix gives us the top element
 of the second matrix, while the top number of the first matrix gives us
 the bottom number of the second.
 We can describe this relationship using a matrix equation:
\begin_inset Formula 
\[
\left(\begin{array}{cc}
1 & 1\\
1 & 0
\end{array}\right)\left(\begin{array}{c}
F_{\textrm{curr}}\\
F_{\textrm{prev}}
\end{array}\right)=\left(\begin{array}{c}
F_{\textrm{next}}\\
F_{\textrm{curr}}
\end{array}\right).
\]

\end_inset

What's more, multiplying by powers of the matrix
\begin_inset Formula 
\[
M=\left(\begin{array}{cc}
1 & 1\\
1 & 0
\end{array}\right)
\]

\end_inset

ratchets the numbers higher up the list.
 To wit,
\begin_inset Formula 
\[
\left(\begin{array}{cc}
1 & 1\\
1 & 0
\end{array}\right)^{5}\left(\begin{array}{c}
1\\
1
\end{array}\right)=\left(\begin{array}{c}
13\\
8
\end{array}\right),
\]

\end_inset

which you will recognize as the 4th and 5th numbers in the list our program
 produced, which are 
\begin_inset Formula $F_{6}$
\end_inset

 and 
\begin_inset Formula $F_{7}$
\end_inset

, by which we mean the number of bunnies in the 6th and 7th seasons.
 In general,
\begin_inset Formula 
\[
\left(\begin{array}{cc}
1 & 1\\
1 & 0
\end{array}\right)^{n-2}\left(\begin{array}{c}
1\\
1
\end{array}\right)=\left(\begin{array}{c}
F_{n}\\
F_{n-1}
\end{array}\right),
\]

\end_inset

since after all
\begin_inset Formula 
\[
\left(\begin{array}{cc}
1 & 1\\
1 & 0
\end{array}\right)^{1}\left(\begin{array}{c}
1\\
1
\end{array}\right)=\left(\begin{array}{c}
2\\
1
\end{array}\right),\quad\left(\begin{array}{cc}
1 & 1\\
1 & 0
\end{array}\right)^{2}\left(\begin{array}{c}
1\\
1
\end{array}\right)=\left(\begin{array}{cc}
1 & 1\\
1 & 0
\end{array}\right)^{1}\left(\begin{array}{c}
2\\
1
\end{array}\right)=\left(\begin{array}{c}
3\\
2
\end{array}\right),
\]

\end_inset

and so forth.
\end_layout

\begin_layout Standard
If we can find a simple formula for powers of the matrix, we should be able
 to use it to find our desired closed form.
 As it happens, a very convenient result from linear algebra comes in handy
 here.
 
\begin_inset CommandInset label
LatexCommand label
name "page: evecs and evals"

\end_inset

An 
\series bold
eigenvector
\begin_inset Index idx
status open

\begin_layout Plain Layout
vector!eigenvector
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
eigenvector
\end_layout

\end_inset


\series default
 
\begin_inset Formula $\mathbf{e}$
\end_inset

 of a matrix 
\begin_inset Formula $M$
\end_inset

 over a ring 
\begin_inset Formula $R$
\end_inset

 is a vector related to an eigenvalue 
\begin_inset Formula $\lambda\in R$
\end_inset

 such that
\begin_inset Formula 
\[
M\mathbf{e}=\lambda\mathbf{e};
\]

\end_inset

that is, 
\begin_inset Formula $M$
\end_inset

 changes the 
\begin_inset Quotes eld
\end_inset

length
\begin_inset Quotes erd
\end_inset

 of the vector.
 Eigenvectors and their eigenvalues have a number of uses, one of which
 now comes to our aid.
\end_layout

\begin_layout Named Theorem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Eigendecomposition Theorem.
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
theorems!Eigendecomposition Theorem
\end_layout

\end_inset

Let 
\begin_inset Formula $M$
\end_inset

 be an 
\begin_inset Formula $n\times n$
\end_inset

 matrix with linearly independent eigenvectors 
\begin_inset Formula $\mathbf{e}_{1}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $\mathbf{e}_{n}$
\end_inset

 and corresponding eigenvalues 
\begin_inset Formula $\lambda_{1}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $\lambda_{n}$
\end_inset

.
 We can rewrite 
\begin_inset Formula $M$
\end_inset

 as 
\begin_inset Formula $Q\Lambda Q^{-1}$
\end_inset

 where
\begin_inset Formula 
\[
Q=\left(\mathbf{e}_{1}|\mathbf{e}_{2}|\cdots|\mathbf{e}_{n}\right)\quad\textrm{and}\quad\Lambda=\left(\begin{array}{cccc}
\lambda_{1}\\
 & \lambda_{2}\\
 &  & \ddots\\
 &  &  & \lambda_{n}
\end{array}\right).
\]

\end_inset

(The notation for 
\begin_inset Formula $Q$
\end_inset

 means that the 
\begin_inset Formula $i$
\end_inset

th column of 
\begin_inset Formula $Q$
\end_inset

 is the 
\begin_inset Formula $i$
\end_inset

th eigenvector of 
\begin_inset Formula $M$
\end_inset

.)
\end_layout

\begin_layout Standard
It's easy to verify this in Sage for 
\begin_inset Formula $M$
\end_inset

.
 Let's compute the eigenvectors first.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
evecs = M.eigenvectors_right()
\end_layout

\begin_layout SageInput
evecs
\end_layout

\begin_layout SageOutput
[(-0.618033988749895?, [(1, -1.618033988749895?)], 1),
\end_layout

\begin_layout SageOutput
\begin_inset space ~
\end_inset

(1.618033988749895?, [(1, 0.618033988749895?)], 1)]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
What does all this mean? If you study the help text\SpecialChar ldots

\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
M.eigenvectors_right?
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
you will see that the list holds one tuple per eigenvector, and the tuple
 itself contains the eigenvalue, the eigenvector, and the eigenvalue's multiplic
ity.
\end_layout

\begin_layout Standard
For our purposes, the eigenvalues and eigenvectors suffice.
 It is relatively easy to extract them, but
\end_layout

\begin_layout Itemize
we want exact values, not approximate ones, and
\end_layout

\begin_layout Itemize
what do those question marks mean, anyway?
\end_layout

\begin_layout Standard
It may surprise you to learn that the question marks do 
\emph on
not
\emph default
 indicate uncertainty.
 They indicate that the numbers lie in a special field called the field
 of 
\begin_inset Index idx
status open

\begin_layout Plain Layout
algebraic numbers|seealso
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
AA
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset

algebraic numbers.
 Sage denotes this field with the symbol 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
AA
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
AA
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a, b = evecs[0][0], evecs[1][0]
\end_layout

\begin_layout SageInput
type(a)
\end_layout

\begin_layout SageOutput
<class 'sage.rings.qqbar.AlgebraicNumber'>
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The algebraic numbers are the smallest field containing all the roots of
 polynomials with integer coefficients, so we can always find a 
\begin_inset Quotes eld
\end_inset

nice-looking
\begin_inset Quotes erd
\end_inset

 polynomial that has them as a root.
 In addition, can often rewrite them as an expression in radicals.
 The following methods to algebraic numbers perform these tasks:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="80col%">
<column alignment="left" valignment="top" width="25col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.minpoly()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns the polynomial of smallest degree that has 
\emph on
a
\emph default
 as a root
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
a
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.radical_expression()
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
returns a radical expression equivalent to 
\emph on
a
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
You can find many more methods in the usual manner, by typing the name of
 a variable whose value is an algebraic number, following it with a period,
 then pressing the 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
Tab
\end_layout

\end_inset

 key.
\begin_inset Index idx
status open

\begin_layout Plain Layout
tab completion
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For now, let's try these on our present eigenvector.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a.minpoly()
\end_layout

\begin_layout SageOutput
x^2 - x - 1
\end_layout

\begin_layout SageInput
a.radical_expression()
\end_layout

\begin_layout SageOutput
-1/2*sqrt(5) + 1/2
\end_layout

\begin_layout SageInput
b.minpoly()
\end_layout

\begin_layout SageOutput
x^2 - x - 1
\end_layout

\begin_layout SageInput
b.radical_expression()
\end_layout

\begin_layout SageOutput
1/2*sqrt(5) + 1/2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Both numbers have the same minimal polynomial,
\begin_inset Foot
status open

\begin_layout Plain Layout
This makes sense if you have studied this.
 If you haven't, watch for a linear algebra class coming soon to a semester
 near you!
\end_layout

\end_inset

 but their radical expressions are different.
 They aren't 
\emph on
that
\emph default
 different, though; we'll call them
\begin_inset Foot
status open

\begin_layout Plain Layout
Some trivia.
 Since 
\begin_inset Formula $\varphi$
\end_inset

 is a root of 
\begin_inset Formula $x^{2}-x-1$
\end_inset

, we know that 
\begin_inset Formula $\varphi^{2}-\varphi-1=0$
\end_inset

, so 
\begin_inset Formula $\varphi^{2}=\varphi+1$
\end_inset

, or 
\begin_inset Formula $\varphi=\nicefrac{\varphi+1}{\varphi}=1+\nicefrac{1}{\varphi}$
\end_inset

, or 
\begin_inset Formula $\nicefrac{1}{\varphi}=\varphi-1$
\end_inset

.
 Notice that 
\begin_inset Formula $\psi=1-\varphi$
\end_inset

, so 
\begin_inset Formula $-\psi$
\end_inset

 and 
\begin_inset Formula $\varphi$
\end_inset

 are actually reciprocals.
\end_layout

\end_inset


\begin_inset Formula 
\[
\psi=\frac{1-\sqrt{5}}{2}\quad\textrm{and}\quad\varphi=\frac{1+\sqrt{5}}{2}.
\]

\end_inset

The second one in particular is wildly famous, as it is the 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
golden ratio
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "golden ratio"
target "http://en.wikipedia.org/wiki/Golden_ratio"
literal "false"

\end_inset


\series default
.
 It appears in many different places in mathematics, and arguably in many
 
\begin_inset Quotes eld
\end_inset

real world
\begin_inset Quotes erd
\end_inset

 situations.
 Our Fibonacci bunnies may not seem an especially compelling 
\begin_inset Quotes eld
\end_inset

real world
\begin_inset Quotes erd
\end_inset

 situation, but this number suggests that the numbers may show up in 
\begin_inset Quotes eld
\end_inset

real world
\begin_inset Quotes erd
\end_inset

 situations, and 
\begin_inset CommandInset href
LatexCommand href
name "indeed they do"
target "https://en.wikipedia.org/wiki/Fibonacci_number#In_nature"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
We return to our main problem, that of finding a closed form for the Fibonacci
 sequence.
 We first wanted to verify the Eigendecomposition Theorem.
 To build the matrices 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $\Lambda$
\end_inset

, we extract the data from 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
evecs
\end_layout

\end_inset

 using the bracket operator 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

, then build the matrices using comprehensions.
 Make sure you understand how we build these matrices.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Q = matrix([e[1][0] for e in evecs]).transpose()
\end_layout

\begin_layout SageInput
L = diagonal_matrix([e[0] for e in E])
\end_layout

\begin_layout SageInput
M == Q*L*Q.inverse()
\end_layout

\begin_layout SageOutput
True
\end_layout

\end_deeper
\begin_layout Standard
\noindent
So the theorem works.
 How is it useful to our aim? Remember that
\begin_inset Formula 
\[
M^{n-2}\left(\begin{array}{c}
1\\
1
\end{array}\right)=\left(\begin{array}{c}
F_{n}\\
F_{n-1}
\end{array}\right).
\]

\end_inset

By substitution, this becomes
\begin_inset Formula 
\[
M^{n-2}=\left(Q\Lambda Q^{-1}\right)^{n-2}=\underset{n-2\textrm{ times}}{\underbrace{\left(Q\Lambda Q^{-1}\right)\left(Q\Lambda Q^{-1}\right)\cdots\left(Q\Lambda Q^{-1}\right)}}.
\]

\end_inset

The associative properties allows us to rewrite this as
\begin_inset Formula 
\[
M^{n-2}=\left(Q\Lambda\right)\left(Q^{-1}Q\right)\Lambda\left(Q^{-1}Q\right)\cdots\left(Q^{-1}Q\right)\left(\Lambda Q^{-1}\right).
\]

\end_inset

This simplifies to
\begin_inset Formula 
\[
M^{n-2}=Q\Lambda^{n-2}Q^{-1}.
\]

\end_inset

What's more, it is 
\begin_inset Quotes eld
\end_inset

easy
\begin_inset Quotes erd
\end_inset

 to show that for a diagonal matrix like 
\begin_inset Formula $\Lambda$
\end_inset


\begin_inset Formula 
\[
\Lambda^{k}=\left(\begin{array}{cccc}
\lambda_{1}\\
 & \lambda_{2}\\
 &  & \ddots\\
 &  &  & \lambda_{n}
\end{array}\right)^{k}=\left(\begin{array}{cccc}
\lambda_{1}^{k}\\
 & \lambda_{2}^{k}\\
 &  & \ddots\\
 &  &  & \lambda_{n}^{k}
\end{array}\right),
\]

\end_inset

so we can write 
\begin_inset Formula $\Lambda^{k}$
\end_inset

 in a simpler form.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
no canonical coercion from Symbolic Ring to Rational Field
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Lk = diagonal_matrix([L[i,i]^n for i in range(L.nrows())])
\end_layout

\begin_layout SageError
TypeError: no canonical coercion from Symbolic Ring to Rational Field
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Well, 
\emph on
that's
\emph default
 odd.
 What about handing it a radical expression first?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Lk = diagonal_matrix([L[i,i].radical_expression()^(n-2) 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(L.nrows())])
\end_layout

\begin_layout SageInput
Lk
\end_layout

\begin_layout SageOutput
[(-1/2*sqrt(5) + 1/2)^(n-2)
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0]
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

0 (1/2*sqrt(5) + 1/2)^(n-2)]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That worked.
 Sage seems to want a radical expression to proceed; we can adapt to that
 with 
\begin_inset Formula $Q$
\end_inset

, as well.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Q = matrix([[Q[0,0].radical_expression(), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Q[0,1].radical_expression()], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[Q[1,0].radical_expression(), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Q[1,1].radical_expression()] 
\backslash

\end_layout

\begin_layout SageMoreInput
])
\end_layout

\begin_layout SageInput
Q
\end_layout

\begin_layout SageOutput
[
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

1]
\end_layout

\begin_layout SageOutput
[-1/2*sqrt(5) - 1/2 1/2*sqrt(5) - 1/2]
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We can now compute 
\begin_inset Formula $Q\Lambda^{k}Q^{-1}$
\end_inset

 directly.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Q*Lk*Q.inverse()*matrix([[1],[1]])
\end_layout

\begin_layout SageOutput
[ 1/20*sqrt(5)*(1/2*sqrt(5) + \SpecialChar ldots

\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
well, it's a bit of a mess.
 In fact, all we care about is the top element, and we'd prefer to have
 it fully simplified.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
(Q*Lk*Q.inverse()*matrix([[1],[1]]))[0,0].full_simplify()
\end_layout

\begin_layout SageOutput
1/5*sqrt(5)*((1/2*sqrt(5) + 1/2)^n - (-1/2*sqrt(5) + 1/2)^n)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Well, 
\emph on
that's
\emph default
 convenient! This is
\begin_inset Formula 
\[
\frac{1}{5}\,\sqrt{5}\left[\left(\frac{1}{2}\,\sqrt{5}+\frac{1}{2}\right)^{n}-\left(-\frac{1}{2}\,\sqrt{5}+\frac{1}{2}\right)^{n}\right],
\]

\end_inset

so with a slight rewrite we find that
\begin_inset Formula 
\[
F_{n}=\frac{1}{\sqrt{5}}\left(\varphi^{n}-\psi^{n}\right),
\]

\end_inset

an awfully elegant closed form!
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion!laternatives|)
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 A recursive algorithm to a problem is one where the algorithm invokes itself
 on a smaller case of the problem.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 A recursive algorithm should try to exploit the well-ordering property
 of the integers (
\begin_inset Formula $\mathbb{Z}$
\end_inset

).
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 The rows of Pascal's triangle appear in many places, such as in the expansion
 of trinomials.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 Because Pascal's triangle has only one recursion, there is no danger of
 encountering a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RuntimeError
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 The growth of a population of bunnies is one of the fundamental properties
 of mathematics.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 Every recursive statement can be solved using an easily-implemented procedure.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 If a problem can be solved by recursion, then implementing it by recursion
 is the best approach.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 A very deep recursion can indicate that something has gone awry, like an
 infinite loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 You can get around the delay in computing the 40th Fibonacci number by
 buying a faster computer.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 A cache is a local variable that stores the procedure's previous results.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
11.
 Sage provides a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
@cached_function
\end_layout

\end_inset

 decorator that automatically caches a procedure's previous results.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
12.
 You can sometimes turn a recursive procedure into a loop, thereby avoiding
 penalties associated with recursion.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
13.
 As the golden ratio is unique to the Fibonacci numbers, they are of purely
 theoretical interest.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
14.
 Eigendecomposition allows us to rewrite a matrix 
\begin_inset Formula $M$
\end_inset

 in terms of other matrices that are themselves related to vectors that
 
\begin_inset Formula $M$
\end_inset

 rescales.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
15.
 You can obtain a radical representation of an algebraic number using the
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.radical_simplify()
\end_layout

\end_inset

 method.
\end_layout

\begin_layout Subsection*
Multiple choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 The well-ordering property applies to which of these sets?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Formula $\mathbb{N}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Formula $\mathbb{Z}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Formula $\mathbb{Q}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Formula $\mathbb{R}$
\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 Pascal's triangle is a good example of recursion because:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 It has many applications.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Each row can be defined in terms of the previous row.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 It is one of the fundamental problems of mathematics.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 It makes an effective critique of Descartes' philosophy of systematic doubt.
\begin_inset Foot
status open

\begin_layout Plain Layout
Gratuitous and irrelevant reference to modern philosophy included at no
 extra charge.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 The Fibonacci numbers are a good example of recursion because:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 They have many applications.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Each number can be defined in terms of previous numbers.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 They relate to one of the fundamental problems of mathematics.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 If you can get a sequence of numbers named after you, 
\begin_inset CommandInset href
LatexCommand href
name "you have to be right --- you just have to!"
target "https://en.wikipedia.org/wiki/Mersenne_prime#History"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
4.
 Which proof technique is essentially a kind of recursion?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 contradiction
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 contrapositive
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 induction
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 hypothesis testing
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
5.
 What happens in Sage if you accidentally program an infinite recursion?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 the computer explodes
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 the program hangs
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RuntimeError
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
RecursionError
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
6.
 Why is it actually a bad idea to implement the Fibonacci sequence with
 a naïve recursion?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 A naïve implementation repeats the vast majority of its computations.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 Except for base cases, every recursion doubles the number of computations
 needed.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 The time required to compute the numbers grows about as fast as the numbers
 themselves.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 All of the above.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
7.
 Which of the following alternatives to recursion do you have to work out
 by analyzing the algorithm, rather than using some combination of Sage
 commands or variables?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 caching
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 finding a closed form
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 induction
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 looping
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
8.
 Which of the following best defines the ring of algebraic numbers?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
AA
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 the set of all roots of polynomials with integer coefficients
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 the smallest field containing the roots of polynomials with integer coefficient
s
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 the smallest field containing all the irrational numbers
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
9.
 The best command or method to turn an algebraic number into an exact, but
 easy-to-read 
\emph on
numerical
\emph default
 expression is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.exactify()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.full_simplify()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.minpoly()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.radical_expression()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 Which of the following best describes the meaning of an eigenvector?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a vector that is useful for finding closed forms of sequences
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a vector that the matrix rescales, but leaves in the same direction
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a vector that is linearly independent of other eigenvectors
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a vector that can be used to decompose a matrix into a computationally
 useful form
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.

\emph on
Bonus.

\emph default
 Given the recursive definition of a sequence of mathematical bunnies, the
 best way to find a 
\begin_inset Quotes eld
\end_inset

closed form
\begin_inset Quotes erd
\end_inset

 to describe the sequence is to
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 acquire dogs
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 box them up
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 fence them in
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 dress them up
\end_layout

\begin_layout Labeling
\labelwidthstring M.
E.
 Enclose them in spacesuits, like Glenda:
\begin_inset Foot
status open

\begin_layout Plain Layout
Downloaded from 
\begin_inset CommandInset href
LatexCommand href
name "Bell Labs' Plan 9 website"
target "http://plan9.bell-labs.com/plan9/glenda.html"
literal "false"

\end_inset

 and used with permission (we think — the wording's a tad vague).
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset CommandInset label
LatexCommand label
name "img: glenda"

\end_inset


\begin_inset Graphics
	filename graphics/solving_equations_graphics/glenda.jpg
	lyxscale 10
	height 1in

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Why would 
\emph on
pascals_row
\emph default
 not have such trouble with recursion that the Fibonacci sequence did? That
 is, what difference in the pseudocode (and, therefore, the Sage code) makes
 
\emph on
pascals_row
\emph default
 more amenable to recursion than the Fibonacci sequence?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Would a cache be as useful for 
\emph on
pascals_row
\emph default
 as it was for the Fibonacci sequence? Why or why not?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Back on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "programming: plot x, x^2, log x, e^x and compare"

\end_inset

 we asked you to plot 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $x^{2}$
\end_inset

, 
\begin_inset Formula $\log_{10}x$
\end_inset

, and 
\begin_inset Formula $e^{x}$
\end_inset

 and rank them in order from largest to smallest.
 Recreate this graph on the interval 
\begin_inset Formula $\left[1,15\right]$
\end_inset

, adding to it a curve whose points are defined by the Fibonacci numbers
 from
\begin_inset space ~
\end_inset

1 to
\begin_inset space ~
\end_inset

15.
 Again, rank these functions according to which grows fastest.
 
\emph on
Hint:
\emph default
 Recall that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

 procedure graphs a 
\begin_inset Quotes eld
\end_inset

curve
\begin_inset Quotes erd
\end_inset

 defined by a finite set of points.
 You may need to adjust 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymax
\end_layout

\end_inset

 in order to view the plot well.
\end_layout

\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Suppose 
\begin_inset Formula $y=x^{m}q$
\end_inset

, where 
\begin_inset Formula $x$
\end_inset

 does not divide 
\begin_inset Formula $q$
\end_inset

.
 For example, if 
\begin_inset Formula $y=12$
\end_inset

 and 
\begin_inset Formula $x=2$
\end_inset

, then we have 
\begin_inset Formula $m=2$
\end_inset

.
 We call 
\begin_inset Formula $m$
\end_inset

 the 
\series bold
multiplicity 
\series default
of 
\begin_inset Formula $x$
\end_inset

, and can compute it the using the following recursive algorithm:
\end_layout

\begin_deeper
\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
multiplicity
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, two objects such that 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $x$
\end_inset

 divides 
\begin_inset Formula $y$
\end_inset


\begin_inset Quotes erd
\end_inset

 makes sense
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
the number of times 
\begin_inset Formula $x$
\end_inset

 divides 
\begin_inset Formula $y$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $x$
\end_inset

 does not divide 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
result
\emph default
 = 0
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\emph on
result
\emph default
 = 1 + 
\emph on
multiplicity
\emph default
(
\begin_inset Formula $\nicefrac{y}{x}$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\emph on
result
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(a) Implement this as a Sage program.
 Check that it gives the correct results for the following:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (iii)
(i) 
\begin_inset Formula $y=12$
\end_inset

, 
\begin_inset Formula $x=2$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (iii)
(ii) 
\begin_inset Formula $y=12$
\end_inset

, 
\begin_inset Formula $x=3$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (iii)
(iii) 
\begin_inset Formula $y=t$
\end_inset

, 
\begin_inset Formula $x=t^{4}+t^{2}$
\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring (m)
(b) It is possible to solve this problem non-recursively, using a 
\series bold
while
\series default
 loop.
 Write pseudocode for such an algorithm, then implement it in Sage.
 Test your program on the same examples.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
2.
 Rewrite 
\emph on
pascals_row
\emph default
 so that it uses a manual cache.
 Do not use Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
@cached_function
\end_layout

\end_inset

 capability; rather, use a list where the 
\begin_inset Formula $i$
\end_inset

th entry is also a list: the 
\begin_inset Formula $i$
\end_inset

th row of Pascal's triangle.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 We can count how complicated a procedure's recursion is with a global variable
 called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invocations
\end_layout

\end_inset

.
 We add two lines at the beginning of the recursive procedure that declare
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invocations
\end_layout

\end_inset

 to be 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
global
\end_layout

\end_inset

 and then add
\begin_inset space ~
\end_inset

1 to it.
 For instance, we could do this with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
funny_bunnies()
\end_layout

\end_inset

 as follows:
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def funny_bunnies(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

global invocations
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

invocations = invocations + 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if n == 1 or n == 2:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

result = funny_bunnies(n-1) + funny_bunnies(n-2)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return result
\end_layout

\end_deeper
\begin_layout Standard
Now, every time we run it, we first set 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invocations
\end_layout

\end_inset

 to
\begin_inset space ~
\end_inset

0, then run the program, then print 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
invocations
\end_layout

\end_inset

.
 For example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
invocations = 0
\end_layout

\begin_layout SageInput
funny_bunnies(7)
\end_layout

\begin_layout SageOutput
13
\end_layout

\begin_layout SageInput
invocations
\end_layout

\begin_layout SageOutput
25
\end_layout

\end_deeper
\begin_layout Standard
(This is not the same as the number of recursions.)
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(a) Do this for the values 
\begin_inset Formula $n=7$
\end_inset

, 8, 9, 10, and 11.
 Would you say that this sequence behaves like the Fibonacci numbers, much
 as we saw with the number of recursions? If so, find a recursive formula
 to describe the pattern in the numbers.
 If not, how would you describe it?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Modify the 
\emph on
pascals_row
\emph default
 program to compute the number of invocations, then run it for a few values
 of 
\begin_inset Formula $n$
\end_inset

.
 Is the number of invocations in this case Fibonacci-like? If so, find a
 recursive formula to describe the pattern in the numbers.
 If not, how would you describe it?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 John von Neumann showed that it is possible to represent every natural
 number in terms of the symbols 
\begin_inset Formula $\left\{ \right\} $
\end_inset

 and 
\begin_inset Formula $\emptyset$
\end_inset

:
\begin_inset Formula 
\begin{align*}
0 & \leftrightarrow\emptyset\\
1 & \leftrightarrow\left\{ \emptyset\right\} \\
2 & \leftrightarrow\left\{ \emptyset,\left\{ \emptyset\right\} \right\} \\
3 & \leftrightarrow\left\{ \emptyset,\left\{ \emptyset\right\} ,\left\{ \left\{ \emptyset,\left\{ \emptyset\right\} \right\} \right\} \right\} \\
 & \vdots\\
n & \leftrightarrow\left\{ n-1,\left\{ n-1\right\} \right\} 
\end{align*}

\end_inset

As you can see from the last line especially, this is a recursive definition:
\begin_inset Formula 
\[
n=\left(n-1\right)\cup\left\{ n-1\right\} .
\]

\end_inset

Implement this as Sage code.
\emph on

\begin_inset Newline newline
\end_inset

Hint:
\emph default
 This is not hard, but you have to be careful.
 First, the recursive nature of the algorithm means the procedure must return
 a frozen set.
 To create a frozen set 
\begin_inset Formula $R$
\end_inset

 that contains another frozen set 
\begin_inset Formula $S$
\end_inset

, 
\emph on
as well as other elements,
\emph default
 first create 
\begin_inset Formula $R$
\end_inset

 as a mutable set (
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
R = set()
\end_layout

\end_inset

), add 
\begin_inset Formula $S$
\end_inset

 to it, add the other elements (using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.add()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.update()
\end_layout

\end_inset

, and so forth as appropriate), and finally convert 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
R
\end_layout

\end_inset

 to a frozen set.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Suppose you have a set of 
\begin_inset Formula $n$
\end_inset

 objects, and you want to list its 
\begin_inset Formula $m$
\end_inset

-element subsets (that is, its subsets with exactly 
\begin_inset Formula $m$
\end_inset

 elements).
\begin_inset Foot
status open

\begin_layout Plain Layout
This may seem like the sort of question only the purest of pure mathematicians
 would care about, but it's actually related to the reason you never seem
 to buy a winning ticket for PowerBall.
\end_layout

\end_inset

 The following algorithm would accomplish this for you:
\end_layout

\begin_deeper
\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
combinations
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $S$
\end_inset

, a set of 
\begin_inset Formula $n$
\end_inset

 objects
\end_layout

\begin_layout Itemize
\begin_inset Formula $m$
\end_inset

, the number of objects you'd like to pick from 
\begin_inset Formula $S$
\end_inset

, with 
\begin_inset Formula $m\leq n$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
the subsets of 
\begin_inset Formula $S$
\end_inset

 of size 
\begin_inset Formula $n$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $\left|S\right|=m$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
result
\emph default
 = 
\emph on

\begin_inset Formula $\left\{ S\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
else
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
result
\emph default
 = 
\begin_inset Formula $\emptyset$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $s\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $U=S\backslash s$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\emph on
combinations
\emph default
(
\emph on
U
\emph default
, 
\emph on

\begin_inset Formula $m$
\end_inset


\emph default
) to 
\emph on
result
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\emph on
result
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(a) Implement this as a Sage program.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 This is not hard, but you have to be careful.
 First, the recursive nature of the algorithm means 
\emph on
result
\emph default
 must be a frozen set.
 However, creating a frozen set that contains a set 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

 doesn't work if you use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
frozenset(S)
\end_layout

\end_inset

, because that creates a frozen set whose elements are the elements of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

, in essence 
\emph on
converting
\emph default
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

 from a mutable set to a frozen set, rather than making a frozen set whose
 one element is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

.
 To create a frozen set whose element is another set, first create a mutable
 set, add a frozen set to it, then convert the mutable set to a frozen set.
 Essentially, the one line of the first case of the pseudocode turns into
 three lines of Sage code.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Let 
\begin_inset Formula $S=\left\{ 1,2,3,4,5,6,7,8\right\} $
\end_inset

 and evaluate the size of 
\emph on
combinations
\emph default
(
\emph on
S
\emph default
, 
\emph on
i
\emph default
) for each 
\begin_inset Formula $i=0,\ldots,8$
\end_inset

.
 The resulting sizes appear earlier in the text.
 Where?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Do you think this is a freak accident, or does it hold in general? What
 makes you say this?
\end_layout

\end_deeper
\begin_layout Chapter
Making your pictures 3-dimensional
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: 3d plots"

\end_inset

This chapter takes a look at the three-dimensional objects and graphs that
 you might use.
\end_layout

\begin_layout Standard
Many of the commands from two dimensions have a 3D extension, with some
 options carrying over as well.
 As before, we will not illustrate every option, expecting that options
 may change in future versions of Sage.
\end_layout

\begin_layout Standard
Combining graphs is again done through addition, and the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 command also applies to 3D plots.
 For 3d plots, the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 command adds an option that allows you to select a 
\begin_inset Quotes eld
\end_inset

viewer
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

renderer
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
When using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 as a command, such as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show(p, \SpecialChar ldots
)
\end_layout

\end_inset

, use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
renderer
\end_layout

\end_inset

 option to select one of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'webgl'
\end_layout

\end_inset

 (fastest), 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'canvas'
\end_layout

\end_inset

 (may work better with transparency), or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'tachyon'
\end_layout

\end_inset

.
 This latter option gives a static image, whereas 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'webgl'
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'canvas'
\end_layout

\end_inset

 are interactive.
\end_layout

\begin_layout Itemize
When using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
show()
\end_layout

\end_inset

 as a method, such as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p.show(\SpecialChar ldots
)
\end_layout

\end_inset

, use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
viewer
\end_layout

\end_inset

 option to select one of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'jmol'
\end_layout

\end_inset

 (requires Java), 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'java3d'
\end_layout

\end_inset

 (also requires Java), 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'canvas3d'
\end_layout

\end_inset

 (browser only, uses JavaScript), and again 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
tachyon'
\end_layout

\end_inset

.
 Again, all but the last are interactive.
\end_layout

\begin_layout Standard
What do we mean by 
\begin_inset Quotes eld
\end_inset

interactive
\begin_inset Quotes erd
\end_inset

? The new feature of 3D plots is that the graphs can be manipulated–you
 can change the point of view! You'll do this by clicking to make it active
 and then clicking and dragging to change the viewing angle.
 You can also zoom by scrolling.
 Other viewing options are available through a menu accessible by right-clicking
; we'll let you explore those.
\end_layout

\begin_layout Section*
3D objects
\end_layout

\begin_layout Subsection*
\begin_inset Quotes eld
\end_inset

Straight
\begin_inset Quotes erd
\end_inset

 stuff
\end_layout

\begin_layout Standard
Many of the 2D graphing procedures that we studied previously have a correspondi
ng procedure in 3 dimensions: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset

.
 Since all of these require one or more points, Sage will recognize that
 the points are given in 3D and will graph them appropriately.
 Many options carry over.
\end_layout

\begin_layout Standard
If we give the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
point()
\end_layout

\end_inset

 command one or more triples (rather than pairs) it will plot points, each
 of whose coordinates is determined by a listed triple.
 Lines are again graphed with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

 command.
 In 3D, the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line()
\end_layout

\end_inset

 command has an 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
arrow_head
\end_layout

\end_inset

 option; if set to 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

, the arrow head is only shown at the last point.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
pts = ((-2,1,3),(4,2,-1),(2,-3,1))
\end_layout

\begin_layout SageInput
p1 = point(pts,color='red',size=20)
\end_layout

\begin_layout SageInput
p2 = line(pts,color='blue',thickness=7,arrow_head=True)
\end_layout

\begin_layout SageInput
p1+p2
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/pt-line.png
	height 2.25in
	BoundingBox 50bp 25bp 475bp 450bp
	clip

\end_inset


\end_layout

\begin_layout Standard
Polygons are graphed in 3D as in 2D with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon()
\end_layout

\end_inset

 command, which requires a collection of points.
 The only options available in 3D are 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
opacity
\end_layout

\end_inset

.
 Here is a triangle:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
polygon([(1,0,2),(3,1,5),(4,2,1)],color='orange')
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/polygon3d.png
	height 1.5in

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset Quotes eld
\end_inset

Curvy
\begin_inset Quotes erd
\end_inset

 stuff
\end_layout

\begin_layout Standard
The circle procedure can also produce circles in 3 dimensions, again needing
 a center point and a size.
 Circles graphed with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
circle()
\end_layout

\end_inset

 command will be placed parallel to the 
\begin_inset Formula $xy$
\end_inset

-plane; if you want other orientations, you'll need to use other methods
 described later.
 There are no 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
edgecolor
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
facecolor
\end_layout

\end_inset

 options for circles in 3D.
 As in 2D, if you want a disk, set the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill
\end_layout

\end_inset

 option to 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
circle((2,1,3),4,thickness=10)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/circle3d.png
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
In 3D, the set of all points equidistant from a particular point is a sphere.
 We can graph spheres using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sphere()
\end_layout

\end_inset

 command, which requires a center and a radius (size).
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
sphere(center=(1,2,.5),size=3)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/sphere.png
	height 1.5in

\end_inset


\end_layout

\begin_layout Section*
Basic 3D plots
\end_layout

\begin_layout Standard
If you have taken multivariable calculus, didn't you wish your handheld
 calculator could have graphed those surfaces? Thankfully, Sage can! Many
 of the 2D graphing procedures that we studied earlier have a corresponding
 procedure in 3 dimensions.
 There are several ways to represent 3-dimensional relations:
\end_layout

\begin_layout Itemize
Cartesian coordinates with either
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $z$
\end_inset

 as a function of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

;
\end_layout

\begin_layout Itemize
an implicit equation in terms of 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

, and 
\begin_inset Formula $z$
\end_inset

, but not necessarily a function;
\end_layout

\begin_layout Itemize
with 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

, and 
\begin_inset Formula $z$
\end_inset

 in terms of a third variable 
\begin_inset Formula $t$
\end_inset

, a parameter;
\end_layout

\begin_layout Itemize
with 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

, and 
\begin_inset Formula $z$
\end_inset

 in terms of two other parameters 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

;
\end_layout

\end_deeper
\begin_layout Itemize
spherical coordinates; and
\end_layout

\begin_layout Itemize
cylindrical coordinates.
\end_layout

\begin_layout Subsection*
Generic Cartesian plots
\end_layout

\begin_layout Standard
The most familiar three-dimensional relation defines the value of one variable
 (often 
\begin_inset Formula $z$
\end_inset

) in terms of two others (typically 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

).
 Unlike the 2D 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot()
\end_layout

\end_inset

 command, the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

 command has no option to detect poles and show asymptotes.
\end_layout

\begin_layout Standard
In the next few examples, we graph 
\begin_inset Formula $f(x,y)=\nicefrac{-x}{1+x^{2}+y^{2}}$
\end_inset

 with two different styles of plots and with various options.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x,y) = -x/(1+x^2+y^2)
\end_layout

\begin_layout SageInput
plot3d(f(x,y), (x,-3,3), (y,-3,3), opacity=.8)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/plot3d.png
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
Setting the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
mesh
\end_layout

\end_inset

 option to 
\begin_inset Flex Boolean Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 produces graphs with an 
\begin_inset Formula $xy$
\end_inset

-grid on the surface, like those in many textbooks:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
plot3d(f(x,y), (x,-3,3), (y,-3,3), opacity=.8, 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='lightblue',mesh=True)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/3dmesh.png
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
When part of the 3D graph is obscured, it may be easier to view the same
 surface using a 
\begin_inset Quotes eld
\end_inset

contour plot.
\begin_inset Quotes erd
\end_inset

 Think of this plot as an aerial view of the graph, with points in the same
 color having 
\begin_inset Formula $z$
\end_inset

-values within the same range, as shown on the color bar to the right.
 With the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'Spectral'
\end_layout

\end_inset

 color map used below, the lowest points are in red, and the highest points
 are in blue.
 The contour levels (the 
\begin_inset Formula $z$
\end_inset

-value increments shown on the color bar) were determined automatically,
 but they may be specified using a list for the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
contours
\end_layout

\end_inset

 option.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
contour_plot(f(x,y),(x,-3,3),(y,-3,3), cmap='Spectral', 
\backslash
 colorbar=True)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/contour_cmap.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Standard
The boundaries between color regions are called 
\begin_inset Quotes eld
\end_inset

level curves,
\begin_inset Quotes erd
\end_inset

 meaning that 
\begin_inset Formula $f(x,y)=k$
\end_inset

 for some constant 
\begin_inset Formula $k$
\end_inset

.
 If you prefer, to see just the level curves, use the option 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fill=
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

.
 (You will notice that many textbook authors use this option.)
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('y')
\end_layout

\begin_layout SageInput
contour_plot(f(x,y), (x,-3,3), (y,-3,3), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 cmap='Spectral', fill=False, colorbar=True)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/contour_plot.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Subsubsection*
Tangent planes: combining 3D plots
\end_layout

\begin_layout Standard
Let's graph a function 
\begin_inset Formula $f(x,y)$
\end_inset

 and the plane tangent to 
\begin_inset Formula $f(x,y)$
\end_inset

 at a point 
\begin_inset Formula $P_{0}=(x_{0},y_{0},z_{0})$
\end_inset

.
 Recall that the tangent plane depends on the first partial derivatives
 of 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $P_{0}$
\end_inset

 and is given by 
\begin_inset Formula 
\[
z=f_{x}(x_{0},y_{0})(x-x_{0})+f_{y}(x_{0},y_{0})(y-y_{0})+z_{0},
\]

\end_inset

where 
\begin_inset Formula $f_{x}$
\end_inset

 and 
\begin_inset Formula $f_{y}$
\end_inset

are the first partial derivatives.
 We can easily write a Sage procedure to compute the tangent plane and graph
 both 
\begin_inset Formula $f(x,y)$
\end_inset

 and the tangent plane over the rectangular region 
\begin_inset Formula $[a,b]\times[c,d]$
\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def plot_f_tanplane(f,pt,a,b,c,d):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x,y)=f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x0,y0=pt
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

fx = diff(f,x)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

fy = diff(f,y)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

z0 = f(x0,y0)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

tanplane = fx(x0,y0)*(x-x0) + fy(x0,y0)*(y-y0) + z0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p1 = plot3d(f,(x,a,b),(y,c,d))
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p2 = plot3d(tanplane,(x,a,b),(y,c,d), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='limegreen',opacity=.6)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p3 = point((x0,y0,z0),color='red',size=30)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return p1 + p2 + p3
\end_layout

\end_deeper
\begin_layout SageInteraction

\end_layout

\begin_layout Standard
\noindent
Now we can produce graphs of tangent planes for any function where the partial
 derivatives are defined.
 For example,
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('y')
\end_layout

\begin_layout SageInput
plot_f_tanplane(1-x^2-y^2,(1,-2),-3,3,-3,3)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/tanplane.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Subsection*
Parameterizations in 3D
\end_layout

\begin_layout Standard
Another way to plot three-dimensional objects is through parameterization.
 Curves are parameterized in a single variable, often called 
\begin_inset Formula $t$
\end_inset

.
 We saw earlier that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
circle()
\end_layout

\end_inset

 command always plots a 3D circle parallel to the 
\begin_inset Formula $xy$
\end_inset

-plane.
 With parameterization, we can orient circles in other ways, for instance,
 parallel to the 
\begin_inset Formula $xz$
\end_inset

-plane:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('t')
\end_layout

\begin_layout SageInput
parametric_plot3d((1,cos(t),sin(t)),(t,0,2*pi),thickness=10)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/parcircle.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Standard
The default number of points to plot is 75, but it is often necessary to
 use more points to smooth out the graph.
 Here is a 
\begin_inset Quotes eld
\end_inset

toroidal spiral
\begin_inset Quotes erd
\end_inset

 which doesn't look especially spirally.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('t')
\end_layout

\begin_layout SageInput
p = parametric_plot3d(((4+sin(25*t))*cos(t), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(4+sin(25*t))*sin(t), cos(25*t)), (t,0,2*pi), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='red', thickness=10)
\end_layout

\begin_layout SageInput
show(p,aspect_ratio=1)
\end_layout

\end_deeper
\begin_layout SageInteraction

\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/parcurve3d_unrefined.png
	width 4in
	BoundingBox 35bp 0bp 665bp 347bp
	clip

\end_inset


\end_layout

\begin_layout Standard
\noindent
The reason is that it needs about 200 points to make it smooth.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('t')
\end_layout

\begin_layout SageInput
p = parametric_plot3d(((4+sin(25*t))*cos(t), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(4+sin(25*t))*sin(t), cos(25*t)), (t,0,2*pi), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='red', thickness=10, plot_points=200)
\end_layout

\begin_layout SageInput
show(p,aspect_ratio=1)
\end_layout

\end_deeper
\begin_layout SageInteraction

\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/parcurve3d.png
	width 4in

\end_inset


\end_layout

\begin_layout Standard
We can use the same 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot3d()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot3d()
\end_layout

\end_inset

 command to graph parametric surfaces.
 Defining parametric surfaces requires two independent variables, often
 called 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
 For example, we can graph the surface defined by 
\begin_inset Formula $x=u^{3},$
\end_inset

 
\begin_inset Formula $y=u\sin(v)$
\end_inset

, 
\begin_inset Formula $z=u\cos(v)$
\end_inset

 for 
\begin_inset Formula $-4\le u\le4$
\end_inset

 and 
\begin_inset Formula $0\le v\le2\pi$
\end_inset

 in Sage:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('u v')
\end_layout

\begin_layout SageInput
parametric_plot3d((u^3,u*sin(v),u*cos(v)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(u,-4,4), (v,0,2*pi), opacity=.8)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/parsurf3d.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Subsection*
Cylindrical and spherical coordinates
\end_layout

\begin_layout Standard
Surfaces given in cylindrical or spherical coordinate systems can be viewed
 as special kinds of parameterizations.
 From cylindrical coordinates 
\begin_inset Formula $(r,\theta,z)$
\end_inset

, we convert to rectangular coordinates by 
\begin_inset Formula $x=r\cos\theta$
\end_inset

, 
\begin_inset Formula $y=r\sin\theta$
\end_inset

, and 
\begin_inset Formula $z=z$
\end_inset

.
 Below is the surface 
\begin_inset Formula $r=\sin(z)$
\end_inset

, for 
\begin_inset Formula $0\le\theta\le2\pi$
\end_inset

 and 
\begin_inset Formula $0\le z\le2\pi$
\end_inset

.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('u v')
\end_layout

\begin_layout SageInput
show(parametric_plot3d((sin(u)*cos(v),sin(u)*sin(v),u), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(u,0,2*pi), (v,0,2*pi)), aspect_ratio=1)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/blue_cylindrical.png
	height 2in

\end_inset


\end_layout

\begin_layout Standard
\noindent
An alternative method uses 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

 with a cylindrical transformation.
 The 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Cylindrical()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Cylindrical()
\end_layout

\end_inset

 command, as used below, will view the radius as a function of azimuth (
\begin_inset Formula $\theta$
\end_inset

) and height (
\begin_inset Formula $z$
\end_inset

).
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
S=Cylindrical('radius', ['azimuth', 'height'])
\end_layout

\begin_layout SageInput
var('theta, z')
\end_layout

\begin_layout SageInput
show(plot3d(sin(z), (theta,0,2*pi), (z,0,2*pi), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

transformation=S, color='purple'), aspect_ratio=1)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Both methods produce the same graph.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/cylindrical.png
	height 2in

\end_inset


\end_layout

\begin_layout Standard
The conversion from spherical coordinates 
\begin_inset Formula $(\rho,\theta,\phi)$
\end_inset

 to rectangular coordinates is given by 
\begin_inset Formula $x=\rho\sin\phi\cos\theta$
\end_inset

, 
\begin_inset Formula $y=\rho\sin\phi\sin\theta$
\end_inset

, and 
\begin_inset Formula $z=\rho\cos\phi$
\end_inset

.
 The surface defined by 
\begin_inset Formula $\rho=1+\frac{1}{6}\sin(5\theta)\sin(6\phi)$
\end_inset

 for 
\begin_inset Formula $0\le\theta\le2\pi$
\end_inset

 and for 
\begin_inset Formula $0\le\phi\le\pi$
\end_inset

 is known as a 
\begin_inset Quotes eld
\end_inset

bumpy sphere
\begin_inset Quotes erd
\end_inset

 and would be graphed in Sage by
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('theta phi')
\end_layout

\begin_layout SageInput
rho = 1+(1/6)*sin(5*theta)*sin(6*phi)
\end_layout

\begin_layout SageInput
parametric_plot3d((rho*sin(phi)*cos(theta), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

rho*sin(phi)*sin(theta), rho*cos(phi)), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(theta,0,2*pi), (phi,0,pi), plot_points=[200,200], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='limegreen')
\end_layout

\end_deeper
\begin_layout Standard
Again, we can form the same graph using the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

 command and an appropriate transformation.
 The transformation is given by the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Spherical()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Spherical()
\end_layout

\end_inset

 command, viewing the radius as a function of the azimuth (
\begin_inset Formula $\theta$
\end_inset

) and inclination (
\begin_inset Formula $\phi$
\end_inset

).
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
T = Spherical('radius', ['azimuth', 'inclination'])
\end_layout

\begin_layout SageInput
var('phi theta')
\end_layout

\begin_layout SageInput
plot3d(1+(1/6)*sin(5*theta)*sin(6*phi), (theta,0,2*pi), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(phi,0,pi), transformation=T, plot_points=[200,200], 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

color='limegreen')
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/bumpy_sphere.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Section*
Advanced tools for 3d plots
\end_layout

\begin_layout Standard
Sage offers a number of tools that assist in the production of special kinds
 of 3d plots in Cartesian, cylindrical, or spherical coordinates.
\end_layout

\begin_layout Subsection*
Surfaces of revolution
\end_layout

\begin_layout Standard
A special kind of surface is a surface of revolution.
 It is possible to graph these through parameterizations, but it is certainly
 helpful that Sage has a procedure especially for such graphs.
 Use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
revolution_plot3d()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
revolution_plot3d()
\end_layout

\end_inset


\end_layout

\end_inset

 to graph these based on just the function, the axis of revolution, and
 the interval.
 Recall that if we revolve a function 
\begin_inset Formula $f(x)$
\end_inset

 about the 
\begin_inset Formula $x$
\end_inset

-axis, its surface area is given by
\begin_inset Formula 
\[
S={\displaystyle \int_{a}^{b}2\pi f(x)\sqrt{1+f'(x)^{2}}dx}
\]

\end_inset

If 
\begin_inset Formula $f(x)=\sqrt{{3x-2}},$
\end_inset

 we can ask Sage to compute the area of the surface of revolution 
\emph on
and
\emph default
 visualize both the curve 
\begin_inset Formula $f(x)$
\end_inset

 and the 3D surface.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
f(x) = sqrt(3*x-2)
\end_layout

\begin_layout SageInput
integral(2*pi*f(x)*sqrt(1+diff(f,x)**2), x, 0, 5)
\end_layout

\begin_layout SageOutput
1/18*pi*(61*sqrt(61) - 1)
\end_layout

\begin_layout SageInput
show(revolution_plot3d(f, (x,0,5), parallel_axis='x', 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

show_curve=True, opacity=0.7), aspect_ratio=1)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/revplot3d.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Subsection*

\series bold
Implicit plots in 3D
\end_layout

\begin_layout Standard
As in 2D, the most convenient way to describe some surfaces is implicitly.
 This time, the equations may involve one or more of the variables 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

, and 
\begin_inset Formula $z$
\end_inset

.
 With the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
implicit_plot3d()
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot3d()
\end_layout

\end_inset

 command, we need to specify an equation, as well as the maximum and minimum
 values for all three variables.
 In this example, the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot3d()
\end_layout

\end_inset

 command is used to produce a hyperboloid of one sheet:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('x y z')
\end_layout

\begin_layout SageInput
implicit_plot3d(x^2/2+y^2/2-z^2/3==1, (x,-4,4), (y,-4,4), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(z,-4,4), opacity=.7, plot_points=200)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/hyperboloid.png
	height 2.5in
	BoundingBox 35bp 35bp 465bp 435bp
	clip

\end_inset


\end_layout

\begin_layout Standard
After all this, aren't you ready for a wild cherry snowball?
\begin_inset Foot
status open

\begin_layout Plain Layout
Wild cherry because wedding cake will not show up.
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('z theta r phi')
\end_layout

\begin_layout SageInput
bh=4 # z-coordinate for base of cup
\end_layout

\begin_layout SageInput
th=8 # z-coordinate for top of cup
\end_layout

\begin_layout SageInput
br=bh/(th-bh) # radius of base of cup
\end_layout

\begin_layout SageInput
tr=th/(th-bh) # radius of top of cup
\end_layout

\begin_layout SageInput
a = .1 #straw radius
\end_layout

\begin_layout SageInput
cupside=parametric_plot3d((z*cos(theta)/(th-bh), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

z*sin(theta)/(th-bh),z), (theta,0,2*pi), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(z,bh,th), color='aliceblue')
\end_layout

\begin_layout SageInput
cupbase=parametric_plot3d((r*cos(theta), r*sin(theta), bh), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(theta,0,2*pi), (r,0,br),color='aliceblue')
\end_layout

\begin_layout SageInput
snow=parametric_plot3d((tr*sin(theta)*cos(phi), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

tr*cos(theta)*cos(phi), tr*sin(phi)+th), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(theta,0,2*pi), (phi,0,pi/2),color='red')
\end_layout

\begin_layout SageInput
straw = parametric_plot3d((a*cos(theta),a*sin(theta),z), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(theta,0,2*pi),(z,bh+.01,th+2*tr))
\end_layout

\begin_layout SageInput
show(cupside+cupbase+snow+straw,aspect_ratio=1)
\end_layout

\end_deeper
\begin_layout SageInteraction

\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/snowball.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Subsection*
Vector fields
\end_layout

\begin_layout Standard
A vector field assigns to each point in the domain (either 
\begin_inset Formula $\mathbb{{R}}^{2}$
\end_inset

or 
\begin_inset Formula $\mathbb{{R}}^{3}$
\end_inset

) a 2- or 3-dimensional vector.
 Two-dimensional vector fields can be graphed with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_vector_field()
\end_layout

\end_inset

.
 Three-dimensional vector fields can be graphed with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_vector_field3d()
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_vector_field3d()
\end_layout

\end_inset


\end_layout

\end_inset

 command.
 In the example below, we graph the vector field 
\begin_inset Formula $\mathbf{F}(x,y,z)=-2xy\mathbf{i}-3z\mathbf{j}+z\mathbf{k}$
\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
plot_vector_field3d((2*x*y,-3*z,z),(x,0,2),(y,0,2),(z,0,2))
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/vectorfield3d.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Section*
Ascending a hill
\end_layout

\begin_layout Standard
What is the quickest way up a hill? You should start by looking immediately
 around you, find the steepest path possible, proceed a little way in that
 direction.
 Then repeat this process, reevaluating your course after you go some small
 distance.
 Continue in this fashion and eventually you reach the top of the hill.
 You only have to look immediately around your current position at any point
 along the way.
 This strategy describes an important mathematical technique called 
\begin_inset Quotes eld
\end_inset

gradient ascent.
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
After going up the hill, you may want to go back down — or perhaps you never
 wanted to climb it in the first place! In this case, you can use the method
 of gradient 
\emph on
de
\emph default
scent.
 Want to guess how that works?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you know, the peak of the hill would be called a local maximum.
 Exact methods may be able to find the coordinates of the local maximum.
 When exact methods fail, the method of gradient ascent will give an excellent
 approximation.
 Better than that, it also approximates the path of steepest ascent.
\end_layout

\begin_layout Standard
How do we know which direction to proceed in? The gradient of a function
 
\begin_inset Formula $f(x,y)$
\end_inset

 is the vector function 
\begin_inset Formula $\nabla f$
\end_inset

 defined by
\begin_inset Formula 
\[
\nabla f\left(x,y\right)=\frac{\partial f}{\partial x}\overrightarrow{\mathbf{i}}+\frac{\partial f}{\partial y}\overrightarrow{{\bf j}}.
\]

\end_inset

(Here, 
\begin_inset Formula $\overrightarrow{\mathbf{i}}$
\end_inset

 and 
\begin_inset Formula $\overrightarrow{\mathbf{j}}$
\end_inset

 represent the canonical basis vectors along the 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-axes.) When evaluated at a point 
\begin_inset Formula $(x_{0},y_{0})$
\end_inset

, the gradient gives a vector in the direction of the maximum rate of change.
 For example, if 
\begin_inset Formula $f(x,y)=\nicefrac{-x}{1+x^{2}+y^{2}}$
\end_inset

 as before, we can plot its 2D gradient vector field.
 Each vector points in the direction of steepest ascent from its tail point.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
var('y')
\end_layout

\begin_layout SageInput
f(x,y)=-x/(1+x^2+y^2)
\end_layout

\begin_layout SageInput
cp = contour_plot(f(x,y),(x,-3,3),(y,-3,3), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cmap='Spectral', fill=False,colorbar=True)
\end_layout

\begin_layout SageInput
vf = plot_vector_field(f.gradient(),(x,-3,3),(y,-3,3))
\end_layout

\begin_layout SageInput
show(cp+vf)
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/cp+vf.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Standard
Back to our gradient ascent: If we compute the gradient at our starting
 point, take a small step in that direction, we can repeat the process from
 that next point until we are at the top of the hill.
 The small steps are just gradient vectors scaled down using a small value
 of 
\begin_inset Formula $\varepsilon$
\end_inset

.
 From any point 
\begin_inset Formula $\left(x_{n},y_{n}\right)$
\end_inset

, we move to the next point 
\begin_inset Formula $\left(x_{n+1},y_{n+1}\right)$
\end_inset

 by the formula
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left(x_{n+1},y_{n+1}\right)=\left(x_{n},y_{n}\right)+\varepsilon\nabla F\left(x_{n},y_{n}\right).
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Since each point depends only on the previous point, an implementation needs
 to remember only the current position in order to compute the next one.
 Rather than use subscripts as above, we can rewrite the formula more simply
 using 
\series bold
q
\series default
 as the current point and 
\series bold
p
\series default
 as the previous point:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbf{q}=\mathbf{p}+\varepsilon\nabla F(\mathbf{p})
\]

\end_inset


\end_layout

\begin_layout Standard
How do we know when we've reached the top? Near the local maximum, the magnitude
 of the gradient vector will be nearly zero.
 (This means the tangent plane will be nearly horizontal.) When this short
 gradient vector is scaled down by 
\begin_inset Formula $\varepsilon$
\end_inset

, adding the vector 
\begin_inset Formula $\varepsilon\nabla F\left(\mathbf{p}\right)$
\end_inset

 to 
\series bold
p
\series default
 will keep 
\series bold
q
\series default
 very close to 
\series bold
p
\series default
.
 So we can say that we have reached the local maximum when our steps become
 very small, i.e., when the distance between points 
\series bold
p
\series default
 and 
\series bold
q
\series default
 is smaller than some desired accuracy.
 Since we cannot predict the number of steps before starting, we use a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
while
\end_layout

\end_inset

 loop for the repetition.
\end_layout

\begin_layout Standard
We can take advantage of the nature of the condition in the while loop by
 starting p and q appropriately.
\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 gradient_ascent
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $f\left(x,y\right)$
\end_inset

, a differentiable function given as an expression or function in 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Itemize

\series bold
\begin_inset Formula $\mathbf{p}$
\end_inset


\series default
, the point 
\begin_inset Formula $\left(x_{0},y_{0}\right)$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $d$
\end_inset

, the desired number of decimal places of accuracy
\end_layout

\begin_layout Itemize
\begin_inset Formula $\varepsilon$
\end_inset

, the scaling factor of a step
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
a list 
\begin_inset Formula $L$
\end_inset

 of the points along the approximate path of steepest ascent
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

convert 
\series bold

\begin_inset Formula $\mathbf{p}$
\end_inset


\series default
 to a vector
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
let 
\begin_inset Formula $L=\left(\mathbf{p}\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\series bold

\begin_inset Formula $\boldsymbol{\mathbf{q}=\mathbf{p}}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
add 
\begin_inset Formula $\overrightarrow{\boldsymbol{i}}$
\end_inset

 to 
\begin_inset Formula $\mathbf{p}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

repeat as long as 
\series bold

\begin_inset Formula $\mathbf{p}$
\end_inset


\series default
 and 
\series bold

\begin_inset Formula $\mathbf{q}$
\end_inset


\series default
 are farther apart than the desired accuracy:
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\series bold

\begin_inset Formula $\mathbf{p}=\mathbf{q}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $\mathbf{q}=\mathbf{p}+\epsilon\nabla f\left(\mathbf{p}\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

append 
\series bold

\begin_inset Formula $\mathbf{q}$
\end_inset


\series default
 to the list
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

return the list
\end_layout

\begin_layout Standard
This translates to the following Sage code:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def gradient_ascent(f,p,eps,d):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = vector(p).n()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L = [p]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

q = p
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = p + vector([1,0])
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

grad = f.gradient()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while round(norm(p-q), d) > 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

p = q
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

q = p + eps*grad(x=p[0], y=p[1])
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L.append(q)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return L
\end_layout

\end_deeper
\begin_layout SageInteraction

\end_layout

\begin_layout Standard
Let's add a visualization of our steps along the path.
 If we have a path as a list of 
\begin_inset Formula $(x,y)$
\end_inset

 points output from the gradient ascent algorithm, then we can graph those
 points on the 3d plot with an arrow toward the last point.
 In order to know the dimensions of the plot of 
\begin_inset Formula $f(x,y)$
\end_inset

, we will need the minimum and maximum 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-values from all points on the path.
 A helper procedure to find these values is given here:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def xyminmax(L):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

xvals = [pt[0] for pt in L]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

yvals = [pt[1] for pt in L]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

xmin = min(xvals)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

xmax = max(xvals)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

ymin = min(yvals)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

ymax = max(yvals)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return xmin, xmax, ymin, ymax
\end_layout

\end_deeper
\begin_layout Standard
In our visualization, we will include the 3D plot of 
\begin_inset Formula $f(x,y)$
\end_inset

 and the line segments with an arrowhead.
 We extend the graph of 
\begin_inset Formula $f(x,y)$
\end_inset

 to include a bit more beyond the minimum and maximum 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-values.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def visual_gradient_ascent3d(f,p,eps,d):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

L = gradient_ascent(f,p,eps,d)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

xmin, xmax, ymin, ymax = xyminmax(L)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

xrange = xmax - xmin
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

yrange = ymax - ymin
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

g = plot3d(f, (x, xmin - .1*xrange, xmax+.1*xrange), 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(y, ymin - .1*yrange, ymax+.1*yrange), opacity=.5)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

g = g + line3d([(pt[0], pt[1], f(x=pt[0], y=pt[1])) 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for pt in L], color='red', arrow=True, size=30)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

show(g)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

q = L[-1]
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return q, f(x=q[0], y=q[1])
\end_layout

\end_deeper
\begin_layout Standard
Starting from 
\begin_inset Formula $(1,1)$
\end_inset

 on 
\begin_inset Formula $g(x,y)=\frac{1-x}{1+x^{2}+y^{2}}$
\end_inset

, the algorithm finds that 25 steps are needed for 3 decimal places of accuracy
 with 
\begin_inset Formula $\varepsilon=.2$
\end_inset

.
 The maximum value is approximately 
\begin_inset Formula $z=1.2071$
\end_inset

 at 
\begin_inset Formula $(-0.4141,0.00069)$
\end_inset

, and the path has this shape:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/grad_ascent_example.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Parametric curves and parametric surfaces can be graphed using the same
 Sage command.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 Every 3D graphing procedure in Sage has a corresponding 2D procedure.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 In 3D, graphs are combined by appending them.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
detect_poles=
\end_layout

\end_inset


\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 option will detect the asymptote in 
\begin_inset Formula $f(x,y)=\nicefrac{3}{x^{2}+y^{2}}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 If you want to graph 
\begin_inset Formula $\rho=\nicefrac{\theta}{\phi}$
\end_inset

 for 
\begin_inset Formula $\nicefrac{\pi}{12}\le\phi\le\pi$
\end_inset

 and 
\begin_inset Formula $0\le\theta\le6\pi$
\end_inset

, the easiest way is with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

 command.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 The surface 
\begin_inset Formula $r=z\sin(2\theta)$
\end_inset

 for 
\begin_inset Formula $0\le z\le1$
\end_inset

 and 
\begin_inset Formula $0\le\theta\le2\pi$
\end_inset

 is the same as for 
\begin_inset Formula $0\le\theta\le8\pi$
\end_inset

, so Sage's graph of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d(z*sin(2*theta), (theta,0,2*pi), (z,0,2), transformation=C)
\end_layout

\end_inset

 is the same as that of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d(z*sin(2*theta), (theta,0,8*pi), (z,0,2), transformation=C)
\end_layout

\end_inset

, after letting 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C=Cylindrical('radius', ['azimuth', 'height'])
\end_layout

\end_inset

,
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 The best way to graph the paraboloid 
\begin_inset Formula $y=x^{2}+z^{2}$
\end_inset

 is to isolate 
\begin_inset Formula $z$
\end_inset

 by taking the square root, plot the positive and negative branches separately
 using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

, and combine them using addition.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 If you want to see the level curves of 
\begin_inset Formula $f(x,y)$
\end_inset

, you use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

 with the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
mesh=True
\end_layout

\end_inset

 option.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 The domain of 
\begin_inset Formula $\nabla f(x,y)$
\end_inset

 is a subset of 
\begin_inset Formula $\mathbb{{R}}^{2}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 If the function has no local maximum, the gradient ascent algorithm returns
 the initial point 
\begin_inset Formula $(x_{0},y_{0})$
\end_inset

.
\end_layout

\begin_layout Subsection*
Multiple choice
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Suppose 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
pts
\end_layout

\end_inset

 is a list of 3D points.
 If you want to use those vertices to plot an unfilled, outlined polygon
 in 3D, what should you do?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon(pts, fill=False)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
polygon(pts, color=None, edgecolor='green')
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
line(pts+[pts[0]])
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 ask your instructor
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
2.
 How many parameters are needed to parametrically define 3-dimensional curves?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 1
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 2
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 3
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 4
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
3.
 How many parameters are needed to parametrically define 3-dimensional surfaces?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 1
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 2
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 3
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 4
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
4.
 Compare a gradient vector to the level curve from which it originates.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 The gradient vector is always tangential to the level curve.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 The gradient vector is always perpendicular to the level curve.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 The gradient vector has no relationship to the level curve.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 The gradient vector always has the same color as the level curve.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
5.
 The error produced by 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d(sin(x*y)/(x*y), (x,5,-5), (y,-3,3))
\end_layout

\end_inset

 is due to
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 the function being undefined at the origin
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 misplaced parentheses
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 the region not being square
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 the reversal of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmax
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
6.
 If you are graphing a 3D surface with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

, how many pairs of min and max values do you need to give?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 1
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 2
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 3
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 4
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
7.
 If you are graphing a 3D surface with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot3d()
\end_layout

\end_inset

, how many pairs of min and max values do you need to give?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 1
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 2
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 3
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 4
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
8.
 To modify the gradient ascent algorithm to do gradient descent, we should
 let
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Formula $\mathbf{q}=-\mathbf{p}+\varepsilon\nabla f\left(\mathbf{p}\right)$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Formula $\mathbf{q}=\mathbf{p}+\varepsilon\nabla f\left(-\mathbf{p}\right)$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Formula $\mathbf{\mathbf{q}=}-\mathbf{\mathbf{p}}-\varepsilon\nabla f\left(\mathbf{p}\right)$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Formula $\mathbf{q}=\mathbf{p}-\varepsilon\nabla f\left(\mathbf{p}\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
9.
 The gradient ascent algorithm could be modified to find a local maximum
 of functions of how many variables?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 1
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 3
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 4
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 All of these
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
10.
 Which of the following best describes the meaning of the gradient?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 a number that tells you whether you are at a local maximum
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a number that tells you whether to ascend or descend
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a vector-valued function that can be evaluated to tell you which direction
 to go to stay at the same level
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 a vector-valued function that can be evaluated to tell you which direction
 to go to ascend most quickly
\end_layout

\end_deeper
\begin_layout Subsection*
Short answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Are different colors necessary for visualizing a vector field or could
 you still understand the vector field if all vectors were shown in the
 same color?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 What can go wrong with the gradient descent algorithm? Explore with various
 functions and initial points.
 How might you modify the code to avoid these issues?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Plot the ellipsoid 
\begin_inset Formula $2x^{2}+y^{2}+z^{2}=3$
\end_inset

 with each of
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
implicit_plot3d()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
revolution_plot3d()
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
parametric_plot3d()
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Which produces the best graph, even with more plotted points? What issues
 do you see with the others?
\end_layout

\end_deeper
\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write a Sage procedure that would graph line segments with arrow heads
 on all segments.
 Make sure it works for collections of 2D or 3D points.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Rewrite the gradient descent algorithm (without plotting) recursively.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Rewrite the graphical gradient descent algorithm to plot on the surface
 using 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
contour_plot()
\end_layout

\end_inset

 rather than 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot3d()
\end_layout

\end_inset

.
 Also, include the plot of the gradient vector field in the visualization.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Rewrite your code from problem 3 to show an animation on the contour plot,
 where each frame of animation contains one more step than the previous
 frame.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Write a Sage procedure to visualize the region whose area is computed by
 a line integral with respect to arc length 
\begin_inset Formula $\int_{C}f(x,y)\,ds$
\end_inset

 in the case that the curve 
\begin_inset Formula $C$
\end_inset

 parameterized by 
\begin_inset Formula $x(t)$
\end_inset

 and 
\begin_inset Formula $y(t)$
\end_inset

 for 
\begin_inset Formula $a\le t\le b$
\end_inset

.
 The graph should be formed by combining
\end_layout

\begin_deeper
\begin_layout Itemize
the boundary in blue–including vertical lines from the 
\begin_inset Formula $xy$
\end_inset

-plane to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

 and 
\begin_inset Formula $x=b$
\end_inset

 as well as the curve 
\begin_inset Formula $C$
\end_inset

, plotted on the 
\begin_inset Formula $xy$
\end_inset

-plane and projected onto the surface 
\begin_inset Formula $f(x,y)$
\end_inset

,
\end_layout

\begin_layout Itemize
the interior of the region, not shaded, but displayed using at least 50
 vertical lines, showing any positive area with black lines and any negative
 area with red lines, and
\end_layout

\begin_layout Itemize
the graph of 
\begin_inset Formula $f(x,y)$
\end_inset

 in a half-transparent 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
aliceblue
\end_layout

\end_inset

 color.
\end_layout

\begin_layout Standard
For example, with 80 vertical lines, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
visualize_line_int(x+y, (t,t^2), -1, 1)
\end_layout

\end_inset

 should produce a graph like the one below.
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/3d_plotting/vis_line_int.png
	height 2.5in

\end_inset


\end_layout

\begin_layout Chapter
Advanced Techniques
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: adv tech"

\end_inset

This last chapter introduces two techniques that the serious Sage-user will
 find useful, and probably necessary, from time to time.
\end_layout

\begin_layout Section*
Making your own objects
\end_layout

\begin_layout Standard
Sage includes a lot of mathematics.
 — No, that's not right.
 Sage includes
\end_layout

\begin_layout Standard
\align center

\size huge
A LOT
\end_layout

\begin_layout Standard
\noindent
of mathematics.
 You will probably never, ever need to use anything that is not in Sage.
\end_layout

\begin_layout Standard
Still, some mathematicians sometimes work with a group of objects that Sage
 does not offer immediately.
 If you're studying combinatorial games, which are nothing short of awesome
\begin_inset Foot
status open

\begin_layout Plain Layout
Hackenbush, Nim, Chomp, Ideal Nim, Dots, Sprouts, \SpecialChar ldots
 see
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "WinningWays"
literal "true"

\end_inset

 or
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "LessonsInPlay"
literal "true"

\end_inset

 for more information than you can shake a stick at.
\end_layout

\end_inset

 then Sage does not immediately offer a way to perform what is called 
\emph on
Nimber arithmetic.
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\SpecialChar ldots
as of the version being used by the authors at the time of this writing.
 There has been some discussion of including the 
\begin_inset CommandInset href
LatexCommand href
name "Combinatorial Game Suite"
target "http://www.cgsuite.org"
literal "false"

\end_inset

, which would probably fix that in a jiffy, and offer even more than nimbers:
 even surreal numbers.
\end_layout

\end_inset

 This section introduces Nimber arithmetic and shows how you can 
\emph on
create your own type
\emph default
 to enable Sage to do Nimber arithmetic.
\end_layout

\begin_layout Subsection*
Background
\end_layout

\begin_layout Standard
The basic idea of Nimbers is born from a game named 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Nim
\end_layout

\end_inset

Nim, first described in a mathematical journal early in the 20th century.
 The rules are simple:
\end_layout

\begin_layout Itemize
The game is played with pebbles arranged in rows.
\end_layout

\begin_layout Itemize
Each player may take as many pebbles as desired from 
\emph on
one
\emph default
 row.
\end_layout

\begin_layout Itemize
The last player to remove a pebble wins.
\end_layout

\begin_layout Standard
For instance, suppose David and Emmy decide to play a game of Nim with three
 rows of pebbles, where the first row has seven pebbles, the second row
 has five, and the last row has three.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/nim_rows/nim_7_5_3.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
David goes first; suppose he takes four pebbles from the first row.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/nim_rows/nim_3_5_3.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
This was not a very smart move on David's part, as Emmy can take all the
 pebbles from the second row and leave this configuration.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/nim_rows/nim_3_0_3.pdf
	lyxscale 50
	height 1.5in

\end_inset


\end_layout

\begin_layout Standard
\noindent
David now sees that whatever move he makes in one row, Emmy can 
\begin_inset Quotes eld
\end_inset

mirror
\begin_inset Quotes erd
\end_inset

 that move in the other row.
 In other words, he has already lost.
\end_layout

\begin_layout Subsection*
Nimber arithmetic
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
Nimber arithmetic|(
\end_layout

\end_inset

The idea of Nimber arithmetic flows from this observation that, once the
 game works itself down to two rows that are visually symmetric, the game
 is essentially over.
 The arithmetic works like this:
\end_layout

\begin_layout Itemize
The smallest Nimber is
\begin_inset space ~
\end_inset

0, followed by
\begin_inset space ~
\end_inset

1,
\begin_inset space ~
\end_inset

2, \SpecialChar ldots
.
\end_layout

\begin_layout Itemize
Given a set 
\begin_inset Formula $S$
\end_inset

 of Nimbers, the smallest Nimber 
\emph on
not
\emph default
 in 
\begin_inset Formula $S$
\end_inset

 is called the minimum excludant, or 
\begin_inset Formula $\mex$
\end_inset

 for short.
\end_layout

\begin_layout Itemize
To add two Nimbers, write each as a sum of powers of
\begin_inset space ~
\end_inset

2, cancel identical powers, then simplify.
\end_layout

\begin_layout Itemize
Subtraction is equivalent to addition.
\end_layout

\begin_layout Itemize
To multiply two Nimbers 
\begin_inset Formula $m$
\end_inset

 and 
\begin_inset Formula $n$
\end_inset

, find 
\begin_inset Formula $\mex\left\{ in+mj+ij:i<m,j<n\right\} $
\end_inset

.
\end_layout

\begin_layout Standard
So, for example, addition works like so:
\begin_inset Formula 
\begin{align*}
0+x & =x\\
1+1 & =0\\
1+2 & =3\\
2+2 & =0\\
1+3 & =1+\left(1+2\right)=2\\
2+3 & =2+\left(1+2\right)=1\\
3+3 & =0
\end{align*}

\end_inset

while multiplication works like so:
\begin_inset Formula 
\begin{align*}
2\times3 & =\mex\left\{ 0\times3+2\times0+0\times0,1\times3+2\times0+1\times0,0\times3+2\times1+0\times1,\right.\\
 & \qquad\qquad\left.1\times3+2\times1+1\times1,0\times3+2\times2+0\times2,1\times3+2\times2+1\times2\right\} \\
 & =\mex\left\{ 0,3,2\right\} \\
 & =1.
\end{align*}

\end_inset

Observe that the second mex leaves nothing out: the sums and products in
 the first mex are 
\emph on
nimber
\emph default
 sums and products, so that (for instance)
\begin_inset Formula 
\[
1\times3+2\times1+1\times1=3+2+1=0\ .
\]

\end_inset

This is burdensome to do by hand, so it's a good idea to automate it in
 Sage.
\begin_inset Index idx
status open

\begin_layout Plain Layout
Nimber arithmetic|)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We could, of course, write a sequence of procedures that simply perform
 the operations directly, but it's also possible to give Sage a way of dealing
 with the numbers automatically, and using them in a natural way.
 For instance, if we create procedures 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
nim_add()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
nim_mult()
\end_layout

\end_inset

, then to add and multiply 
\begin_inset Formula $a\times b+c\times d$
\end_inset

, we'd have to type
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
nim_add(nim_mult(a,b),nim_mult(c,d))
\end_layout

\end_inset

 .
\end_layout

\begin_layout Standard
\noindent
This is hard to understand.
 It is much more natural to type
\end_layout

\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a*b + c*d
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
and then, so long as Sage recognizes 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
c
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

 as Nimbers, it performs the arithmetic automatically.
\end_layout

\begin_layout Subsection*
Do it with class!
\end_layout

\begin_layout Standard
The way to get Sage to do this is with a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
class
\end_layout

\end_inset

class
\series default
.
 A class describes an object's type to a computer, and tells the computer
 what 
\begin_inset Index idx
status open

\begin_layout Plain Layout
method
\end_layout

\end_inset

methods can be sent to an object of this type.
 Classes allow us to organize programs around data and the things we can
 do with that data, and help to keep things in one place.
 In Sage, the data associated to a class, also called its 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
class!attribute
\end_layout

\end_inset

attributes
\series default
, are accessed inside the class using the 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset

 constant, which we must write as the first argument to each of the class's
 methods.
\begin_inset Foot
status open

\begin_layout Plain Layout
We don't actually have to use the name 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset

; we could use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 if we wanted, or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
this
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
me
\end_layout

\end_inset

, but 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset

 is the convention Sage inherits from Python.
\end_layout

\end_inset

 You will see this in a moment.
\end_layout

\begin_layout Standard
To create a class, use the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
class
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
class
\end_layout

\end_inset

 keyword:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class ClassName:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

#list of procedures associated with this class
\end_layout

\end_deeper
\begin_layout Standard
\noindent
As the colon suggests, the procedures associated with this class should
 be indented.
 When the indentation stops, so does the class.
 Each class should have at least one method named 
\begin_inset Index idx
status open

\begin_layout Plain Layout
class!special methods!init@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__init__()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__init__()
\end_layout

\end_inset

, which tells Sage how to initialize an element of the class.
 This method is called a 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
constructor
\end_layout

\end_inset

constructor
\series default
, and is called silently whenever we create a new object of a class.
\begin_inset Foot
status open

\begin_layout Plain Layout
It is also possible to call it again after we create a new object 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 by typing 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a.__init__(\SpecialChar ldots
)
\end_layout

\end_inset

, though this should be done sparingly, if at all.
\end_layout

\end_inset

 This new object is called an 
\begin_inset Index idx
status open

\begin_layout Plain Layout
instance
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
class!instance
\end_layout

\end_inset


\series bold
instance
\series default
 of the class.
\end_layout

\begin_layout Subsubsection*
Initialization: What information is proper to the class?
\end_layout

\begin_layout Standard
We will define a class named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

.
 A nimber is just a number whose arithmetic works differently than normal,
 so we can simply initialize it with a number, which really ought to be
 an integer, so we'll test for that and raise an exception if not.
 In addition, Nimber arithmetic is based on powers of
\begin_inset space ~
\end_inset

2, so it would be a good idea to keep track of the nimber's representations
 in terms of powers of
\begin_inset space ~
\end_inset

2; we might as well put that into the initialization code.
 Our 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__init__()
\end_layout

\end_inset

 method should, therefore, initialize two items of data with the class 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.value
\end_layout

\end_inset

, the integer associated with this value; and
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.powers
\end_layout

\end_inset

, the powers of
\begin_inset space ~
\end_inset

2 that sum to 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.value
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
To figure out which powers of
\begin_inset space ~
\end_inset

2 sum to 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.value
\end_layout

\end_inset

, we will test whether the number is divisible by
\begin_inset space ~
\end_inset

2, then divide by
\begin_inset space ~
\end_inset

2 to remove powers, keeping only the quotient.
 For instance,
\end_layout

\begin_layout Itemize
11 is not divisible by
\begin_inset space ~
\end_inset

2, so
\begin_inset space ~
\end_inset

1 is a power of
\begin_inset space ~
\end_inset

2 that sums to
\begin_inset space ~
\end_inset

11.
 If we divide
\begin_inset space ~
\end_inset


\begin_inset Formula $11=1+2+8$
\end_inset

 by
\begin_inset space ~
\end_inset

2, we now have
\begin_inset space ~
\end_inset


\begin_inset Formula $5=0+1+4$
\end_inset

.
\end_layout

\begin_layout Itemize
5 is not divisible by
\begin_inset space ~
\end_inset

2, so
\begin_inset space ~
\end_inset

1 is a power of
\begin_inset space ~
\end_inset

2 that sums to
\begin_inset space ~
\end_inset

5.
 We had divided by
\begin_inset space ~
\end_inset

2, so
\begin_inset space ~
\end_inset


\begin_inset Formula $1\times2=2$
\end_inset

 is a power of
\begin_inset space ~
\end_inset

2 that sums to
\begin_inset space ~
\end_inset

11.
 If we divide
\begin_inset space ~
\end_inset


\begin_inset Formula $5=0+1+4$
\end_inset

 by
\begin_inset space ~
\end_inset

2, we now have
\begin_inset space ~
\end_inset


\begin_inset Formula $2=0+0+2$
\end_inset

.
\end_layout

\begin_layout Itemize
2 is divisible by
\begin_inset space ~
\end_inset

2, so
\begin_inset space ~
\end_inset

1 is not a power of
\begin_inset space ~
\end_inset

2 that sums to
\begin_inset space ~
\end_inset

2.
 We had divided by
\begin_inset space ~
\end_inset

2 twice, so
\begin_inset space ~
\end_inset


\begin_inset Formula $1\times2^{2}=4$
\end_inset

 is not a power of
\begin_inset space ~
\end_inset

2 that sums to
\begin_inset space ~
\end_inset

11.
 If we divide
\begin_inset space ~
\end_inset


\begin_inset Formula $0=0+0+2$
\end_inset

 by
\begin_inset space ~
\end_inset

2, we now have
\begin_inset space ~
\end_inset


\begin_inset Formula $1=0+0+1$
\end_inset

.
\end_layout

\begin_layout Itemize
1 is not divisible by
\begin_inset space ~
\end_inset

2, so
\begin_inset space ~
\end_inset

1 is a power of
\begin_inset space ~
\end_inset

2 that sums to
\begin_inset space ~
\end_inset

1.
 We had divided by
\begin_inset space ~
\end_inset

2 three times, so
\begin_inset space ~
\end_inset


\begin_inset Formula $1\times2^{3}=8$
\end_inset

 is a power of
\begin_inset space ~
\end_inset

2 that sums to
\begin_inset space ~
\end_inset

11.
 If we divide
\begin_inset space ~
\end_inset


\begin_inset Formula $1=0+0+1$
\end_inset

 by
\begin_inset space ~
\end_inset

2, we now have 
\begin_inset Formula $0=0+0+0$
\end_inset

.
\end_layout

\begin_layout Standard
Once we hit
\begin_inset space ~
\end_inset

0, we are done, so the powers of
\begin_inset space ~
\end_inset

2 that sum to
\begin_inset space ~
\end_inset

11 correspond to divisions that gave us remainder
\begin_inset space ~
\end_inset

1: that is, 1, 2, and 8.
\end_layout

\begin_layout Standard
That suggests the following initialization code.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class Nimber:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __init__(self, n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# check for valid type
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if type(n) != Integer and type(n) != int or n < 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

raise ValueError( 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

'Nimbers must be nonnegative integers'
\end_layout

\begin_layout SageMoreInput
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

self.value = n
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

self.powers = set()
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# find powers of 2 that add to n
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while n != 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if n % 2 == 1:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

self.powers.add(i)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

n = n // 2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = i * 2
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you are working with a worksheet, go ahead and type this into one cell.
 Later we will add more methods, and you should type those into the same
 cell.
 If you are working from the command line, it is easiest to write this as
 a script and attach it; as you add more methods to the class and save the
 modified file, Sage will automatically re-load it.
\end_layout

\begin_layout Standard
Once we type the above and execute or attach it to Sage, how do we create
 a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 instance? We use the class name as if it were a procedure, whose arguments
 are appropriate to pass to its 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__init__()
\end_layout

\end_inset

 method.
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimbers must be nonnegative integers
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = Nimber(4)
\end_layout

\begin_layout SageInput
b = Nimber(1/2)
\end_layout

\begin_layout SageError
ValueError: Nimbers must be nonnegative integers
\end_layout

\end_deeper
\begin_layout Standard
\noindent
So far, so good.
 Let's look at 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 a little more closely.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a
\end_layout

\begin_layout SageOutput
<__main__.Nimber instance at 0x161c9e5a8>
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's not very helpful output, is it?
\end_layout

\begin_layout Subsubsection*
Representations of an object
\end_layout

\begin_layout Standard
\noindent
To give more useful output, you can add a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
class!special methods!repr@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__repr__()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__repr__()
\end_layout

\end_inset

 method.
 Probably the best thing to do is print 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.value
\end_layout

\end_inset

.
 Sage wants 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__repr__()
\end_layout

\end_inset

 to return a string value, and you can convert 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.value
\end_layout

\end_inset

 to a string using the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
str@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
str()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
str()
\end_layout

\end_inset

 command:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class Nimber:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __repr__(self):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return str(self.value)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
(Don't forget that you need the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__init__()
\end_layout

\end_inset

 definition in the space indicated by the ellipses.) Now when initialize
 a nimber, we can print its value:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = Nimber(4)
\end_layout

\begin_layout SageInput
a
\end_layout

\begin_layout SageOutput
4
\end_layout

\end_deeper
\begin_layout Standard
\noindent
On the other hand, it could be useful to see which powers of
\begin_inset space ~
\end_inset

2 the class has found that sum to the number.
 The methods 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__init__()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__repr__()
\end_layout

\end_inset

 are called 
\begin_inset Quotes eld
\end_inset

special method names,
\begin_inset Quotes erd
\end_inset

 but there isn't a special method name that's appropriate for an alternate,
 more detailed representation of an object.
 For this we can define a method with a name of our own devising; we will
 call it 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.power_repr()
\end_layout

\end_inset

, and it will simply return 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
self
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.powers
\end_layout

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
\noindent
There is no need to surround 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
power_repr
\end_layout

\end_inset

 with underscores, as this is not a 
\begin_inset Quotes eld
\end_inset

special method.
\begin_inset Quotes erd
\end_inset

 The purpose of the underscores is to make sure people don't accidentally
 redefine a special method.
\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class Nimber:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def power_repr(self):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self.powers
\end_layout

\end_deeper
\begin_layout Standard
\noindent
We can now see how this works:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = Nimber(28)
\end_layout

\begin_layout SageInput
a.power_repr()
\end_layout

\begin_layout SageOutput
{4, 8, 16}
\end_layout

\end_deeper
\begin_layout Standard
So far, so good.
\end_layout

\begin_layout Subsubsection*
Implementing arithmetic
\end_layout

\begin_layout Standard
What we 
\emph on
really
\emph default
 need, though, is a way to automate the addition and multiplication of Nimbers
 — preferably in a way that allows us to use ordinary arithmetic operators.
 Again, Sage offers us special methods for this; we will use
\begin_inset Index idx
status open

\begin_layout Plain Layout
class!special methods!arithmetic
\end_layout

\end_inset

 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__add__()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__mul__()
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
 But how will we implement them?
\end_layout

\begin_layout Standard
For addition, it should be a simple matter of choosing the powers of
\begin_inset space ~
\end_inset

2 that are not replicated in both nimbers' 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
powers
\end_layout

\end_inset

.
 There is an easy way to do this: since we kept the 
\emph on
set
\emph default
 of powers that add to the number, we can use the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
symmetric_difference
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.symmetric_difference()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.symmetric_difference()
\end_layout

\end_inset

 method to a set.
 For example, the nimbers 
\begin_inset Formula $14=2+4+8$
\end_inset

 and 
\begin_inset Formula $20=4+16$
\end_inset

 should add to 
\begin_inset Formula $2+8+16=26$
\end_inset

.
 Applying the symmetric difference to the sets of powers of
\begin_inset space ~
\end_inset

2 gives us that result:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
{2, 4, 8}.symmetric_difference({4,16})
\end_layout

\begin_layout SageOutput
{2, 8, 16}
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Addition, therefore, is relatively straightforward to implement: return
 the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 defined by sum of the symmetric difference.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class Nimber:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __add__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return Nimber(sum( 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

self.powers.symmetric_difference( 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

b.powers 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

)))
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Let's test this on our example:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
Nimber(14) + Nimber(20)
\end_layout

\begin_layout SageOutput
26
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Excellent!
\end_layout

\begin_layout Standard
Multiplication is a little tougher, for two reasons.
 First, recall the definition of nimber multiplication:
\begin_inset Formula 
\[
m\times n=\mex\left\{ in+mj+ij:i<m,j<n\right\} .
\]

\end_inset

This requires us to compute the mex of a set with a lot of numbers that
 we have to generate.
 Building the set is actually not that hard: we can use a list comprehension
 to take care of that.
 However, Sage does not have a built-in mex procedure, so we need to define
 a procedure to compute it.
 This should 
\emph on
not
\emph default
 be part of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 class, because while the mex works on nimbers, it is not a property of
 a nimber, and if you like you ought in principle to be able find the mex
 of a set of nonnegative integers without changing the code.
 So we will implement 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
mex()
\end_layout

\end_inset

 as a separate procedure.
\end_layout

\begin_layout Standard
How should we implement it? We have to find the smallest nimber that is
 
\emph on
not
\emph default
 in the set, so why not start with
\begin_inset space ~
\end_inset


\begin_inset Formula $i=0$
\end_inset

, test to see if 
\begin_inset Formula $i$
\end_inset

 is in the set, and increasing and repeating if so? This approach will work:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def mex(S):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = 0
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

while Nimber(i) in S:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

i = i + 1
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return Nimber(i)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Let's try a quick example or two.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
mex([Nimber(0), Nimber(2), Nimber(4)])
\end_layout

\begin_layout SageInput
1
\end_layout

\begin_layout SageInput
mex([Nimber(0), Nimber(1), Nimber(2)])
\end_layout

\begin_layout SageInput
3
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Things look okay until you look a little more closely:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
S = { Nimber(0), Nimber(1), Nimber(2), Nimber(1), Nimber(2)}
\end_layout

\begin_layout SageInput
mex(S)
\end_layout

\begin_layout SageOutput
0
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The answer 
\emph on
ought
\emph default
 to be 3.
\end_layout

\begin_layout Standard
\align center

\size huge
\color red
PANIC!
\end_layout

\begin_layout Standard
\noindent
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset

\SpecialChar ldots
well, no, don't.
 Let's think about what might cause this.
 The 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
mex
\end_layout

\end_inset

 procedure has to decide whether 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber(0)
\end_layout

\end_inset

 is in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

.
 Let's check S:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
S
\end_layout

\begin_layout SageOutput
{0, 1, 1, 2, 2}
\end_layout

\begin_layout SageInput
a, b = Nimber(2), Nimber(2)
\end_layout

\begin_layout SageInput
a == a
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
a == b
\end_layout

\begin_layout SageOutput
False
\end_layout

\end_deeper
\begin_layout Standard
\noindent
What's going on here? There are two problems:
\end_layout

\begin_layout Itemize
\noindent
We encounter replication in the set.
\end_layout

\begin_layout Itemize
Sage seems to think that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber(2)
\end_layout

\end_inset

 is not equal to itself!
\end_layout

\begin_layout Standard
Both of these problems stem from the fact that we have not told Sage how
 to decide whether two 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

's are equal.
 You might think this is obvious, but in fact it isn't; equality can mean
 two different things:
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 are the same object (
\emph on
equality
\emph default
), and
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 are different objects with the same value (
\emph on
equivalence
\emph default
).
\end_layout

\begin_layout Standard
The default behavior of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
==
\end_layout

\end_inset

 is to check the former; so, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a == a
\end_layout

\end_inset

 gives us 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

, because we are comparing an object to itself, while 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a == b
\end_layout

\end_inset

 gives us 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

, because we are comparing two 
\emph on
distinct
\emph default
 objects.
 From 
\emph on
our
\emph default
 point of view, of course, this is a distinction without a difference, as
 the saying goes.
 If we want Sage to tell us that two distinct Nimbers are actually equal
 — that is, if we want Sage to tell us when two distinct Nimbers are equivalent
 — then we have to tell Sage how to decide that.
\end_layout

\begin_layout Subsubsection*
Comparing Nimbers
\end_layout

\begin_layout Standard
\noindent

\series bold
We can fix this.
 We have the technology.

\series default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Shamelessreference@Shameless reference to 
\size normal

\begin_inset CommandInset href
LatexCommand href
name "The Six Million Dollar Man"
target "http://en.wikipedia.org/wiki/The Six Million Dollar Man"
literal "false"

\end_inset

 which today's students will never, ever catch
\end_layout

\end_inset

 We can also fix the problem with mex, by adding special methods that teach
 Sage how to compare 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

s.
 These are:
\begin_inset Index idx
status open

\begin_layout Plain Layout
class!special methods!comparison
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__eq__(
\end_layout

\end_inset


\emph on
self
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
other
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tests whether 
\emph on
self
\emph default
 and 
\emph on
other
\emph default
 are the same
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__ne__(
\end_layout

\end_inset


\emph on
self
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
other
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tests whether 
\emph on
self
\emph default
 and 
\emph on
other
\emph default
 are different
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__lt__(
\end_layout

\end_inset


\emph on
self
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
other
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tests whether 
\emph on
self
\emph default
 is less than 
\emph on
other
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__le__(
\end_layout

\end_inset


\emph on
self
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
other
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tests whether 
\emph on
self
\emph default
 is less than or equal to 
\emph on
other
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__ge__(
\end_layout

\end_inset


\emph on
self
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
other
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tests whether 
\emph on
self
\emph default
 is greater than or equal to 
\emph on
other
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__gt__(
\end_layout

\end_inset


\emph on
self
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
,
\end_layout

\end_inset


\emph on
other
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tests whether 
\emph on
self
\emph default
 is greater than 
\emph on
other
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
We have to define all six, but fortunately this isn't too hard, as we can
 simply compare 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
value
\end_layout

\end_inset

s.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class Nimber:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __eq__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self.value == b.value
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __ne__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self.value != b.value
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __lt__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self.value < b.value
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __le__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self.value <= b.value
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __ge__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self.value >= b.value
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __gt__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self.value > b.value
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This at least allows us to do the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a, b, c = Nimber(2), Nimber(2), Nimber(3)
\end_layout

\begin_layout SageInput
a == b
\end_layout

\begin_layout SageOutput
True
\end_layout

\begin_layout SageInput
a == c
\end_layout

\begin_layout SageOutput
False
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Unfortunately, sets still won't work:
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
TypeError
\end_layout

\end_inset

!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
unhashable instance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
S = {Nimber(0), Nimber(1), Nimber(2), Nimber(1), Nimber(2)}
\end_layout

\begin_layout SageError
TypeError: unhashable instance
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Ouch.
 What's a 
\begin_inset Quotes eld
\end_inset

hashable instance?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
An object is 
\emph on
hashable
\emph default
 when you can associate it to an integer (of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 type, not 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 type) that Sage uses to create sets and dictionaries.
 This integer is called a 
\emph on
hash
\begin_inset Index idx
status open

\begin_layout Plain Layout
hash
\end_layout

\end_inset


\emph default
 and
\emph on
 
\emph default
should never change, as changing it would make things weird in sets and
 dictionaries.
 
\emph on
That
\emph default
 means the object itself should never change.
 Both of these criteria apply to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

s, as we have not created any methods that change its data, and the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
value
\end_layout

\end_inset

 of a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 is an integer that will not change.
 To create this as its hash, we simply set it up as the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
class!special methods!hash@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__hash__()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__hash__()
\end_layout

\end_inset

 method:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class Nimber:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __hash__(self):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return int(self.value)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\SpecialChar ldots
and now sets work great:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
S = {Nimber(0), Nimber(1), Nimber(2), Nimber(1), Nimber(2)}
\end_layout

\begin_layout SageInput
S
\end_layout

\begin_layout SageOutput
{0, 1, 2}
\end_layout

\end_deeper
\begin_layout Subsubsection*
Back to multiplication
\end_layout

\begin_layout Standard
\noindent
Now that we have sets of Nimbers working, we can finally multiply 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

s.
 The definition of Nimber multiplication is recursive
\begin_inset Index idx
status open

\begin_layout Plain Layout
recursion
\end_layout

\end_inset

; that is, we first have to compute the products of smaller pairs.
 Our recursion needs base cases; we might as well use
\begin_inset space ~
\end_inset

0 and
\begin_inset space ~
\end_inset

1, as the definition of nimber multiplication shows that 
\begin_inset Formula $0\times x=0$
\end_inset

 and 
\begin_inset Formula $1\times x=x$
\end_inset

 for every nimber 
\begin_inset Formula $x$
\end_inset

:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
class Nimber:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

\SpecialChar ldots

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

def __mul__(self, b):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if self.value == 0 or b.value == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return Nimber(0)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif self.value == 1:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif b.value == 1:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return self
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return mex({self*Nimber(j) + Nimber(i)*b 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

+ Nimber(i)*Nimber(j) 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(self.value)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(b.value)})
\end_layout

\end_deeper
\begin_layout Standard
\noindent
How about a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 multiplication table?
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
for i in range(10):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(10):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print(Nimber(i) * Nimber(j))
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

print()
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You may not have much luck getting it to print more than a few lines.
 Why? Once we get beyond a certain point, the recursion in multiplication
 makes it very, 
\emph on
very
\emph default
 slow.
 Sage has a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
@cached_method
\end_layout

\end_inset

 decorator that should work like the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
@cached_function
\end_layout

\end_inset

 decorator, only for class methods.
 However, it doesn't work in this situation, because the cache is bound
 to each object, and our loop is constantly creating new 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

s.
 A better approach would be to create a global cache; we leave this as an
 exercise to the reader.
\end_layout

\begin_layout Subsection*
Stuff we've left out
\end_layout

\begin_layout Standard
We've omitted a number of things that classes allow us to do, with 
\emph on
inheritance
\emph default
 and 
\emph on
overloading
\emph default
 being two major topics.
\end_layout

\begin_layout Standard
The idea of 
\emph on
inheritance
\emph default
 is to avoid code duplication by automatically inheriting methods for one
 type that legitimately apply to another type, as well.
 For instance, the set of nimbers forms a field; so, if 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 were to inherit Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset

 class, it would automatically acquire methods that are pre-defined for
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset

.
 The downside to this is that a field is a rather abstract object, so while
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset

 provides a lot of methods, it doesn't implement most of them, but raises
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
NotImplementedError
\end_layout

\end_inset

 when you try to access them.
 This means you have to implement that yourself, which isn't always easy.
 (For instance: How do you find a nimber's multiplicative inverse?)
\end_layout

\begin_layout Standard
The idea of 
\emph on
overloading
\emph default
 is that we can implement a procedure with different types.
 For instance, you might want to multiply a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 by a regular integer, rather than allow multiplication by 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

s alone.
 In this case, you'd have to modify the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__mul__()
\end_layout

\end_inset

 procedure to test its inputs.
 In other cases, a method might take two arguments sometimes, and three
 arguments other times.
 This is accomplished in Sage by providing default values for some arguments
 and checking argument types.
\end_layout

\begin_layout Section*
Cython
\end_layout

\begin_layout Standard
Sage is built on Python, an interpreted language.
 We spoke of the difference between interpreted and other kinds of code
 on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "page: interpreted v. compiled languages"

\end_inset

; essentially, interpreting code incurs a penalty to translate lines over
 and over again.
\end_layout

\begin_layout Standard

\emph on
In addition,
\emph default
 Python relies on what is called 
\begin_inset Quotes eld
\end_inset

dynamic typing.
\begin_inset Quotes erd
\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
type!dynamic v.
\begin_inset space ~
\end_inset

static
\end_layout

\end_inset

 That means Python does not know a variable's type until it assigns a value
 to it.
 For instance, in the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__mul__()
\end_layout

\end_inset

 method for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

, Sage does not know what type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 has until it actually executes 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__mul__()
\end_layout

\end_inset

.
 This means that Sage must frequently stop to check a variable's type before
 executing an operation; after all, it cannot evaluate the expression 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b.value
\end_layout

\end_inset

 on an object 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 that lacks an attribute named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
value
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The other major approach to typing used in programming is 
\begin_inset Quotes eld
\end_inset

static typing.
\begin_inset Quotes erd
\end_inset

 In this approach, the programmer must declare every variable's type 
\emph on
before
\emph default
 the program is run.
 This can be a hassle to the programmer, but it saves the computer the trouble
 of checking each time whether it actually has to do this.
 That can lead to massive increases in speed.
\end_layout

\begin_layout Subsection*
Test case: the Method of Bisection
\end_layout

\begin_layout Standard
To see what a difference this can make, we re-present our 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
method_of_bisection()
\end_layout

\end_inset

 procedure from page
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "page: method_of_bisection with break"

\end_inset

 and discuss how to time it.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
def method_of_bisection(a, b, n, f, x=x):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c, d = a, b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute midpoint, then compare
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e = (c + d)/2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (f(c) > 0 and f(e) > 0) or (f(c) < 0 and f(e) < 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif f(e) == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

break
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return (c, d)
\end_layout

\end_deeper
\begin_layout Standard
Recall that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
b
\end_layout

\end_inset

 are endpoints, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 is the number of times to run the loop, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 is a function, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 the indeterminate.
 To get an idea of how to time the code, we'll use a special procedure called
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%timeit
\end_layout

\end_inset

.
 This procedure repeats a statement that follows it several times, and returns
 the fastest of those times.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%timeit method_of_bisection(1, 2, 40, x**2 - 2)
\end_layout

\begin_layout SageOutput
100 loops, best of 3: 17 ms per loop
\end_layout

\end_deeper
\begin_layout Standard
\noindent
(You may get a number different from 17
\begin_inset space ~
\end_inset

ms; this is okay, as it depends on a lot of things besides the program:
 CPU speed, bus speed, \SpecialChar ldots
.) What happened? Sage ran the program in three sets
 of 100 loops, something akin to this:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
for i in range(3):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for j in range(100):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

method_of_bisection(1, 2, 40, x**2 - 2)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
For each of those three sets, it recorded how long it took to perform all
\begin_inset space ~
\end_inset

100 loops, obtaining three timings.
 Finally, it reported the best of those three timings: 17
\begin_inset space ~
\end_inset

milliseconds.
 In short, 
\emph on
one
\emph default
 execution of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
method_of_bisection()
\end_layout

\end_inset

 took roughly .17
\begin_inset space ~
\end_inset

milliseconds, or 170
\begin_inset space ~
\end_inset

microseconds.
\end_layout

\begin_layout Standard
To see what effect compiling can have, type the following, either into a
 Sage cell or into a script to attach to the command line.
 (If you use a worksheet, type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%cython
\end_layout

\end_inset

 on the first line.
 If you use the command line, save the script with the suffix 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
.spyx
\end_layout

\end_inset

 instead of 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
.sage
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.) Don't worry about the changes just yet; we'll explain them in a moment.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
from sage.symbolic.ring import SR
\end_layout

\begin_layout SageMoreInput
from sage.symbolic.callable import 
\backslash

\end_layout

\begin_layout SageMoreInput
CallableSymbolicExpressionRing
\end_layout

\begin_layout SageMoreInput
def method_of_bisection_cython(a, b, n, f, x=SR.var('x')):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c, d = a, b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f = CallableSymbolicExpressionRing([x])(f)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute midpoint, then compare
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e = (c + d)/2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (f(c) > 0 and f(e) > 0) or 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(f(c) < 0 and f(e) < 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif f(e) == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

break
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return (c, d)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
When you execute this cell or attach this script, Sage will pause a moment
 to compile the code.
 If you typed something wrong, you are likely to see one or more errors
 listed.
 In that case, look through this list carefully and try to fix the errors.
 Once it successfully compiles (you'll know because Sage reports no errors),
 you can time it just as you did before.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%timeit method_of_bisection_cython(1, 2, 40, x**2 - 2)
\end_layout

\begin_layout SageOutput
100 loops, best of 3: 16 ms per loop
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The code has sped up a bit: 
\begin_inset Formula $\nicefrac{16}{17}\approx94.1\%$
\end_inset

 as long, or a speedup of roughly 5%.
 We don't blame you if this doesn't impress you.
 It is possible to do better in some cases; the Cython website gives 
\begin_inset CommandInset href
LatexCommand href
name "one such example"
target "http://docs.cython.org/src/quickstart/cythonize.html"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Before describing how we can improve this code, let's explain a bit about
 the differences in the Cython code from the original Sage code.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Cython needs us to 
\begin_inset Quotes eld
\end_inset

import
\begin_inset Quotes erd
\end_inset

 objects that Sage ordinarily provides for free.
\end_layout

\begin_deeper
\begin_layout Standard
The statements that do this use the keywords 
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
from
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
from
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset


\end_layout

\end_inset

.
 We had to import the symbolic ring 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
SR
\end_layout

\end_inset

 and a curious new type called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
CallableSymbolicExpressionRing
\end_layout

\end_inset

 that we'll discuss a little further down.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Cython needs us to declare our indeterminates — even 
\series default
\emph default

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout

\series bold
\emph on
x
\end_layout

\end_inset


\series bold
\emph on
!
\end_layout

\begin_deeper
\begin_layout Standard
\SpecialChar ldots
and to declare our indeterminates, we need the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
var()
\end_layout

\end_inset

 command, which is itself not available immediately to Cython; we have to
 access it as a method of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
SR
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Cython needs us to define mathematical functions in a different way.
\end_layout

\begin_deeper
\begin_layout Standard
When Sage reads anything you type in a worksheet, on the command line, or
 in a Sage script, it rewrites some of it from the convenient form we use
 to a form more convenient to its Python foundation.
 One example is the declaration of a function; as you might guess from the
 code above, the declaration 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(x) = \SpecialChar ldots

\end_layout

\end_inset

 is a convenient shorthand for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f = CallableSymbolicExpressionRing([x])(\SpecialChar ldots
)
\end_layout

\end_inset

.
 Another example is the 
\begin_inset Quotes eld
\end_inset

carat
\begin_inset Quotes erd
\end_inset

 operator 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
^
\end_layout

\end_inset

; this has a completely different meaning in Python, which considers the
 
\begin_inset Quotes eld
\end_inset

double-product
\begin_inset Quotes erd
\end_inset

 operator 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
**
\end_layout

\end_inset

 the true exponentiation operator.
 This is the reason we have always advised you to use the double-product
 for exponentiation, but if habit were to trip us up, and we type a carat,
 Sage will silently accept it as exponentiation – 
\emph on
unless
\emph default
 it appears in a Cython script.
\end_layout

\end_deeper
\begin_layout Standard
These changes are therefore necessary to make the code compile as Cython.
\end_layout

\begin_layout Subsection*
We can fix this.
 We have the technology.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status open

\begin_layout Plain Layout
Shamelessreference@Shameless reference to 
\size normal

\begin_inset CommandInset href
LatexCommand href
name "The Six Million Dollar Man"
target "http://en.wikipedia.org/wiki/The Six Million Dollar Man"
literal "false"

\end_inset

 which today's students will never, ever catch
\end_layout

\end_inset

Remember how we mentioned that a 
\emph on
lot
\emph default
 of time is wasted on checking the type of an object.
 What if we assign a type to the items that are reused the most? The code
 spends a lot of its time working on computing 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(c)
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(e)
\end_layout

\end_inset

, so perhaps we would do well to compute them once, then store their values.
 Let's change the program as follows:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
from sage.symbolic.ring import SR
\end_layout

\begin_layout SageMoreInput
from sage.symbolic.callable import 
\backslash

\end_layout

\begin_layout SageMoreInput
CallableSymbolicExpressionRing
\end_layout

\begin_layout SageMoreInput
def method_of_bisection_cython(a, b, n, f, x=SR.var('x')):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c, d = a, b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# f(x) = f
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f = CallableSymbolicExpressionRing([x])(f)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute midpoint, then compare
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e = (c + d)/2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

fc, fe = f(c), f(e)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (fc > 0 and fe > 0) or 
\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

(fc < 0 and fe < 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif fe == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

break
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return (c, d)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
This gives us a noticeable improvement in performance.
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%timeit method_of_bisection_cython(1, 2, 40, x**2 - 2)
\end_layout

\begin_layout SageOutput
100 loops, best of 3: 11.6 ms per loop
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's an improvement of a little more than 25% over the previous version,
 so we're doing better.
\end_layout

\begin_layout Standard

\emph on
But!
\emph default
 — the thoughtful reader will complain — 
\emph on
we could have pre-computed those values without Cython, as well.
 What difference does that make?
\emph default
 It makes a healthy difference indeed.
 We won't show the code here, but if you modify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
method_of_bisection()
\end_layout

\end_inset

 to pre-compute those values, we see a timing along these lines:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%timeit method_of_bisection(1, 2, 40, x**2 - 2)
\end_layout

\begin_layout SageOutput
100 loops, best of 3: 12.7 ms per loop
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's still slower than the pre-computing Cython version, but it's faster
 than the first Cython version! Again, you may find such a mild improvement
 less than impressive.
\end_layout

\begin_layout Standard
Fair enough, but we still have one trick up our sleeve.
\end_layout

\begin_layout Subsection*
Assigning static types
\end_layout

\begin_layout Standard
As we mentioned earlier, Python is a dynamically-typed language.
 Cython is more of a hybrid.
 As we saw above, you don't 
\emph on
have
\emph default
 to type anything, but you can type 
\emph on
some
\emph default
 things.
 You're about to see that this can have a significant effect.
\end_layout

\begin_layout Standard
In addition to computing 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(c)
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(e)
\end_layout

\end_inset

 only once, let's try assigning a type to them.
 What type should they have? Some of the usual options are
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
long
\end_layout

\end_inset

, which correspond to the Python types for 
\begin_inset Quotes eld
\end_inset

smaller
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

larger
\begin_inset Quotes erd
\end_inset

 integers;
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
float
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
double
\end_layout

\end_inset

, which correspond to the Python types for 
\begin_inset Quotes eld
\end_inset

smaller
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

larger
\begin_inset Quotes erd
\end_inset

 floating-point numbers;
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational
\end_layout

\end_inset

, which correspond to the Sage types for integers and rational numbers.
\end_layout

\begin_layout Standard
There are many, many other types, some of which are very useful in various
 circumstances.
 Remember that you can generally find the type of an object by asking sage:
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type(2/3)
\end_layout

\end_inset

, for instance, will give us 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
<type 'sage.rings.rational.Rational'>
\end_layout

\end_inset

.
 Make a note of that, as we'll return to it in a moment.
\end_layout

\begin_layout Standard
If you look back to where we introduced the Method of Bisection, we mentioned
 that it is a kind of 
\begin_inset Quotes eld
\end_inset

exact approximation,
\begin_inset Quotes erd
\end_inset

 in that it specifies an interval (so, approximation) on which the root
 certainly lies (so, exact).
 You'll remember that the Method of Bisection gives us fractions, which
 more or less rules out 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
long
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset

.
 Should we use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
float
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
double
\end_layout

\end_inset

, or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational
\end_layout

\end_inset

, then? Any one of them will work, and the first two are much, much faster
 than the third, but the authors have a fondness for exact numbers in all
 their long, complicated glory, so we'll opt for that.
\end_layout

\begin_layout Standard
Recall that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type()
\end_layout

\end_inset

 command told us a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational
\end_layout

\end_inset

 is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sage.rings.rational.Rational
\end_layout

\end_inset

.
 Of those four words, the first three tell us 
\emph on
from
\emph default
 
\emph on
where
\emph default
 we import
\emph on
,
\emph default
 and the last tells us 
\emph on
what
\emph default
 we import.
 We'll add a line to our import list that takes care of this:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
from sage.rings.rational cimport Rational
\end_layout

\end_deeper
\begin_layout Standard
\noindent
If you look carefully, you'll notice we used the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
keyword!
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cimport
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cimport
\end_layout

\end_inset

 keyword instead of the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset

 keyword as we did with the other two.
 This is because we are importing a type implemented as a class in another
 Cython script.
 
\emph on
You cannot import types implemented as classes in Sage or Python scripts.
\end_layout

\begin_layout Standard
Once we have that, we add a line at the beginning of the code that defines
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fc
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
fe
\end_layout

\end_inset

 as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational
\end_layout

\end_inset

.
 We then have to 
\emph on
coerce
\emph default
 the computations 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(c)
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(e)
\end_layout

\end_inset

 to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational
\end_layout

\end_inset

, because they are by default a mere 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Expression
\end_layout

\end_inset

.
 These are all the changes we have to make, so we can list the modified
 code below:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput
from sage.symbolic.ring import SR
\end_layout

\begin_layout SageMoreInput
from sage.rings.rational cimport Rational
\end_layout

\begin_layout SageMoreInput
from sage.symbolic.callable import 
\backslash

\end_layout

\begin_layout SageMoreInput
CallableSymbolicExpressionRing
\end_layout

\begin_layout SageMoreInput
def method_of_bisection_cython(a, b, n, f, x=SR.var('x')):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cdef Rational fc, fe
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c, d = a, b
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

f = CallableSymbolicExpressionRing([x])(f)
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for i in range(n):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

# compute midpoint, then compare
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

e = (c + d)/2
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

fc, fe = Rational(f(c)), Rational(f(e))
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if (fc > 0 and fe > 0) or (fc < 0 and fe < 0):
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

elif fe == 0:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

c = d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

break
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

else:
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

d = e
\end_layout

\begin_layout SageMoreInput
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return (c, d)
\end_layout

\end_deeper
\begin_layout Standard
\noindent
The timing on this code is 
\emph on
remarkably
\emph default
 faster:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
%timeit method_of_bisection_cython(1, 2, 40, x**2 - 2)
\end_layout

\begin_layout SageOutput
100 loops, best of 3: 6.27 ms per loop
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That's almost half the time it took before, and definitely half as fast
 as the fastest Python time we've seen.
 Altogether the code now takes about one-third as long as the original.
\end_layout

\begin_layout Standard
What if we add this type information to the Python script? — oh, wait.
 We 
\emph on
can't.
\end_layout

\begin_layout Subsection*
A caveat
\end_layout

\begin_layout Standard
Adding type information for the remaining variables does not improve performance
 in any measurable way and in some cases it actually slows the program down.
 (We checked to be sure.) If you find it necessary to go down the route of
 writing Cython scripts, then optimizing them by adding type information,
 you will want to learn about profiling your code to see what is taking
 longest.
 We give only a few brief hints here.
\end_layout

\begin_layout Standard
Sage offers a profiling tool called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
prun()
\end_layout

\end_inset

.
 It counts the number of times each procedure is called, measures the amount
 of time Sage spends in each procedure, and guesses from there which procedures
 would be best to compute.
 This works with both ordinary Sage/Python procedures as well as with Cython
 procedures.
\end_layout

\begin_layout Standard
When writing this chapter, we tried 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
prun()
\end_layout

\end_inset

 on the original Cythonized 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
method_of_bisection()
\end_layout

\end_inset

 as follows:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
prun(method_of_bisection_cython(1, 2, 30, f))
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Sage ran the program and immediately provided output in the form of a table,
 with each column indicating
\end_layout

\begin_layout Itemize
number of calls (
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
ncalls
\end_layout

\end_inset

);
\end_layout

\begin_layout Itemize
total time spent in the procedure (
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
tottime
\end_layout

\end_inset

);
\end_layout

\begin_layout Itemize
average amount of time spent in each call (first 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
percall
\end_layout

\end_inset

);
\end_layout

\begin_layout Itemize
cumulative total time spent in that procedure and all procedures it calls
 (
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
cumtime
\end_layout

\end_inset

);
\end_layout

\begin_layout Itemize
average cumulative time spent in each call (second 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
percall
\end_layout

\end_inset

); and
\end_layout

\begin_layout Itemize
the location of the call.
\end_layout

\begin_layout Standard
When we first ran it, three of the first four lines indicated that Sage
 made
\end_layout

\begin_layout Itemize
106 calls to the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
substitute
\end_layout

\end_inset

 method for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
sage.symbolic.expression.Expression
\end_layout

\end_inset

 objects;
\end_layout

\begin_layout Itemize
107 calls to 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
callable.py:343(_element_constructor_)
\end_layout

\end_inset

; and
\end_layout

\begin_layout Itemize
106 calls to 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
callable.py:448(_call_element_)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Without having seen those lines before, it wasn't hard to guess that Sage
 was spending a lot of time computing the value of a function at a point.
 This motivated us to try avoiding re-computation of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(c)
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f(e)
\end_layout

\end_inset

.
 When that was done, the number of calls to these three procedures was cut
 by more than a third, respectively to 60, 61, and 60 again.
\end_layout

\begin_layout Standard
With that out of the way, the hint that we needed to assign a type to 
\emph on
something
\emph default
 would be useful is that there were 209 calls to
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
{isinstance}
\end_layout

\end_inset

.
 That, along with mysterious invocations of procedures in the file 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
complex_interval_field.py
\end_layout

\end_inset

, indicated that a lot of type checking was going on, and in fact the final
 version of the program reports 
\emph on
only one
\emph default
 innovation of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
{ininstance}
\end_layout

\end_inset

, and 
\emph on
no
\emph default
 invocations from 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
complex_interval_field.py
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
\end_layout

\begin_layout Standard
Deciding which precise variables need type information remains something
 of an art form with skills acquired by experience and trial-and-error,
 which is why we classify it, along with the creation of classes, under
 
\begin_inset Quotes eld
\end_inset

Advanced Techniques.
\begin_inset Quotes erd
\end_inset

 If you go far enough into the wondrous world of mathematics, you may find
 yourself needing them one day.
\end_layout

\begin_layout Section*
Exercises
\end_layout

\begin_layout Subsection*
True/False.
 If the statement is false, replace it with a true statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Most people who work with Sage will, at some point, need to make their
 own mathematical objects.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Combinatorial games are nothing short of awesome.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Nimber addition is self-canceling; that is, 
\begin_inset Formula $x+x=0$
\end_inset

 for any nimber 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Nimber multiplication makes use of the maximum element of a set of numbers.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 One reason to encapsulate Nimbers in a class is to write the arithmetic
 operations in a more convenient and natural format.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 A class's attributes are variables that include data that is proper to
 the class.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Modification of a class's basic behaviors is subject to special methods:
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__init__()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__repr__()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__eq__()
\end_layout

\end_inset

, and so forth.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 In Sage, a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
set
\end_layout

\end_inset

 automatically figures out when two objects of a class are equivalent.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 A hash is a technical term for an object whose class is too complicated
 to add to a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
set
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
10.
 The angry dragon of recursion flies into this chapter and sets at least
 one class method aflame.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
11.
 Cython allows us to speed up Sage programs by 
\emph on
both
\emph default
 compiling 
\emph on
and
\emph default
 assigning static types.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
12.
 Dynamic languages know every object's type before the program is executed;
 static languages remain agnostic until the value is assigned.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
13.
 We can only make use of Cython from the worksheet, by placing the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
%cython
\end_layout

\end_inset

 statement before a block of code.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
14.
 We can 
\begin_inset Quotes eld
\end_inset

Cythonize
\begin_inset Quotes erd
\end_inset

 Sage code without having to worry about modifying it.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
15.
 We cannot import types implemented as classes in Cython scripts, only types
 that are native to Sage like 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Multiple Choice
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 The methods used to initialize the data proper to a class are called:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 attributors
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 constructors
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 initializers
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 makers
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
2.
 The correct term to refer to a variable whose type is of class 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 an attribute of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 a constructor for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 a descendant of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 an instance of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
3.
 The value of 
\begin_inset Formula $\mex\left\{ 1,2,4,5,7,8,9\right\} $
\end_inset

 is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 0
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 3
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 6
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 9
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
4.
 In Nimber arithmetic, the value of 
\begin_inset Formula $3+10$
\end_inset

 is:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 0
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 2
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 9
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 13
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
5.
 Why is Nimber multiplication difficult to do by hand?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 it requires recursion
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 it's new and different
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 self-cancellation of addition
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 it 
\emph on
isn't
\emph default
 difficult to do by hand
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
6.
 The proper way to create a new instance of a class named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

, whose constructor takes an integer argument which we want to be
\begin_inset space ~
\end_inset

2, is by typing:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a = C(2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a = new C(2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a = new(C, 2)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
a = C.__init__(2)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
7.
 The term for the specially-named methods Sage expects for certain 
\begin_inset Quotes eld
\end_inset

natural
\begin_inset Quotes erd
\end_inset

 behaviors of a class are:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 attribute methods
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 magic methods
\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 special methods
\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 dot methods
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
8.
 An object is hashable when we can associate it with a value of what type?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 any well-ordered type
\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
hash
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Integer
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
9.
 Which keyword allows us to assign a type to a variable in Cython?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cdef
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
def
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
type
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 no keyword; just place the type before the variable name
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring M.
10.
 What keyword(s) do we use to access Sage objects and types defined in other
 Cython files?
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring M.
A.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
access
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
from
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Labeling
\labelwidthstring M.
B.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
from
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset

\SpecialChar ldots

\end_layout

\begin_layout Labeling
\labelwidthstring M.
C.
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
#include
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring M.
D.
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
PANIC@
\color red
PANIC
\begin_inset ERT
status open

\begin_layout Plain Layout

"
\end_layout

\end_inset

!
\end_layout

\end_inset


\color red
PANIC!
\end_layout

\end_deeper
\begin_layout Subsection*
Short Answer
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Summarize why it can be useful to create a class for a new mathematical
 object, rather than implementing operations as procedures with the names
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
my_object_add()
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
my_object_mul()
\end_layout

\end_inset

, and so forth.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Summarize the similarities and differences between attributes and instance
 variables.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 While Cython compiles Python statements to true machine code, the result
 cannot be run independently of a Python interpreter (like Sage).
 Do you think this makes Cython a truly compiled language? Why or why not?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 The Method of Bisection can be run with 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
float
\end_layout

\end_inset

 types instead of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Rational
\end_layout

\end_inset

 types.
 Do you think this will make it faster or slower? Try it and discuss how
 the result compares with your guess.
\end_layout

\begin_layout Subsection*
Programming
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Another special method for a class is 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__nonzero__()
\end_layout

\end_inset

, which allows Sage to decide whether an instance of a class is, well, 
\begin_inset Quotes eld
\end_inset

nonzero.
\begin_inset Quotes erd
\end_inset

 Implement this method for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

, returning 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if and only if 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
self.value==0
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 It is 
\emph on
somewhat
\emph default
 more correct in Python that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__repr__()
\end_layout

\end_inset

 should return a string with which you could re-create the object; that
 is, the following sequence of commands should actually have the given output,
 not just 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
2
\end_layout

\end_inset

.
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = Nimber(2)
\end_layout

\begin_layout SageInput
a
\end_layout

\begin_layout SageOutput
Nimber(2)
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Modify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__repr__()
\end_layout

\end_inset

 method to return the 
\begin_inset Quotes eld
\end_inset

proper
\begin_inset Quotes erd
\end_inset

 string.
 
\emph on
Hint:
\emph default
 You can join strings by 
\begin_inset Quotes eld
\end_inset

adding
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Python recommends that the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__str__()
\end_layout

\end_inset

 method be used to return an 
\begin_inset Quotes eld
\end_inset

informal,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

more convenient,
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

concise
\begin_inset Quotes erd
\end_inset

 representation of the object.
 This value is returned whenever we use the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
str@
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
str()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
str()
\end_layout

\end_inset

 procedure.
 Add a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__str__()
\end_layout

\end_inset

 method to the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 class that returns what we originally wrote for 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__repr__()
\end_layout

\end_inset

.
 Once you're done with this problem, the class should work as follows:
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = Nimber(2)
\end_layout

\begin_layout SageInput
a
\end_layout

\begin_layout SageOutput
Nimber(2)
\end_layout

\begin_layout SageInput
str(a)
\end_layout

\begin_layout SageOutput
2
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 We said that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 multiplication could be improved by using a cache variable.
 Modify your 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 class to introduce a global variable named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cached_multiplications
\end_layout

\end_inset

, which is initialized as an empty dictionary.
 Then modify 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
.__mul__()
\end_layout

\end_inset

 method to do the following:
\end_layout

\begin_deeper
\begin_layout Itemize
Let 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
c=self.value
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d=b.value
\end_layout

\end_inset


\begin_inset space ~
\end_inset

.
\end_layout

\begin_layout Itemize
If 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
c < d
\end_layout

\end_inset

, swap the two.
\end_layout

\begin_layout Itemize
Try to assign to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

 the value associated with the key 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
(c,d)
\end_layout

\end_inset

 in 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
cached_multiplications
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
If this raises an error, catch it, perform the multiplication in the usual
 way, assign its value to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

, and record it in the dictionary.
\end_layout

\begin_layout Itemize
Finally, return 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
result
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Now try to generate the multiplication table that took too long in the text.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 It is not unreasonable to imagine that someone might want to instantiate
 a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
Nimber
\end_layout

\end_inset

 using a set of powers of
\begin_inset space ~
\end_inset

2, saving us the trouble of having the computer figure it out.
 Modify the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__iter__()
\end_layout

\end_inset

 procedure so that it tests 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

's type.
 If 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 is not a tuple, list or set, it proceeds as before; otherwise, it converts
 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

 to a set, assigns that value to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
self.powers
\end_layout

\end_inset

, then computes 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
self.value
\end_layout

\end_inset

.
 The correct implementation should provide the following results (using
 our original implementation of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
__repr__()
\end_layout

\end_inset

, not the one assigned in a previous exercise):
\end_layout

\begin_deeper
\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageInput
a = Nimber({1, 4})
\end_layout

\begin_layout SageInput
a
\end_layout

\begin_layout SageOutput
5
\end_layout

\begin_layout SageInput
a.power_repr()
\end_layout

\begin_layout SageOutput
{1, 4}
\end_layout

\end_deeper
\begin_layout Standard

\emph on
Bonus:
\emph default
 Add a check that the collection contains only powers of
\begin_inset space ~
\end_inset

2, so that the input 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
{1, 3}
\end_layout

\end_inset

 would raise a 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
ValueError
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Chapter
Useful 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap: Useful LaTeX"

\end_inset

Many places of this text use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

, and quite a few exercises and labs direct you to use it.
 This chapter summarizes all the commands you should need for what we do
 in this text, plus a few extra if you want to experiment.
 It will 
\emph on
not
\emph default
 serve as a general introduction to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

, for which there are many, much more appropriate texts whose entire purpose
 is to expound on this wonderful tool.
\begin_inset Index idx
status open

\begin_layout Plain Layout
latex@
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Basic commands
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig: LaTeX commands"

\end_inset

 gives a handy list of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 commands.
 To use them in a string of text, you must enclose in dollar signs, e.g.
 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
$x 
\backslash
in 
\backslash
mathbb{R}$
\end_layout

\end_inset

.
 You can also use 
\family typewriter

\backslash
(
\family default
 and 
\family typewriter

\backslash
)
\family default
 as delimiters; for example, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
(x 
\backslash
in 
\backslash
mathbb{R}
\backslash
)
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="32" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash
 
\end_layout

\end_inset

notation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
concept represented
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
example in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
result
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
{
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
grouping
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
see below
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
see below
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
^
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
superscript
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
x^2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x^{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
sqrt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
square root
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
sqrt{x^2+1}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sqrt{x^{2}+1}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
_
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
subscript
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
x_{
\backslash
mathrm{next}}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{{\mathrm{next}}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
in
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
element of
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
x
\backslash
in S
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x\in S$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
{
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a set containing \SpecialChar ldots

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
{1,5,7
\backslash
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\{1,5,7\}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
frac{
\end_layout

\end_inset


\emph on
a
\emph default

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}{
\end_layout

\end_inset


\emph on
b
\emph default

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fraction of 
\emph on
a
\emph default
 over 
\emph on
b
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
frac{2}{5}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\frac{2}{5}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
alpha
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
beta
\end_layout

\end_inset

, etc.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Greek letters
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
2
\backslash
pi
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2\pi$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
infty
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
infinity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
(-
\backslash
infty,
\backslash
infty)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(-\infty,\infty)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
sin
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
cos
\end_layout

\end_inset

, etc.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
properly formatted
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
sin(
\backslash
frac{pi}{6})
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sin(\frac{\pi}{6})$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
functions
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
rightarrow
\end_layout

\end_inset

,
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
arrows
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
lim_{x
\backslash
rightarrow2}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\lim_{x\rightarrow2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
leftarrow
\end_layout

\end_inset

, etc.
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
sum
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
int
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
prod
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sum,
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
int_a^b f(x)dx
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\int_{a}^{b}f\left(x\right)dx$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integral,
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
lim_
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula ${\displaystyle \lim_{n\rightarrow\infty}\sum_{i=1}^{n}f(x_{i})\Delta x}$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is in display style.
 Inline style is different.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

{n
\backslash
rightarrow
\backslash
infty}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
product
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\backslash
sum_{i=1}^n f(x_i)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\backslash
Delta x
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
leq
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
geq
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\leq$
\end_inset

, 
\begin_inset Formula $\geq$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
a
\backslash
leq b
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a\leq b$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
notin
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
neq
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\notin$
\end_inset

, 
\begin_inset Formula $\neq$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
a
\backslash
not
\backslash
in S
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a\notin S$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
subset
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
not
\backslash
subset
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\subset$
\end_inset

, 
\begin_inset Formula $\not\subset$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
S
\backslash
not
\backslash
subset T
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S\not\subset T$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
ldots
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
cdots
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\ldots$
\end_inset

, 
\begin_inset Formula $\cdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathbb{N}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{N}=\{1,2,\ldots\}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

=
\backslash
{1,2,
\backslash
ldots
\backslash
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
cap
\end_layout

\end_inset

, 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
cup
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
intersection, union
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
S
\backslash
cap(T
\backslash
cup U)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S\cap(T\cup U)$
\end_inset


\begin_inset Formula $ $
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathrm{
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
don't italicize \SpecialChar ldots

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathrm{next}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathrm{next}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathbb{
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
write \SpecialChar ldots
 in
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathbb{R}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{R}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

blackboard bold
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathbf{
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
write \SpecialChar ldots

\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
a
\backslash
mathbf{F}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $a\mathbf{F}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in bold font
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathcal{
\end_layout

\end_inset

\SpecialChar ldots

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
write \SpecialChar ldots
 in
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
mathcal{S}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathcal{S}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
calligraphic font
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig: LaTeX commands"

\end_inset

Useful 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 markup for Sage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Delimiters
\end_layout

\begin_layout Standard
If you have a complex expression, you might want the delimiters (parentheses,
 brackets, etc.) to grow with it.
 You can see this in the difference between
\begin_inset Formula 
\[
(x^{x^{x^{x^{x^{\iddots}}}}})\qquad\textrm{and}\qquad\left(x^{x^{x^{x^{x^{\iddots}}}}}\right).
\]

\end_inset

To do this, place the command 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
left
\end_layout

\end_inset

 or the command 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
right
\end_layout

\end_inset

 immediately before the delimiter.
 
\series bold
Every 
\series default

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
left
\end_layout

\end_inset


\series bold
 must match a 
\series default

\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
right
\end_layout

\end_inset


\series bold
, but if you only want one, you can place a dot after the other to indicate
 that you want nothing.
\end_layout

\begin_layout Standard
The second expression above comes from typing:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput

\family typewriter
$
\backslash
left( x^{x^{x^{x^{x^{
\backslash
iddots}}}}} 
\backslash
right)$
\family default
.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
You could obtain the interval 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\left[2^{\ln5},\infty\right)$
\end_inset

 by typing the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput

\family typewriter
$
\backslash
left[2^{
\backslash
ln5},
\backslash
infty
\backslash
right)$
\family default
.
\end_layout

\end_deeper
\begin_layout Standard
\noindent
That will looks better than 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
$[2^{
\backslash
ln5},
\backslash
infty)$
\end_layout

\end_inset

 (which gives 
\begin_inset Formula $[2^{\ln5},\infty)$
\end_inset

), because in the first example the delimiters stretched to match the height
 of the objects involved.
\end_layout

\begin_layout Section*
Matrices
\end_layout

\begin_layout Standard
It's best to set matrix expressions on separate lines; we can do this using
 the delimiters 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
[
\end_layout

\end_inset

 (
\begin_inset Quotes eld
\end_inset

begin math display
\begin_inset Quotes erd
\end_inset

) and 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
]
\end_layout

\end_inset

 (
\begin_inset Quotes eld
\end_inset

end math display
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
We start a matrix using the command 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
begin{pmatrix}
\end_layout

\end_inset

, and end it using the command 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
end{pmatrix}
\end_layout

\end_inset

.
 (If we don't want parentheses around the matrix, we use the pair of commands
 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
begin{matrix}
\end_layout

\end_inset

 and 
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash
end{matrix}
\end_layout

\end_inset

.)
\end_layout

\begin_layout Standard
We specify the matrix entries row-by-row.
 Columns are separated by the ampersand (
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout
&
\end_layout

\end_inset

), while rows are separated by a double backslash (
\begin_inset Flex Keyboard Press
status open

\begin_layout Plain Layout

\backslash

\backslash

\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
For example, we can obtain the matrix
\begin_inset Formula 
\[
\left(\begin{array}{clccr}
\cos x^{2}-1 &  &  &  & x\\
 & e^{2x}\\
x+1 &  &  & \sin x^{2}-1\\
 & 1-x &  &  & e^{-2x}\\
 &  &  & x
\end{array}\right)
\]

\end_inset

by typing the following:
\end_layout

\begin_layout SageInteraction

\end_layout

\begin_deeper
\begin_layout SageMoreInput

\backslash
[ 
\backslash
begin{pmatrix}
\end_layout

\begin_layout SageMoreInput
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\backslash
cos x^{2}-1 & & & & x
\backslash

\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset

& e^{2x}
\backslash

\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad 
\end_layout

\end_inset

x+1 & & & 
\backslash
sin x^{2}-1
\backslash

\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset

& 1-x & & & e^{-2x}
\backslash

\backslash

\end_layout

\begin_layout SageMoreInput
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qquad
\end_layout

\end_inset

& & & x
\end_layout

\begin_layout SageMoreInput

\backslash
end{pmatrix} 
\backslash
]
\end_layout

\end_deeper
\begin_layout Part
Labs
\end_layout

\begin_layout Chapter*
Prerequisites for each lab
\end_layout

\begin_layout Standard
The labs in this part are organized according to the general field of mathematic
s to which they most apply.
 Here we indicate which chapters of the text are required for a student
 to be able to complete that lab 
\emph on
according to the approach we had in mind.

\emph default
 If the instructor has a different approach in mind, the prerequisites might
 not be so firm.
\end_layout

\begin_layout Standard

\series bold
Various kinds of plots:
\series default
 This lab requires Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic computations
\begin_inset Quotes erd
\end_inset

 and Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Cauchy, the circle, and the crossing parabola:
\series default
 This lab requires Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic comptations
\begin_inset Quotes erd
\end_inset

 and Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures.
\begin_inset Quotes erd
\end_inset

 It can be a little easier once the student has completed Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
An important difference quotient: 
\series default
This lab requires just a few basic computations from Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Illustrating Calculus: 
\series default
This lab requires calculus, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic computations,
\begin_inset Quotes erd
\end_inset

 and plotting, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Simpson's Rule:
\series default
 This lab requires calculus, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic computations,
\begin_inset Quotes erd
\end_inset

 interactive worksheets, which appear at the end of Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: procedures"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Writing your own procedures,
\begin_inset Quotes erd
\end_inset

 and 
\series bold
for
\series default
 loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
The Runge-Kutta method:
\series default
 This lab requires calculus, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic computations,
\begin_inset Quotes erd
\end_inset

 and the most basic loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself definitely with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Maclaurin coefficients: 
\series default
This lab requires calculus, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic computations,
\begin_inset Quotes erd
\end_inset

 and 
\series bold
for
\series default
 loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
\begin_inset Formula $p$
\end_inset

-series:
\series default
 This lab requires plotting, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures,
\begin_inset Quotes erd
\end_inset

 and definite loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Off on a tangent:
\series default
 This lab requires Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic computations,
\begin_inset Quotes erd
\end_inset

 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures,
\begin_inset Quotes erd
\end_inset

 and Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Maxima and minima in 3d:
\series default
 This lab requires solving equations, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

, creating 3d plots from Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap: 3d plots"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and dictionaries, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Algebraic and geometric properties of linear systems:
\series default
 This lab requires linear algebra, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Transformation matrices:
\series default
 This lab requires linear algebra, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations,
\begin_inset Quotes erd
\end_inset

 and the plotting of vectors, which appears Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures.
\begin_inset Quotes erd
\end_inset

 It would help to know 
\series bold
for
\series default
 loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Visualizing eigenvectors and eigenvalues:
\series default
 This lab requires linear algebra, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations,
\begin_inset Quotes erd
\end_inset

 the plotting of vectors, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures,
\begin_inset Quotes erd
\end_inset

 and 
\series bold
for
\series default
 loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Least squares averaging:
\series default
 This lab requires linear algebra, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations,
\begin_inset Quotes erd
\end_inset

 and Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Bareiss' method:
\series default
 This lab requires linear algebra, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations,
\begin_inset Quotes erd
\end_inset

 and 
\series bold
for
\series default
 loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset

 One way to answer the last part more efficiently would involve 
\series bold
try
\series default
/
\series bold
except
\series default
 expressions, which appear Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: decision making"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Decision-making.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Dodgson's method:
\series default
 This lab requires linear algebra, which appears in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: solving equations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Solving equations,
\begin_inset Quotes erd
\end_inset

 and 
\series bold
for
\series default
 loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
One-to-one functions:
\series default
 This lab requires dictionaries, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself definitely with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
The Set Game:
\series default
 This lab requires collections, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself definitely with collections.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
The number of ways to select 
\begin_inset Formula $m$
\end_inset

 elements from a set of 
\begin_inset Formula $n$
\end_inset

:
\series default
 This project requires Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: repeating inductively"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself inductively.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Properties of finite rings:
\series default
 This lab requires just a few basic computations from Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 It would be easier with 
\series bold
for
\series default
 loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself definitely with collections,
\begin_inset Quotes erd
\end_inset

 but the numbers are kept small enough so that it's not strictly necessary
 (be warned, though, that your students may hate you for assigning it before
 covering loops).
\end_layout

\begin_layout Standard

\series bold
The Chinese Remainder Clock:
\series default
 This lab requires modular arithmetic, from Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Basic computations,
\begin_inset Quotes erd
\end_inset

 and various plot objects, from Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: plotting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Pretty (and not-so-pretty) pictures.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
The geometry of radical roots:
\series default
 This lab requires just a few basic computations from Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 It would be easier with for loops, which appear in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself definitely with collections,
\begin_inset Quotes erd
\end_inset

 but the numbers are kept small enough so that it's not strictly necessary.
 (Unlike another lab, they shouldn't hate you if you assign this lab before
 covering loops.)
\end_layout

\begin_layout Standard

\series bold
Lucas sequences:
\series default
 This lab requires the section 
\begin_inset Quotes eld
\end_inset

Eigenvalues and eigenvectors resolve a bunny dilemma
\begin_inset Quotes erd
\end_inset

 from Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: repeating inductively"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself inductively.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Introduction to Group Theory:
\series default
 This lab requires Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself definitely with collections
\begin_inset Quotes erd
\end_inset

 and Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: decision making"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Decision-making.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Coding theory and cryptography:
\series default
 Most of this lab can be done after Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: repeating inductively"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself inductively,
\begin_inset Quotes erd
\end_inset

 but the bonus requires the section on Cython from Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: adv tech"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Advanced techniques.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\series bold
Continued fractions:
\series default
 This lab requires Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: definite loops"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Repeating yourself indefinitely
\begin_inset Quotes erd
\end_inset

 and Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: decision making"
plural "false"
caps "false"
noprefix "false"

\end_inset

 on 
\begin_inset Quotes eld
\end_inset

Decision-making.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Chapter*
General mathematics
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Irreducible polynomials
\end_layout

\begin_layout Standard
Suppose a polynomial has integer coefficients.
 Sometimes it is possible to factor it into two or more polynomials that
 also have integer coefficients:
\begin_inset Formula 
\[
x^{2}-x-6=\left(x-3\right)\left(x+2\right)\ .
\]

\end_inset

Sometimes, however, it is possible to factor only when we allow irrational
 or even complex coefficients (verify this by applying Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
expand()
\end_layout

\end_inset

 command to the right hand side of the equation):
\begin_inset Formula 
\[
x^{2}-x+1=\left(x-\frac{1+i\sqrt{3}}{2}\right)\left(x-\frac{1-i\sqrt{3}}{2}\right)\ .
\]

\end_inset

We call this second kind of polynomial 
\series bold
irreducible
\series default
.
\end_layout

\begin_layout Standard
This assignment investigates the irreducibility of a simple, but important
 family of polynomials.
 Let
\begin_inset Formula 
\[
p_{n}=x^{n}-1\ ,
\]

\end_inset

where 
\begin_inset Formula $n$
\end_inset

 is a positive integer.
 That is,
\begin_inset Formula 
\[
p_{1}=x-1,\quad p_{2}=x^{2}-1,\quad p_{3}=x^{3}-1,\quad\ldots
\]

\end_inset

Are these polynomials irreducible? No, for 
\begin_inset Formula $p_{n}\left(1\right)=0$
\end_inset

, so by the Factor Theorem, 
\begin_inset Formula $x-1$
\end_inset

 is a factor of 
\begin_inset Formula $p_{n}$
\end_inset

.
\end_layout

\begin_layout Standard
How does it factor? Recall the formula for a geometric series:
\begin_inset Formula 
\begin{equation}
a+ar+ar^{2}+\cdots+ar^{n-1}=a\times\frac{r^{n}-1}{r-1}\ .\label{eq: geometric sum formula}
\end{equation}

\end_inset

(A series is 
\begin_inset Quotes eld
\end_inset

geometric
\begin_inset Quotes erd
\end_inset

 if the ratio between any term and the one after it remains the same regardless
 of which term you choose.
 In the series above, that ratio is 
\begin_inset Formula $r$
\end_inset

.) Notice the right-hand side has 
\begin_inset Formula $r^{n}-1$
\end_inset

; that's the same as 
\begin_inset Formula $p_{n}\left(r\right)$
\end_inset

.
 Let 
\begin_inset Formula $a=1$
\end_inset

 and 
\begin_inset Formula $r=x$
\end_inset

, so that equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq: geometric sum formula"
plural "false"
caps "false"
noprefix "false"

\end_inset

 becomes
\begin_inset Formula 
\[
1+x+x^{2}+\cdots+x^{n-1}=\frac{x^{n}-1}{x-1}\ .
\]

\end_inset

Multiply both sides by 
\begin_inset Formula $x-1$
\end_inset

, then rearrange a little bit, and we find that
\begin_inset Formula 
\[
x^{n}-1=\left(x-1\right)\left(x^{n-1}+\cdots+x^{2}+x+1\right)\ .
\]

\end_inset

We have factored 
\begin_inset Formula $p_{n}$
\end_inset

!
\end_layout

\begin_layout Standard
So 
\begin_inset Formula $p_{n}$
\end_inset

 is not irreducible whenever 
\begin_inset Formula $n>1$
\end_inset

.
 We turn our attention to its factors: 
\begin_inset Formula $x-1$
\end_inset

 is irreducible, but what about
\begin_inset Formula 
\[
q_{n}=x^{n-1}+\cdots+x^{2}+x+1\ ?
\]

\end_inset

The first three examples are
\begin_inset Formula 
\begin{alignat*}{2}
q_{2} & =x+1 &  & \text{(irreducible)}\\
q_{3} & =x^{2}+x+1 &  & \text{(irreducible: try the}\\
 &  &  & \text{\ensuremath{\phantom{(}}quadratic formula to see why)}\\
q_{4} & =x^{3}+x^{2}+x+1=\left(x+1\right)\left(x^{2}+1\right) & \quad & \text{(factors!)}
\end{alignat*}

\end_inset

Once we get to 
\begin_inset Formula $q_{5}=x^{4}+x^{3}+x^{2}+x+1$
\end_inset

, we start thinking it might be nice for someone else to do the work.
 This is where Sage comes in.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Create a new worksheet.
 Title it 
\begin_inset Quotes eld
\end_inset

Irreducible polynomials.
\begin_inset Quotes erd
\end_inset

 Make sure your name appears in a text cell at the top of the worksheet.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Review the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factor()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
expand()
\end_layout

\end_inset

 commands in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap: basic computations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 (pages 
\begin_inset CommandInset ref
LatexCommand pageref
reference "page: begin factor, expand, etc."
plural "false"
caps "false"
noprefix "false"

\end_inset

–
\begin_inset CommandInset ref
LatexCommand pageref
reference "page: end factor, expand, etc."
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Use them to verify the factorizations we found of 
\begin_inset Formula $q_{2}$
\end_inset

, 
\begin_inset Formula $q_{3}$
\end_inset

, and 
\begin_inset Formula $q_{4}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Use Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factor()
\end_layout

\end_inset

 command to determine which 
\begin_inset Formula $q_{n}$
\end_inset

 are irreducible.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 For larger values of 
\begin_inset Formula $n$
\end_inset

, it can take a lot of work to type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x^20 + x^19 +
\end_layout

\end_inset

\SpecialChar ldots
 and so forth.
 It's easier just to factor 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
x^21 - 1
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Look at your findings and form a conjecture as to which values of 
\begin_inset Formula $n$
\end_inset

 make 
\begin_inset Formula $q_{n}$
\end_inset

 irreducible.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Test your guess:
\end_layout

\begin_deeper
\begin_layout Itemize
Choose some 
\begin_inset Formula $n>100$
\end_inset

 for which you think 
\begin_inset Formula $q_{n}$
\end_inset

 is irreducible, and use Sage to check whether it is.
\end_layout

\begin_layout Itemize
Choose some 
\begin_inset Formula $n>100$
\end_inset

 for which you think 
\begin_inset Formula $q_{n}$
\end_inset

 factors, and use Sage to check whether it is.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 Write a short summary of what you did in a text cell at the end of the
 worksheet.
 Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash
 
\end_layout

\end_inset

when you type polynomials, so that it's easy on the eyes to read.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Various kinds of plots
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Create a new worksheet.
 Set the title to, 
\begin_inset Quotes eld
\end_inset

Lab: Various kinds of plots
\begin_inset Quotes erd
\end_inset

.
 Add other information to identify you, as necessary.
\end_layout

\begin_layout Subsection*
Part 1: Implicit plots
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Select a problem according to the following schema.
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If your ID ends with\SpecialChar ldots

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\SpecialChar ldots
use this equation.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x^{3}+x=y^{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,4,5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\left(x^{2}+y^{2}\right)^{2}=\frac{25}{4}xy^{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,7,8,9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x^{4}-x^{2}y+y^{4}=1$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 First, use at least 300 points to create and display an implicit plot of
 the equation on the region 
\begin_inset Formula $\left[-2.25,2.25\right]\times\left[-2.25,2.25\right]$
\end_inset

.
 The curve can be any color you like, as long as it's black.
\begin_inset Foot
status open

\begin_layout Plain Layout
No apologies to Henry Ford.
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Choose an 
\begin_inset Formula $x$
\end_inset

-value in the interval 
\begin_inset Formula $\left[-2,2\right]$
\end_inset

.
 Using your math skills (not Sage's, nor anyone else's — getting help from
 me is okay) find the equation of a line tangent to the curve at that point.
 Write the equation of this line in an HTML cell.
 Use basic 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 commands to make sure it looks nice.
 
\emph on
Note:
\emph default
 There may be more than one 
\begin_inset Formula $y$
\end_inset

-value for that 
\begin_inset Formula $x$
\end_inset

-value, so there may be more than one line tangent to the curve for that
 value of 
\begin_inset Formula $x$
\end_inset

, but you need plot only one.
 Don't pick a point where the tangent line is horizontal or vertical; that
 would be cheating.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Verify your claim by combining the plot of the curve with a plot of the
 tangent line.
 The line should be red.
 Put a red dot at the point where the line and curve intersect.
 Make the dot large enough to stand out; the default dot size isn't enough.
\end_layout

\begin_layout Subsection*
Part 2: Parametric plots
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 A Bézier curve is a parametric curve that involves four control points
 
\begin_inset Formula $\left(x_{0},y_{0}\right)$
\end_inset

, 
\begin_inset Formula $\left(x_{1},y_{1}\right)$
\end_inset

, 
\begin_inset Formula $\left(x_{2},y_{2}\right)$
\end_inset

, 
\begin_inset Formula $\left(x_{3},y_{3}\right)$
\end_inset

 and the equations
\begin_inset Formula 
\[
\begin{cases}
x\left(t\right) & =x_{0}\left(1-t\right)^{3}+3x_{1}t\left(1-t\right)^{2}+3x_{2}t^{2}\left(1-t\right)+x_{3}t^{3}\\
y\left(t\right) & =y_{0}\left(1-t\right)^{3}+3y_{1}t\left(1-t\right)^{2}+3y_{2}t^{2}\left(1-t\right)+y_{3}t^{3}
\end{cases}
\]

\end_inset

where 
\begin_inset Formula $t\in\left[0,1\right]$
\end_inset

.
 Plot a black Bézier curve.
 You can choose the four control points at random, but don't use any you've
 seen before.
 Feel free to make a loop, if you can.
 Add red dashed lines that connect the 1st and 2nd control points 
\begin_inset Formula $\left(x_{0},y_{0}\right)$
\end_inset

 and 
\begin_inset Formula $\left(x_{1},y_{1}\right)$
\end_inset

, and the 3rd and 4th control points 
\begin_inset Formula $\left(x_{2},y_{2}\right)$
\end_inset

 and 
\begin_inset Formula $\left(x_{3},y_{3}\right)$
\end_inset

, allowing the viewer to see how the control points relate to tangent lines.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Use your graph to write a short description of the relationship between
 the control points and the lines.
\end_layout

\begin_layout Subsection*
Part 3: Animate!
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 Animate the Bézier curve:
\end_layout

\begin_deeper
\begin_layout Itemize
Change the values of the 2nd and 3rd points 12 times.
 (Don't change them by very much, only a little, so the curve doesn't jump
 around too abruptly.)
\end_layout

\begin_layout Itemize
For each change, create a new graph.
 Each graph should be identical to the one you created in step 6, except
 that the 2nd and 3rd control points are different.
\end_layout

\begin_layout Itemize
Animate all the graphs using the 
\family typewriter
animate()
\family default
 command, and 
\family typewriter
show()
\family default
 it.
\end_layout

\end_deeper
\begin_layout Subsection*
Part 4: Make it look good!
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 Add HTML cells throughout the document that clearly delineate the parts.
 It should be clear where each part begins and ends.
 In Part 1, an HTML cell should state specifically what value of 
\begin_inset Formula $x$
\end_inset

 you chose; in Part 2, an HTML cell should state specifically what control
 points you used; in Part 3, an HTML cell should state clearly the sequence
 of adjustments made to the 2nd and 3rd control points.
 You should also add some explanatory text before each plot: 
\begin_inset Quotes eld
\end_inset

This is the first plot, with points\SpecialChar ldots

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

This is the second plot, with points\SpecialChar ldots

\begin_inset Quotes erd
\end_inset

, \SpecialChar ldots
 and finally 
\begin_inset Quotes eld
\end_inset

This is the animation of all the frames.
\begin_inset Quotes erd
\end_inset

 
\series bold
Use 
\series default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf
\backslash
LaTeX
\backslash

\end_layout

\end_inset

 
\series bold
for mathematical expressions and statements;
\series default
 don't forget the reference of useful 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 commands on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "chap: Useful LaTeX"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Cauchy, the circle, and the crossing parabola
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Let
\begin_inset Formula 
\[
f\left(x\right)=\frac{1}{1+x^{2}}\ .
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Create a plot of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 on the domain 
\begin_inset Formula $\left[-1,1\right]$
\end_inset

 and call it 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p1
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Create a picture of the semicircle in quadrants I and II that is centered
 at the origin, has radius 1, and is colored green.
 Call it 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p2
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Find the exact coordinates of the points of intersection between the semicircle
 and the graph of 
\begin_inset Formula $f\left(x\right)$
\end_inset

.
 There are three such points:
\end_layout

\begin_deeper
\begin_layout Itemize
one on the 
\begin_inset Formula $y$
\end_inset

-axis, which we call 
\begin_inset Formula $P_{0}$
\end_inset

;
\end_layout

\begin_layout Itemize
one in the first quadrant, which we call 
\begin_inset Formula $P_{+}$
\end_inset

, with coordinates 
\begin_inset Formula $\left(x_{+},y_{+}\right)$
\end_inset

; and
\end_layout

\begin_layout Itemize
one in the second quadrant, which we call 
\begin_inset Formula $P_{-}$
\end_inset

, with coordinates 
\begin_inset Formula $\left(x_{-},y_{-}\right)$
\end_inset

.
\end_layout

\begin_layout Standard

\emph on
Hint:
\emph default
 Use the fact that the semicircle is described by the equation 
\begin_inset Formula $x^{2}+y^{2}=1$
\end_inset

 for 
\begin_inset Formula $y\geq0$
\end_inset

.
 It is OK to find this using pencil and paper.
 It is also OK to find it using Sage, but you need to show the commands
 you used.
 Bear in mind that it may be easier to solve this with pencil and paper.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
4.
 Create two red points with pointsize 30, one at 
\begin_inset Formula $P_{+}$
\end_inset

 and the other at 
\begin_inset Formula $P_{-}$
\end_inset

.
 Combine them as one picture called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p3
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Plot the function 
\begin_inset Formula $y=x^{2}$
\end_inset

 on the domain 
\begin_inset Formula $\left[-1,1\right]$
\end_inset

 and call it 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p4
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Combine 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p1
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p2
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p3
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
p4
\end_layout

\end_inset

 into one plot.
 Make sure the red points lie on top of the other graphs, and not below
 them.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Explain why all three graphs meet at 
\begin_inset Formula $P_{-}$
\end_inset

 and 
\begin_inset Formula $P_{+}$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Hint:
\emph default
 Square 
\begin_inset Formula $x_{+}$
\end_inset

 and rationalize all fractions.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
8.
 Consider the rectangle whose bottom left corner lies on the origin and
 whose top right corner lies at 
\begin_inset Formula $P_{+}$
\end_inset

.
 Find the ratio of its height to its width.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 The 
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout
golden ratio
\end_layout

\end_inset

golden ratio
\series default
 is the number
\begin_inset Formula 
\[
\phi=\frac{1+\sqrt{5}}{2}\ .
\]

\end_inset

Express your answer to #8 in terms of 
\begin_inset Formula $\phi$
\end_inset

.
\end_layout

\begin_layout Chapter*
Calculus and Differential Equations
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
An important difference quotient
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
In this lab we show how you can use Sage to work through the proof that
\begin_inset Formula 
\[
\frac{d}{dx}\left(x^{n}\right)=nx^{n-1}\ .
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Create a new worksheet.
 Set the title to, 
\begin_inset Quotes eld
\end_inset

Lab: An important difference quotient
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Create an HTML cell.
 Write your name, and this semester.
 Change it to some color.
 You can choose any color you like, as long as it's not black.
 — Or white.
 White would be bad, too.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 In the first computational cell, use the 
\family typewriter
var()
\family default
 command to define indeterminates 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 In the next few computational cells, define 
\begin_inset Formula $f\left(x\right)=x^{n}$
\end_inset

 and have Sage expand the product 
\begin_inset Formula $\left(x+h\right)^{n}$
\end_inset

 for several concrete values of 
\begin_inset Formula $n$
\end_inset

.
 The 
\family typewriter
expand()
\family default
 command was shown on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "page: expand()"

\end_inset

, and you should pick several sequential values of 
\begin_inset Formula $n$
\end_inset

: for instance, 
\begin_inset Formula $n=1$
\end_inset

, 
\begin_inset Formula $n=2$
\end_inset

, and so on.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 In an HTML cell that follows these computational cells, make a conjecture
 as to what the last two terms of 
\begin_inset Formula $\left(x+h\right)^{n}$
\end_inset

 will always be, and what common factor the remaining terms always have.
 That is, we have
\begin_inset Formula 
\[
tg\left(x,h\right)+u+v
\]

\end_inset

where 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 are the last two terms that Sage reports, and 
\begin_inset Formula $t$
\end_inset

 is the common factor for the remaining terms.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 In Calculus, you are told that
\end_layout

\begin_deeper
\begin_layout Itemize
the definition of 
\begin_inset Formula $\frac{d}{dx}f\left(x\right)$
\end_inset

 is
\begin_inset Formula 
\[
\lim_{h\rightarrow0}\frac{f\left(x+h\right)-f\left(x\right)}{h},
\]

\end_inset


\end_layout

\begin_layout Itemize
and 
\begin_inset Formula $\frac{d}{dx}x^{n}=nx^{n-1}$
\end_inset

.
\end_layout

\begin_layout Standard
In a final HTML cell, explain why your answers to steps
\begin_inset space ~
\end_inset

4 and
\begin_inset space ~
\end_inset

5 demonstrate this fact.
 
\emph on
Hint:
\emph default
 Use the information to work it out algebraically.
 You don't need to know the details of 
\begin_inset Formula $g\left(x,h\right)$
\end_inset

; on paper you can just substitute 
\begin_inset Formula $tg\left(x,h\right)+u+v$
\end_inset

 for 
\begin_inset Formula $f\left(x+h\right)$
\end_inset

, then perform the subtraction, then the division, and see what pops out.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Illustrating Calculus
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Create a new worksheet.
 Set the title to, 
\begin_inset Quotes eld
\end_inset

Lab: Illustrating Calculus
\begin_inset Quotes erd
\end_inset

.
 Add other information to identify you, as necessary.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Select a problem according to the following schema.
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If your ID ends with\SpecialChar ldots

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\SpecialChar ldots
use this function\SpecialChar ldots

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\SpecialChar ldots
over this interval.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $f\left(x\right)=\sin x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\left[-\frac{\pi}{3},\frac{2\pi}{3}\right]$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,4,5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $f\left(x\right)=\cos x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\left[-\frac{\pi}{3},\frac{2\pi}{3}\right]$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,7,8,9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $f\left(x\right)=\tan x$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\left[-\frac{\pi}{6},\frac{\pi}{3}\right]$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection*
Part 1: Derivatives
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Find the equation of the line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=\pi/4$
\end_inset

.
 Any computation that can be done with Sage should be evident in your worksheet!
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Combine the plots of both 
\begin_inset Formula $f$
\end_inset

 and the line tangent to it over the interval given.
 The curve for 
\begin_inset Formula $f$
\end_inset

 should be black, and have a width of 2.
 The line should be blue, and have a width of 2.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Create an animation with at least 8 frames that shows the approach of the
 secant line to the tangent line as 
\begin_inset Formula $x\rightarrow\pi/4$
\end_inset

 from the left.
 Reuse the plots of 
\begin_inset Formula $f$
\end_inset

 and the tangent line from above.
 The secant lines should be red, and have a width of 1.
 You are free to choose any points you like for the secant, just so long
 as 
\begin_inset Formula $x\rightarrow\pi/4$
\end_inset

 from the left.
 When you are done, your animation should resemble the one on the course
 syllabus: for instance, the secant line should proceed back and forth,
 not just in one direction.
\end_layout

\begin_layout Subsection*
Part 2: Exact integrals
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Compute the net area between 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g\left(x\right)=1-x^{2}$
\end_inset

 over the interval given.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Combine the plots of both 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 over the interval given.
 Fill in the area between 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

.
 The curves for both 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 should be black, with a width of 2.
 The filling can be any color you like, but make it half-transparent.
 Add a text label inside the filling which contains the area.
 Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash
 
\end_layout

\end_inset

so that the text label looks nice.
\end_layout

\begin_layout Subsection*
Part 3: Approximate integrals
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 Go back to your Calculus text and review the calculation of arclength with
 integrals.
 Write the formula, and in an HTML cell explain briefly what tool from high
 school geometry is used to derive the formula.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 Use Sage to 
\series bold
\emph on
approximate
\series default
\emph default
 the arclength of the ellipse 
\begin_inset Formula $x^{2}/4+y^{2}/9=1$
\end_inset

.
 Limit the approximation to 5 sample points, and round your answer to 5
 decimal places.
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 Repeat problem 9, this time limiting the approximation to 10 sample points.
 What part of the answer indicates that you have a more accurate answer?
 Compare it to the value when you use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
numerical_integral()
\end_layout

\end_inset

 with its default setting (currently 87 sample points).
\end_layout

\begin_layout Subsection*
Part 4: BONUS! (for those with exceptional time and/or motivation)
\end_layout

\begin_layout Standard
Animate approximations of the arclength, where each frame shows
\end_layout

\begin_layout Itemize
no axes;
\end_layout

\begin_layout Itemize
the ellipse, in black, with the curve's width 2;
\end_layout

\begin_layout Itemize
six frames of 5 dashed line segments, then 6 dashed line segments, \SpecialChar ldots
, and
 finally 10 dashed line segments, in red, of width 1;
\end_layout

\begin_layout Itemize
a text label in each frame with the corresponding approximation to the arclength
, at the center of the ellipse, in black.
\end_layout

\begin_layout Standard
This bonus is worth as much as 
\emph on
the entire assignment
\emph default
.
 If you wish, you may do Part 4 instead of Parts 1–3.
 Be sure you know what you are doing; this can take a while.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Simpson's Rule
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
In Calculus II you should have learned Simpson's rule to approximate the
 value of an integral over an interval.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 In an HTML cell,
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) state the formula for Simpson's Rule;
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) briefly summarize the idea that gives rise to the formula.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
2.
 Write a Sage procedure that accepts as inputs an integrable function 
\begin_inset Formula $f$
\end_inset

, the endpoints 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 of an interval, and a positive integer 
\begin_inset Formula $n$
\end_inset

, then uses Simpson's Rule to estimate 
\begin_inset Formula $\int_{a}^{b}f\left(x\right)\ d\!x$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Write a Sage procedure that accepts as inputs an integrable function 
\begin_inset Formula $f$
\end_inset

, the endpoints 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 of an interval, and a positive integer 
\begin_inset Formula $n$
\end_inset

, then illustrates Simpson's Rule with a plot of both 
\begin_inset Formula $f$
\end_inset

 and the figures whose areas are used to estimate the value of the integral.
 Have the procedure invoke the solution to the previous question, and print
 the area as a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

'd label somewhere on the curve.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Make an interactive procedure for the solution to the previous question.
 In addition to accepting 
\begin_inset Formula $f$
\end_inset

, 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, and 
\begin_inset Formula $n$
\end_inset

 as inputs, the interactive procedure should allow the user to select the
 color for the figures used to estimate the value of the integral.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
The Runge-Kutta method
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
The Runge-Kutta method of approximating the solution to a differential equation
 is similar to Euler's Method.
 The following pseudocode describes Runge-Kutta:
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Runge_Kutta
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $d\!f$
\end_inset

, the derivative of a function
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(x_{0},y_{0}\right)$
\end_inset

, initial values of 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta x$
\end_inset

, step size
\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

, number of steps to take
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $a=x_{0}$
\end_inset

, 
\begin_inset Formula $b=y_{0}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
repeat
\series default
 
\begin_inset Formula $n$
\end_inset

 times
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $k_{1}=d\!f\left(a,b\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $k_{2}=d\!f\left(a+\nicefrac{\Delta x}{2},b+\nicefrac{\Delta x}{2}\cdot k_{1}\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $k_{3}=d\!f\left(a+\nicefrac{\Delta x}{2},b+\nicefrac{\Delta x}{2}\cdot k_{2}\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $k_{4}=d\!f\left(a+\Delta x,b+\Delta x\cdot k_{3}\right)$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $\nicefrac{\Delta x}{6}\left(k_{1}+2k_{2}+2k_{3}+k_{4}\right)$
\end_inset

 to 
\begin_inset Formula $b$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 
\begin_inset Formula $\Delta x$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $\left(a,b\right)$
\end_inset


\end_layout

\begin_layout Standard
Implement Runge-Kutta in Sage code.
 Try it on the same differential equation and initial condition we tried
 in Euler's method, and compare the result.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Maclaurin coefficients
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
In Calculus III you should have learned about Maclaurin expansions.
 
\series bold
Maclaurin coefficients
\series default
 are the numerical coefficients of the terms in the Maclaurin expansion.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write a procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
maclaurin_coeffs()
\end_layout

\end_inset

 that accepts as inputs a function 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

 and a positive integer 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

.
 It returns a list of the Maclaurin coefficients of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 up to and including degree 
\begin_inset Formula $d$
\end_inset

.
 
\emph on
Hint:
\emph default
 You should probably use the Sage procedures 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
taylor()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
taylor()
\end_layout

\end_inset

 and 
\begin_inset Index idx
status open

\begin_layout Plain Layout
coefficient()
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
coefficient()
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Test your procedure with known elementary functions such as 
\begin_inset Formula $e^{x}$
\end_inset

, 
\begin_inset Formula $\sin x$
\end_inset

, and 
\begin_inset Formula $\cos x$
\end_inset

.
 Verify that your answers correspond to those that appear in a calculus
 textbook.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Use your procedure to find the Maclaurin coefficients of 
\begin_inset Formula $f\left(x\right)=\arcsin^{2}\left(x\right)$
\end_inset

 up to degree
\begin_inset space ~
\end_inset

20.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Look at the nonzero Maclaurin coefficients of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 for degree
\begin_inset space ~
\end_inset

6 and higher.
 What common factor do you see in the numerators?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Using your answer to the previous problem, modify your invocation to
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
maclaurin_coeffs(arcsin(???)**2, 20)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
so that all numerators are
\begin_inset space ~
\end_inset

1.
 Save this list as 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L1
\end_layout

\end_inset

.
 Why does it make sense that you can do this?
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 From 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L1
\end_layout

\end_inset

, use a list comprehension to make 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L2
\end_layout

\end_inset

, a list of the reciprocals of the nonzero coefficients.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 What is the smallest nontrivial common factor of the elements of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L2
\end_layout

\end_inset

? Write another list comprehension to create 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L3
\end_layout

\end_inset

, which contains the elements of 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L2
\end_layout

\end_inset

, but divided by this common factor.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 Look up this new list at the 
\begin_inset CommandInset href
LatexCommand href
name "Online Encyclopedia of Integer Sequences"
target "http://www.oeis.org"
literal "false"

\end_inset

.
 What number sequence do you find?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 Work backwards through your last few steps to answer the original problem:
\begin_inset Formula 
\[
\arcsin^{2}x=\sum_{k=1}^{\infty}\textrm{???}\ .
\]

\end_inset

(We haven't 
\emph on
proved
\emph default
 that this is the correct series; we've only conjectured it based on a few
 coefficients.)
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
\begin_inset Formula $p$
\end_inset

-series
\end_layout

\begin_layout Standard
\noindent
In the following, 
\begin_inset Formula $\left\lceil x\right\rceil $
\end_inset

 denotes the ceiling of 
\begin_inset Formula $x$
\end_inset

, and 
\begin_inset Formula $\left\lfloor x\right\rfloor $
\end_inset

 denotes the floor of 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write code to compute the sum
\begin_inset Formula 
\[
\sum_{k=1}^{n}\frac{1}{k^{p}},
\]

\end_inset

and use loops to generate lists of the first 50 sums, for 
\begin_inset Formula $p=1,2,3$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Generate plots of these sums for 
\begin_inset Formula $p=1,2,3$
\end_inset

 by plotting the step functions 
\begin_inset Formula 
\[
s_{p}(x)=\sum_{k=1}^{\left\lceil x\right\rceil }\frac{1}{k^{p}}
\]

\end_inset

 on the interval 
\begin_inset Formula $[1,50]$
\end_inset

.
 Using your plots, guess whether or not the 
\begin_inset Formula $p$
\end_inset

-series 
\begin_inset Formula 
\[
\sum_{k=1}^{\infty}\frac{1}{k^{p}}
\]

\end_inset

 converges, for 
\begin_inset Formula $p=1,2,3$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Generate plots of the sequences for 
\begin_inset Formula $p=1,2,3$
\end_inset

 by plotting the functions 
\begin_inset Formula 
\[
f_{p}(x)=\frac{1}{\left\lfloor x\right\rfloor ^{p}},~g_{p}(x)=\frac{1}{x^{p}},~h_{p}(x)=\frac{1}{\left\lceil x\right\rceil ^{p}}
\]

\end_inset

 together (using different colors) on the interval 
\begin_inset Formula $[1,10]$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 What do these plots suggest about
\begin_inset Formula 
\[
\sum_{k=2}^{n}\frac{1}{k^{p}},~\int_{1}^{n}\frac{1}{x^{p}}\thinspace dx,~\mbox{{and}\ }\sum_{k=1}^{n-1}\frac{1}{k^{p}}\thinspace,
\]

\end_inset

and what do they suggest about
\begin_inset Formula 
\[
\sum_{k=1}^{\infty}\frac{1}{k^{p}}~\mbox{{and}}~\int_{1}^{\infty}\frac{1}{x^{p}}\thinspace dx\thinspace?
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Using your answers to problem 4, determine whether or not 
\begin_inset Formula 
\[
\sum_{k=1}^{\infty}\frac{1}{k^{p}}
\]

\end_inset

 converges, for 
\begin_inset Formula $p=1,2,3$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Off on a tangent
\end_layout

\begin_layout Standard
\noindent
Let 
\begin_inset Formula 
\[
f\left(x\right)=\frac{1}{1+x^{2}}\ .
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Plot the function 
\begin_inset Formula $f\left(x\right)$
\end_inset

 on 
\begin_inset Formula $\left[-3,3\right]$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Define in Sage the mathematical function 
\begin_inset Formula $L\left(a,x\right)$
\end_inset

 to be the line tangent to 
\begin_inset Formula $f$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Note:
\emph default
 This should be a function in 
\emph on
two
\emph default
 variables.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 Plot 
\begin_inset Formula $f\left(x\right)$
\end_inset

 and 
\begin_inset Formula $L\left(a,x\right)$
\end_inset

 together for each 
\begin_inset Formula $a\in\left\{ 1,1.5,2\right\} $
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Notice that each line intersects 
\begin_inset Formula $f$
\end_inset

 twice.
 Denote by 
\begin_inset Formula $Q_{a}\left(x\right)$
\end_inset

 the 
\emph on
second
\emph default
 intersection.
 Use Sage to find the coordinates of 
\begin_inset Formula $Q_{a}$
\end_inset

 as functions of 
\begin_inset Formula $a$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Hint:
\emph default
 Solve the equation 
\begin_inset Formula $L\left(a,x\right)=f\left(x\right)$
\end_inset

 for 
\begin_inset Formula $x$
\end_inset

.
 One solution must be 
\begin_inset Formula $x=a$
\end_inset

.
 The 
\begin_inset Formula $x$
\end_inset

-coordinate of 
\begin_inset Formula $Q_{a}$
\end_inset

 will be the 
\emph on
other
\emph default
 solution to this equation.
 Call it 
\begin_inset Formula $h\left(a\right)$
\end_inset

.
 Then 
\begin_inset Formula $Q_{a}=\left(h\left(a\right),f\left(h\left(a\right)\right)\right)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
5.
 Let 
\begin_inset Formula $F\left(a\right)$
\end_inset

 be the area between the graph of 
\begin_inset Formula $f\left(x\right)$
\end_inset

 and 
\begin_inset Formula $L\left(a,x\right)$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Use Sage to find an explicit formula for 
\begin_inset Formula $F\left(a\right)$
\end_inset

 as a function of 
\begin_inset Formula $a$
\end_inset

.
 Simplify it as much as possible.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Now let 
\begin_inset Formula $a_{0}=\sqrt{3}$
\end_inset

 and make a plot that includes the points 
\begin_inset Formula $P=\left(a_{0},f\left(a_{0}\right)\right)$
\end_inset

 and 
\begin_inset Formula $Q_{a_{0}}$
\end_inset

, as well as the functions 
\begin_inset Formula $f\left(x\right),\quad\textrm{and}\quad L\left(a_{0},x\right)$
\end_inset

 on the domain 
\begin_inset Formula $\left[-3,3\right]$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 Compute the exact value of 
\begin_inset Formula $F\left(a_{0}\right)$
\end_inset

 using Sage.
 Simplify the result as much as possible.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Note:
\emph default
 Find the 
\emph on
exact
\emph default
 value, not a decimal approximation.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Crossing at an angle
\end_layout

\begin_layout Standard
\noindent
In “Writing your own procedures”, we learned how to define a Sage procedure
 that computes the tangent line to 
\begin_inset Formula $f\left(x\right)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

.
 Then 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "exc: normal line function"
plural "false"
caps "false"
noprefix "false"

\end_inset

, you were asked to write the code for a procedure that returns the normal
 line to 
\begin_inset Formula $f\left(x\right)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

.
\end_layout

\begin_layout Standard
We can think of the tangent line as the line that makes an angle 
\begin_inset Formula $θ=0$
\end_inset

 with the graph of 
\begin_inset Formula $f(x)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

, and the normal line as the line that makes an angle 
\begin_inset Formula $θ=\nicefrac{\pi}{2}$
\end_inset

.
 In this lab, we generalize the construction and define the line that makes
 an arbitrary angle 
\begin_inset Formula $θ$
\end_inset

 with the graph of 
\begin_inset Formula $f(x)$
\end_inset

.
\end_layout

\begin_layout Standard
Suppose 
\begin_inset Formula $f(x)$
\end_inset

 is differentiable at 
\begin_inset Formula $x=a$
\end_inset

.
 Let 
\begin_inset Formula $L_{θ}(a,x)$
\end_inset

 be the line through 
\begin_inset Formula $(a,f(a))$
\end_inset

 that makes an angle 
\begin_inset Formula $θ$
\end_inset

 with the line tangent to 
\begin_inset Formula $f(x)$
\end_inset

 at 
\begin_inset Formula $x=a$
\end_inset

.
 So 
\begin_inset Formula $L_{0}(a,x)$
\end_inset

 is the tangent line, and 
\begin_inset Formula $L_{π/2}(a,x)$
\end_inset

 is the normal line.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Find an explicit formula for the slope of 
\begin_inset Formula $L_{θ}(a,x)$
\end_inset

.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 Draw a picture.
 Interpret the derivative 
\begin_inset Formula $f'(a)$
\end_inset

 as the value of a trig function, then use a trig identity.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Write a Sage procedure that returns 
\begin_inset Formula $L_{θ}(a,x)$
\end_inset

.
\begin_inset Newline newline
\end_inset


\emph on
Note:
\emph default
 This problem is not as as simple as replacing 
\begin_inset Formula $m=f'(a)$
\end_inset

 in the code for the tangent line 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sage: tangent line function that prints results"
plural "false"
caps "false"
noprefix "false"

\end_inset

 with the answer you found in the previous item, because your procedure
 must also work when 
\begin_inset Formula $θ=\nicefrac{\pi}{2}$
\end_inset

 or when 
\begin_inset Formula $tan(θ)f'(a)=1$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Now let 
\begin_inset Formula $f(x)=x^{2}$
\end_inset

.
 Find all values of 
\begin_inset Formula $a$
\end_inset

 for which 
\begin_inset Formula $L_{θ}(a,x)$
\end_inset

 will intersect 
\begin_inset Formula $f(x)$
\end_inset

 at a point other than 
\begin_inset Formula $(a,f(a))$
\end_inset

.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 Let Sage do the work.
 Solve the equation 
\begin_inset Formula $L_{θ}(a,x)=f(x)$
\end_inset

 and see what values of 
\begin_inset Formula $a$
\end_inset

 make sense.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 For each 
\begin_inset Formula $a$
\end_inset

 you found in the previous item, let 
\begin_inset Formula $F(a)$
\end_inset

 be the area between 
\begin_inset Formula $f(x)$
\end_inset

 and 
\begin_inset Formula $L_{θ}(a,x)$
\end_inset

.
 Use Sage to find an explicit expression for 
\begin_inset Formula $F(a)$
\end_inset

.
 Your expression should be an expression in 
\begin_inset Formula $θ$
\end_inset

 and 
\begin_inset Formula $a$
\end_inset

, and as simplified as possible.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 Use 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
factor(expand(\SpecialChar ldots
))
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Find the exact value of the minimum possible value of 
\begin_inset Formula $F(a)$
\end_inset

 (no decimal approximations).
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Now find the minimum value of 
\begin_inset Formula $F(a)$
\end_inset

 when 
\begin_inset Formula $θ=0$
\end_inset

, 
\begin_inset Formula $\theta=\nicefrac{\pi}{6}$
\end_inset

, 
\begin_inset Formula $\theta=4$
\end_inset

, and 
\begin_inset Formula $\theta=\nicefrac{\pi}{2}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Maxima and Minima in 3D
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
\noindent
1.
 Write a procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
critical_points()
\end_layout

\end_inset

 which accepts as input a twice-differentiable function 
\begin_inset Formula $f$
\end_inset

 in two variables 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, and returns a list of points 
\begin_inset Formula $\left(x_{i},y_{i}\right)$
\end_inset

 that are critical points of 
\begin_inset Formula $f$
\end_inset

.
 Make sure you find only real-valued critical points; you can use the 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
imag_part()
\end_layout

\end_inset

 procedure to test each point.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Write a second procedure, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
second_derivs_test()
\end_layout

\end_inset

, which accepts as input a twice-differentiable function 
\begin_inset Formula $f$
\end_inset

 in two variables 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, as well as a critical point 
\begin_inset Formula $\left(x,y\right)$
\end_inset

, and returns one of the following:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'max'
\end_layout

\end_inset

 if the point is a maximum;
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'min'
\end_layout

\end_inset

 if the point is a minimum;
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'saddle'
\end_layout

\end_inset

 if the point is a saddle point; and
\end_layout

\begin_layout Itemize
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
'inconclusive'
\end_layout

\end_inset

 if the second derivative test is inconclusive.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 Write a third procedure, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
plot_critical_points()
\end_layout

\end_inset

, which accepts as input a twice-differentiable function 
\begin_inset Formula $f$
\end_inset

 in two variables 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, and returns a 3-dimensional plot of the following:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $f\left(x,y\right)$
\end_inset

 in the default color;
\end_layout

\begin_layout Itemize
local maxima in red;
\end_layout

\begin_layout Itemize
local minima in yellow;
\end_layout

\begin_layout Itemize
saddle points in green;
\end_layout

\begin_layout Itemize
other critical points in black.
\end_layout

\begin_layout Standard
Use a dictionary to look up the appropriate color for the points.
 Use Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
min()
\end_layout

\end_inset

 procedures to determine the plot's minimum and maximum 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-values to make sure that all the critical points appear in the plot.
\end_layout

\end_deeper
\begin_layout Chapter*
Linear Algebra
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Algebraic and geometric properties of linear systems
\end_layout

\begin_layout Subsection*
A system of equations
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Sage has a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
randint
\begin_inset ERT
status open

\begin_layout Plain Layout

@
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
randint()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
random numbers
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
randint()
\end_layout

\end_inset

 procedure that chooses numbers seemingly at random.
 It works in the following way: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
randint(m,n)
\end_layout

\end_inset

 gives an integer from 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

 to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

.
 Use this command to generate 6 distinct random integers 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

, 
\begin_inset Formula $d$
\end_inset

, 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $f$
\end_inset

 between 
\begin_inset Formula $-20$
\end_inset

 and 
\begin_inset Formula $20$
\end_inset

, then substitute them into the following system of equations.
 (Remember that 
\begin_inset Quotes eld
\end_inset

distinct
\begin_inset Quotes erd
\end_inset

 means no two integers are the same.)
\begin_inset Formula 
\[
\begin{cases}
ax+by=e\\
cx+dy=f
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Plot each equation on the 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $y$
\end_inset

 plane.
 Make one line blue, the other red.
 (It doesn't matter which is which.) In all likelihood, the two lines will
 not be parallel, but will intersect at exactly one point.
 Adjust the 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 axes so that this intersection is visible.
 
\emph on
If the lines are parallel or coincident, modify one of 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $f$
\end_inset

 so that the lines intersect at exactly one point.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Use Sage to find the 
\emph on
exact
\emph default
 solution to the system of equations.
 This should be a point 
\begin_inset Formula $\left(x_{0},y_{0}\right)$
\end_inset

.
 Create a 
\emph on
new
\emph default
 plot with both lines (still different colors) and a big, fat yellow point
 on top of their intersection.
 (Not too fat, but fat enough to see.) Make sure the point lies 
\emph on
on top
\emph default
 of the lines.
\end_layout

\begin_layout Subsection*
An invariant
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Define indeterminates 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $f$
\end_inset

.
 Use them to define the following system of equations 
\emph on
without any numbers at all:
\emph default

\begin_inset Formula 
\[
\begin{cases}
ax+by=e\\
cx+dy=f
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Solve the system above for 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 You may have noticed that the solution has a common denominator.
 (If you didn't notice it, this would be a good time to notice.) What is
 sort-of-amazing, but not-really-that-amazing about that denominator?
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 Think about some basic matrix operations on the matrix that corresponds
 to the left sides of the original equations.
 It's something you should have computed in high school algebra, and 
\emph on
definitely
\emph default
 would have computed in linear algebra.
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 Suppose that 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 have known, concrete values.
 Use your answer to #6 to explain why the existence of a solution depends
 
\emph on
entirely
\emph default
 on 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 — and has nothing to do with 
\begin_inset Formula $e$
\end_inset

 and 
\begin_inset Formula $f$
\end_inset

!!!
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 I'm asking about the 
\emph on
existence
\emph default
 of a solution, not the 
\emph on
specific value
\emph default
 of the solution once it exists.
 The specific value certainly depends on the values 
\begin_inset Formula $e$
\end_inset

 and 
\begin_inset Formula $f$
\end_inset

, but its existence depends only on the values of 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

.
 So the question asks you to use the previous answer to explain this question
 of 
\emph on
existence,
\emph default
 not of 
\emph on
value.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 Let 
\begin_inset Formula $g$
\end_inset

 be the denominator of the solution found in #6.
 Substitute the values of 
\begin_inset Formula $a$
\end_inset

 and
\series bold
 
\series default

\begin_inset Formula $b$
\end_inset

 from #1
\series bold
 
\series default
into the equation 
\begin_inset Formula $g=0$
\end_inset

.
 You now have a linear equation in two variables, 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

.
 Change 
\begin_inset Formula $c$
\end_inset

 to 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 to 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
9.
 Plot the line determined (no pun intended) by this equation, which has
 
\begin_inset Formula $y$
\end_inset

-intercept
\begin_inset space ~
\end_inset

0.
 Also plot the original equation 
\begin_inset Formula $ax+by=c$
\end_inset

.
 How are these two lines related? (It may not be clear unless you use the
 plot option 
\family typewriter
aspect_ratio=1
\family default
 to make it clear.)
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 Would this relationship between the two lines hold 
\emph on
regardless of the values of 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

?
\emph default
 That is, if the only thing you changed were 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 in both the line and the function 
\begin_inset Formula $g\left(x\right)$
\end_inset

, would the line 
\begin_inset Formula $ax+by=c$
\end_inset

 still have the same relationship to the corresponding value of 
\begin_inset Formula $g\left(x\right)$
\end_inset

?
\end_layout

\begin_layout Subsection*
A point at infinity
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
11.
 We return to your original system of equations.
 Define lists 
\begin_inset Formula $D$
\end_inset

 and 
\begin_inset Formula $E$
\end_inset

 so that the values in 
\begin_inset Formula $D$
\end_inset

 move in
\begin_inset space ~
\end_inset

10 steps from 
\begin_inset Formula $d$
\end_inset

 
\emph on
almost
\emph default
 to 
\begin_inset Formula $a$
\end_inset

 and the values in 
\begin_inset Formula $E$
\end_inset

 move in
\begin_inset space ~
\end_inset

10 steps from 
\begin_inset Formula $e$
\end_inset

 
\emph on
almost
\emph default
 to 
\begin_inset Formula $b$
\end_inset

.
 (The difference between the final values and 
\begin_inset Formula $a$
\end_inset

 or 
\begin_inset Formula $b$
\end_inset

 should be minuscule.) For instance, if your original system is
\begin_inset Formula 
\[
\begin{cases}
1x+2y=3\\
4x+5y=6
\end{cases}
\]

\end_inset

then you could have something like 
\begin_inset Formula $D=\left(4,3,2,1.5,1.1,1.01,1.001,1.0001,1.00001,1.000001\right)$
\end_inset

 and 
\begin_inset Formula $E=\left(5,4,3,2.5,2.1,2.01,2.001,2.0001,2.00001,2.000001\right)$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
12.
 Loop through the lists 
\begin_inset Formula $D$
\end_inset

 and 
\begin_inset Formula $E$
\end_inset

 to create a plot for each system
\begin_inset Formula 
\[
\begin{cases}
\ \,ax+by=c\\
d_{i}x+e_{i}y=f
\end{cases}.
\]

\end_inset

(Here, 
\begin_inset Formula $d_{i}$
\end_inset

 and 
\begin_inset Formula $e_{i}$
\end_inset

 refer to the 
\begin_inset Formula $i$
\end_inset

th elements of 
\begin_inset Formula $D$
\end_inset

 and 
\begin_inset Formula $E$
\end_inset

, respectively.) Combine the plots into a sequential animation.
 Animate it.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
13.
 Describe the 
\emph on
eventual
\emph default
 relationship between the lines, especially if you let 
\begin_inset Formula $d_{i}\rightarrow a$
\end_inset

 and 
\begin_inset Formula $e_{i}\rightarrow b$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
14.
 The field of 
\series bold
projective geometry
\series default
 introduces a new point so that 
\emph on
all lines, even parallel lines, intersect at least once
\emph default
.
 Use the animation to explain why it is appropriate to call this point a
 
\begin_inset Quotes eld
\end_inset

point at infinity.
\begin_inset Quotes erd
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 You may want to adjust the minimum and maximum 
\begin_inset Formula $x$
\end_inset

- and 
\begin_inset Formula $y$
\end_inset

-values of your animation to see this more clearly.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Transformation matrices
\end_layout

\begin_layout Standard
\noindent
Define two symbolic variables 
\family typewriter
a
\family default
 and 
\family typewriter
b
\family default
.
 Let
\begin_inset Formula 
\[
A=\left(\begin{array}{rr}
\cos a & \sin a\\
-\sin a & \cos a
\end{array}\right)\qquad\textrm{and}\qquad B=\left(\begin{array}{rr}
\cos b & \sin b\\
-\sin b & \cos b
\end{array}\right).
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Compute 
\begin_inset Formula $AB$
\end_inset

 in Sage.
 Use your knowledge of trigonometry to specify a simpler form than what
 Sage gives.
 Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash

\end_layout

\end_inset

 to write this simpler form in a text box below the computation of 
\begin_inset Formula $AB$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Extract, and give a name to, the entry in the first row and column of 
\begin_inset Formula $AB$
\end_inset

.
\begin_inset Formula 
\[
\left(\begin{array}{cc}
\textrm{\textbf{this one}} & \textrm{not this one}\\
\textrm{nor this one} & \textrm{certainly not this one}
\end{array}\right)
\]

\end_inset

Try to give it a meaningful name, not just 
\begin_inset Formula $x$
\end_inset

, which is a bad idea, anyway.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 In a new computational cell, type the name you just created for that entry.
 Then, type a dot (period).
 Then press tab.
 Look through the names that pop up for a command that might reduce the
 trigonometric expression to something simpler.
 Use that command to confirm your result in part (b).
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Define a new matrix, 
\begin_inset Formula $C$
\end_inset

, obtained by substituting the value 
\begin_inset Formula $a=\nicefrac{\pi}{3}$
\end_inset

 into 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Let 
\begin_inset Formula $\mathbf{v}$
\end_inset

 be the vector defined by 
\begin_inset Formula $\left(5,2\right)$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Compute the vectors 
\begin_inset Formula $C\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{2}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{3}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{4}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{5}\mathbf{v}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Plot the vectors 
\begin_inset Formula $\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{2}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{3}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{4}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $C^{5}\mathbf{v}$
\end_inset

 in different colors (your choice).
 Plot them as arrows or points, but not as step functions.
 Please combine them into a single plot, rather than making six different
 plots.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 What is the geometric effect of multiplying 
\begin_inset Formula $\mathbf{v}$
\end_inset

 by the matrix 
\begin_inset Formula $C$
\end_inset

 repeatedly? What do you predict 
\begin_inset Formula $C^{60}\mathbf{v}$
\end_inset

 would look like? What about 
\begin_inset Formula $C^{1042}\mathbf{v}$
\end_inset

?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Visualizing eigenvalues and eigenvectors
\end_layout

\begin_layout Standard
Sage has a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
randint
\begin_inset ERT
status open

\begin_layout Plain Layout

@
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
randint()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
random numbers
\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
randint()
\end_layout

\end_inset

 procedure that chooses numbers seemingly at random.
 It works in the following way: 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
randint(m,n)
\end_layout

\end_inset

 gives an integer from 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset

 to 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset

.
 Use this command to generate 4 distinct random integers between 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $10$
\end_inset

, then use them to define a 
\begin_inset Formula $2\times2$
\end_inset

 matrix 
\begin_inset Formula $M$
\end_inset

.
 (Remember that 
\begin_inset Quotes eld
\end_inset

distinct
\begin_inset Quotes erd
\end_inset

 means no two integers are the same.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Use Sage to find the eigenvalues and eigenvectors of 
\begin_inset Formula $M$
\end_inset

.
 There should be two distinct eigenvectors, but it's possible you'll get
 only one, with a multiplicity of
\begin_inset space ~
\end_inset

2.
 In that case, modify the entries of your matrix 
\emph on
very slightly
\emph default
 so that it produces two distinct eigenvectors.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Extract the eigenvectors and name them 
\family typewriter
v1
\family default
 and 
\family typewriter
v2
\family default
.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 For full credit, 
\emph on
extract
\emph default
 them using the bracket operator; do not define new vectors.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Let 
\family typewriter
K
\family default
 be the list of vectors obtained from the 4 products 
\begin_inset Formula $M^{i}v_{1}$
\end_inset

 for 
\begin_inset Formula $i=1,2,\ldots,4$
\end_inset

.
 Use a 
\series bold
for
\series default
 loop to define this list; you will lose the vast majority of points on
 this part if you do them one at a time.
\begin_inset Newline newline
\end_inset


\emph on
Hint:
\emph default
 
\series bold
Be careful.

\series default
 The expression 
\family typewriter
range(10)
\family default
 starts at 0; you want to start at 1.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Let 
\family typewriter
L
\family default
 be the list of vectors obtained from the 4 products 
\begin_inset Formula $M^{i}v_{2}$
\end_inset

 for 
\begin_inset Formula $i=1,2,\ldots,4$
\end_inset

.
 Use a 
\series bold
for
\series default
 loop to define this list; you will lose the vast majority of points on
 this part if you do them one at a time.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Define 
\family typewriter
p=Graphics()
\family default
 and 
\family typewriter
q=Graphics()
\family default
.
 (This defines an 
\begin_inset Quotes eld
\end_inset

empty
\begin_inset Quotes erd
\end_inset

 plot.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Use a 
\series bold
for
\series default
 loop to add a plot of each vector in 
\family typewriter
K
\family default
 to 
\family typewriter
p
\family default
.
 The first vector should be red; successive vectors should shift increasingly
 towards blue, until the last one is completely blue.
 Here's how I'd suggest shifting from red to 
\emph on
green:
\emph default

\begin_inset Newline newline
\end_inset


\family typewriter

\begin_inset space \hspace{}
\length 2em
\end_inset

for i in range(len(L)):
\begin_inset Newline newline
\end_inset


\begin_inset space \hspace{}
\length 4em
\end_inset

p += plot(L[i],color=((10-i)/10,i/10,0),zorder=-i)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Use a 
\series bold
for
\series default
 loop to add a plot of each vector in 
\family typewriter
L
\family default
 to 
\family typewriter
q
\family default
.
 Vectors should shift from purple (red and blue) to yellow (red and yellow).
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 Show 
\family typewriter
p
\family default
 in one cell; show q in another.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
9.
 Describe how the result is consistent with the discussion of eigenvalues
 and eigenvectors on p.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand pageref
reference "page: evecs and evals"

\end_inset

.
 If it isn't clear what we mean, try adjusting the 
\family typewriter
xmin
\family default
, 
\family typewriter
xmax
\family default
, 
\family typewriter
ymin
\family default
, 
\family typewriter
ymax
\family default
 values to see a smaller portion of the graph.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Least squares averaging
\end_layout

\begin_layout Standard
A system of two linear equations in two variables will find an exact solution
 for exact data.
 Unfortunately, the real world often lacks exact data, so scientists and
 engineers compensate by collecing extra data and 
\begin_inset Quotes eld
\end_inset

averaging
\begin_inset Quotes erd
\end_inset

 the results.
 For instance, in the case of two unknowns 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, we might take 
\begin_inset Formula $m$
\end_inset

 measurements that correspond to the system
\begin_inset Formula 
\begin{align*}
x+a_{1}y & =b_{1}\\
x+a_{2}y & =b_{2}\\
 & \vdots\\
x+a_{m}y & =b_{m}.
\end{align*}

\end_inset

The best solution 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 minimizes the error; that is, it minimizes
\begin_inset Formula 
\[
\left\Vert \left(\begin{array}{c}
b_{1}\\
\vdots\\
b_{m}
\end{array}\right)-\left(\begin{array}{c}
x+a_{1}y\\
\vdots\\
x+a_{m}y
\end{array}\right)\right\Vert ^{2}=\left[b_{1}-\left(x+a_{1}y\right)\right]^{2}+\cdots+\left[b_{m}-\left(x+a_{m}y\right)\right]^{2}.
\]

\end_inset

We can minimize this in the following way: let
\begin_inset Formula 
\[
A=\left(\begin{array}{cc}
1 & a_{1}\\
\vdots & \vdots\\
1 & a_{m}
\end{array}\right)\quad,\qquad X=\left(\begin{array}{c}
x\\
y
\end{array}\right)\quad,\qquad B=\left(\begin{array}{c}
b_{1}\\
\vdots\\
b_{m}
\end{array}\right).
\]

\end_inset

The system of equations above translates to
\begin_inset Formula 
\[
AX=B.
\]

\end_inset

If we multiply both sides on the left by 
\begin_inset Formula $A^{T}$
\end_inset

, we have
\begin_inset Formula 
\[
\left(A^{T}A\right)X=A^{T}B.
\]

\end_inset

The product of 
\begin_inset Formula $A^{T}$
\end_inset

 and 
\begin_inset Formula $A$
\end_inset

 is a square matrix.
 If at least two points 
\begin_inset Formula $\left(a_{i},b_{i}\right)$
\end_inset

 have distinct 
\begin_inset Formula $x$
\end_inset

-coordinates, the matrix is invertible, and we can solve it by multiplying
 on both sides:
\begin_inset Formula 
\[
X=\left(A^{T}A\right)^{-1}A^{T}B.
\]

\end_inset

It can be shown that this 
\begin_inset Formula $X$
\end_inset

 minimizes the error (though we will not show it).
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write pseudocode for a procedure that accepts two lists of corresponding
 measurements 
\begin_inset Formula $a_{1},\ldots a_{m}$
\end_inset

 and 
\begin_inset Formula $b_{1},\ldots,b_{m}$
\end_inset

 and solves for 
\begin_inset Formula $x_{1},\ldots,x_{m}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Implement the pseudocode as a Sage procedure named 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
least_squares_2d()
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Write a Sage procedure that accepts two lists of corresponding measurements
 
\begin_inset Formula $a_{1},\ldots a_{m}$
\end_inset

 and 
\begin_inset Formula $b_{1},\ldots,b_{m}$
\end_inset

, plots each point 
\begin_inset Formula $\left(a_{i},b_{i}\right)$
\end_inset

, and plots the line that lies along the solution vector 
\begin_inset Formula $\left(x_{0},y_{0}\right)$
\end_inset

.
 Optionally, the procedure should accept two additional arguments 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color_points
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
color_line
\end_layout

\end_inset

, which respectively indicate the colors of the points and the color of
 the line.
 Be sure to use Sage's 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
min()
\end_layout

\end_inset

 and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
max()
\end_layout

\end_inset

 commands to set 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymin
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ymax
\end_layout

\end_inset

, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

, and 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
xmax
\end_layout

\end_inset

 appropriately.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Bareiss' Method
\end_layout

\begin_layout Standard
The Bareiss method to compute a determinant can be describe in pseudocode
 as follows:
\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Bareiss_determinant
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
an 
\begin_inset Formula $n\times n$
\end_inset

 matrix 
\begin_inset Formula $M$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\det M$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $D$
\end_inset

 be a copy of 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $a=1$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $k\in\left\{ 1,\ldots,n-1\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $i\in\left\{ k+1,\ldots,n\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $j\in k+1,\ldots,n$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $d_{i,j}=\frac{d_{i,j}d_{k,k}-d_{i,k}d_{k,j}}{a}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $a=d_{k,k}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $D_{n,n}$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
\noindent
1.
 Implement this pseudocode as a Sage program, and test it on the following
 matrices.
 When it produces a result, is the result actually correct? If it doesn't
 produce a result, what exactly does it do? In this latter case, study the
 entries of the matrix to see what goes wrong.
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(a) 
\begin_inset Formula $M=\left(\begin{array}{rrr}
3 & 2 & 1\\
5 & 4 & 3\\
6 & 3 & 4
\end{array}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(b)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $M=\left(\begin{array}{rrrr}
1 & -4 & 1 & 2\\
-1 & 4 & 4 & 1\\
3 & 3 & 3 & 4\\
2 & 5 & 2 & -1
\end{array}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(c) 
\begin_inset Formula $M=\left(\begin{array}{rrrr}
1 & 2 & 3 & 4\\
0 & 1 & 1 & 1\\
1 & 2 & 1 & 2\\
1 & 1 & 3 & 3
\end{array}\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
2.
 As with the Gaussian method, we can salvage a computation of the Bareiss
 algorithm when one encounters failure — and in more or less the same way.
 Modify your Bareiss implementation to take this into account, then test
 it on the three matrices again to make sure it behaves correctly.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Dodgson's Method
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
\begin_inset CommandInset label
LatexCommand label
name "exc: Dodgson's method"

\end_inset

Dodgson's Method is an 
\begin_inset Quotes eld
\end_inset

intuitively easy
\begin_inset Quotes erd
\end_inset

 way to compute a determinant.
\begin_inset Foot
status open

\begin_layout Plain Layout
Named for its inventor, Charles Lutwidge Dodgson, a deacon of the Church
 of England who also held a chair in mathematics.
 He is better known for a pair of children's books he wrote under the pen
 name 
\begin_inset Quotes eld
\end_inset

Lewis Carroll,
\begin_inset Quotes erd
\end_inset

 
\emph on
Alice and Wonderland
\emph default
 and 
\emph on
Alice Through the Looking Glass
\emph default
.
\end_layout

\end_inset

 The following pseudocode describes it precisely.
 (Here, numbering of rows and columns starts at
\begin_inset space ~
\end_inset

1, rather than at
\begin_inset space ~
\end_inset

0 as in Sage.)
\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
Dodgsons_method
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $M$
\end_inset

, an 
\begin_inset Formula $n\times n$
\end_inset

 matrix
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\det M$
\end_inset


\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $L$
\end_inset

 be an 
\begin_inset Formula $\left(n-1\right)\times\left(n-1\right)$
\end_inset

 matrix of 1's
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $i\in\left\{ 1,\ldots,n-1\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $m$
\end_inset

 be the number of rows of 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $N$
\end_inset

 be an 
\begin_inset Formula $\left(m-1\right)\times\left(m-1\right)$
\end_inset

 matrix
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $j\in\left\{ 1,\ldots,m-1\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $k\in\left\{ 1,\ldots,m-1\right\} $
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $N_{j,k}=\nicefrac{\left(M_{j,k}\times M_{j+1,k+1}-M_{j+1,k}\times M_{j,k+1}\right)}{L_{j,k}}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $L$
\end_inset

 be the 
\begin_inset Formula $\left(m-2\right)\times\left(m-2\right)$
\end_inset

 submatrix of 
\begin_inset Formula $M$
\end_inset

 starting in row
\begin_inset space ~
\end_inset

2, column
\begin_inset space ~
\end_inset

2
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $M$
\end_inset

 with 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Implement this pseudocode as a Sage program, and test it on the following
 matrices.
 (Something will go wrong with one of them.)
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(a) 
\begin_inset Formula $M=\left(\begin{array}{rrr}
3 & 2 & 1\\
5 & 4 & 3\\
6 & 3 & 4
\end{array}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(b)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $M=\left(\begin{array}{rrrr}
1 & -4 & 1 & 2\\
-1 & 4 & 4 & 1\\
3 & 3 & 3 & 4\\
2 & 5 & 2 & -1
\end{array}\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(c) 
\begin_inset Formula $M=\left(\begin{array}{rrrr}
1 & 2 & 3 & 4\\
0 & 1 & 1 & 1\\
1 & 2 & 1 & 2\\
1 & 1 & 3 & 3
\end{array}\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
2.
 When it produces a result, is the result actually correct?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 If it doesn't produce a result, what exactly does it do?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 In this latter case, try to perform the computation by hand.
 Explain what goes wrong.
\begin_inset Foot
status open

\begin_layout Plain Layout
Don't pursue the temptation to fix it unless you want a challenging research
 project.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Discrete Mathematics
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
One-to-one functions
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
In this lab, we view a dictionary as a map or function from a set 
\begin_inset Formula $A$
\end_inset

, the 
\series bold
domain
\series default
, the set of the dictionary's keys, to another set 
\begin_inset Formula $B$
\end_inset

, the 
\series bold
range
\series default
, sometimes called the 
\series bold
codomain
\series default
.
 The range may actually contains more elements than those than appear in
 the dictionary's values.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write a Sage procedure which accepts a dictionary 
\begin_inset Formula $D$
\end_inset

 as input and returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if 
\begin_inset Formula $D$
\end_inset

 is a one-to-one function and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Write a Sage procedure which accepts a dictionary 
\begin_inset Formula $D$
\end_inset

 as input and returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if 
\begin_inset Formula $D$
\end_inset

 is a one-to-one function; if not, it returns 
\emph on
both
\emph default
 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 
\emph on
and
\emph default
 a counterexample.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Write a Sage procedure which accepts a dictionary 
\begin_inset Formula $D$
\end_inset

 and a set 
\begin_inset Formula $B$
\end_inset

 as inputs and returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if 
\begin_inset Formula $D$
\end_inset

 is onto 
\begin_inset Formula $B$
\end_inset

, and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 otherwise.
 In the latter case, it should also return all elements of 
\begin_inset Formula $B$
\end_inset

 that are not values of 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Write a Sage procedure which accepts a dictionary 
\begin_inset Formula $D$
\end_inset

 and a set 
\begin_inset Formula $B$
\end_inset

 as inputs and returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if 
\begin_inset Formula $D$
\end_inset

 is both one-to-one and onto 
\begin_inset Formula $B$
\end_inset

, and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 if not.
 In the latter case, it prints (not returns!) which property fails and the
 appropriate counterexample.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
The Set Game
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
The game Set consists of 81 cards, each of which has four properties:
\end_layout

\begin_layout Itemize
The number of objects on the card is 1, 2, or 3.
\end_layout

\begin_layout Itemize
The color of the object(s) is identical: red, green, or purple.
\end_layout

\begin_layout Itemize
The shading of the object(s) is identical: solid, striped, or empty.
\end_layout

\begin_layout Itemize
The shape of the object(s) is identical: diamonds, ovals, or squiggles.
\end_layout

\begin_layout Standard
Notice that each property has 3 possibilities, explaining why there are
 
\begin_inset Formula $81=3^{4}$
\end_inset

 cards.
\end_layout

\begin_layout Standard
The object of the game is to identify as many 
\begin_inset Quotes eld
\end_inset

sets
\begin_inset Quotes erd
\end_inset

 there are in a group of cards.
 A 
\begin_inset Quotes eld
\end_inset

set
\begin_inset Quotes erd
\end_inset

 is any collection of cards in which each property is the same or different.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write a Sage procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
make_cards()
\end_layout

\end_inset

 which creates and returns a list of all the cards.
 Each card should be a tuple of four integers, where each integer indicates
 the property.
 Thus, 
\begin_inset Formula $\left(1,1,3,2\right)$
\end_inset

 would represent a card with
\begin_inset space ~
\end_inset

1 red empty oval.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Write a Sage procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
is_set()
\end_layout

\end_inset

 which accepts one argument, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L
\end_layout

\end_inset

, which is a list of
\begin_inset space ~
\end_inset

3 cards.
 It returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
L
\end_layout

\end_inset

 forms a set, and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 otherwise.
 You may want to have this procedure call other procedures which test whether
 a property is the same among all cards or different among all cards.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 In a new cell, type 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
import itertools
\end_layout

\end_inset

.
 Write a Sage procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
has_set()
\end_layout

\end_inset

 which accepts one argument, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
B
\end_layout

\end_inset

, a list of at least
\begin_inset space ~
\end_inset

3 cards, and returns 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 if 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
B
\end_layout

\end_inset

 has a set, and 
\begin_inset Flex Sage Constant
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 otherwise.
 You can use the command 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
BI = itertools.combinations(B,3)
\end_layout

\end_inset

 to create an iterator that will choose all possible combinations of
\begin_inset space ~
\end_inset

3 cards from 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
B
\end_layout

\end_inset

.
 You can then loop over 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
BI
\end_layout

\end_inset

 using a 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
for
\end_layout

\end_inset

 loop.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Write a Sage procedure 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
prob_set_in(N)
\end_layout

\end_inset

 which takes an integer of at least
\begin_inset space ~
\end_inset

3 and returns the probability that a randomly selected board of size 
\begin_inset Formula $N$
\end_inset

 contains a set.
 You will not want to try this on a large value of 
\begin_inset Formula $N$
\end_inset

, as it will take a 
\series bold
\emph on
very long time
\series default
\emph default
 to run.
 Test it only with 
\begin_inset Formula $N=3$
\end_inset

 (a few seconds, max) and 
\begin_inset Formula $N=4$
\end_inset

 (a couple of minutes, max).
 You can use the command 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
CN = itertools.combinations(CL,N)
\end_layout

\end_inset

 to create an iterator that will choose all possible combinations of
\begin_inset space ~
\end_inset


\begin_inset Formula $N$
\end_inset

 cards from a list 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
CL
\end_layout

\end_inset

 (in this case, a list of cards).
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
The number of ways to select 
\begin_inset Formula $m$
\end_inset

 elements from a set of 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Suppose you have a bag with 
\begin_inset Formula $n$
\end_inset

 distinct objects, and you want to select 
\begin_inset Formula $m$
\end_inset

 of them.
 Such a choice of balls is called a 
\emph on
combination
\emph default
, as opposed to a 
\emph on
permutation
\emph default
 where order matters.
 There are many applications where we want to count the number of ways to
 select 
\begin_inset Formula $m$
\end_inset

 balls from a bag of 
\begin_inset Formula $n$
\end_inset

 distinct objects.
\begin_inset Foot
status open

\begin_layout Plain Layout
\noindent
For instance, the PowerBall lottery awards prizes according to whether one
 selects the same five numbered balls out of
\begin_inset space ~
\end_inset

69 total balls as are selected on a TV show, not necessarily in the same
 order.
 (There's another criterion as well, but at the very least one has to know
 the number of ways to select
\begin_inset space ~
\end_inset

5 of
\begin_inset space ~
\end_inset

69 balls.
\end_layout

\end_inset

 We write this as 
\begin_inset Formula $_{n}C_{m}$
\end_inset

 or 
\begin_inset Formula $\binom{n}{m}$
\end_inset

.
 The formula for this value is
\begin_inset Formula 
\[
\binom{n}{m}=\frac{n!}{m!\left(n-m\right)!}.
\]

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Write a Sage procedure that accepts as input 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

 and computes 
\begin_inset Formula $\binom{n}{m}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Use your procedure to compute 
\begin_inset Formula $\binom{n}{m}$
\end_inset

 for 
\begin_inset Formula $n=2,3,\ldots,8$
\end_inset

 and 
\begin_inset Formula $m=0,\ldots,n$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Do you notice any pattern to the numbers? 
\emph on
Hint:
\emph default
 Look back at Pascal's Triangle.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Describe how one could use combinations to implement a procedure that computes
 Pascal's Triangle 
\emph on
without
\emph default
 using recursion.
\end_layout

\begin_layout Chapter*
Algebra and Number Theory
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Properties of finite rings
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Create a new worksheet.
 Set the title to, 
\begin_inset Quotes eld
\end_inset

Lab: Properties of finite rings
\begin_inset Quotes erd
\end_inset

.
 Add other information to identify you, as necessary.
\end_layout

\begin_layout Standard
Reread the Section on 
\begin_inset Quotes eld
\end_inset

Mathematical structures in Sage
\begin_inset Quotes erd
\end_inset

 in the chapter titled, 
\begin_inset Quotes eld
\end_inset

Basic Computations.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Create a section labeled, 
\begin_inset Quotes eld
\end_inset

Modular arithmetic: demonstration,
\begin_inset Quotes erd
\end_inset

 then:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Define a ring 
\begin_inset Formula $R$
\end_inset

 to be 
\begin_inset Formula $\mathbb{Z}_{10}$
\end_inset

, the finite ring of 
\begin_inset Formula $10$
\end_inset

 elements.
\begin_inset Newline newline
\end_inset

(
\emph on
Hint:
\emph default
 The revised notes show a simpler way to do this than the in-class demonstration.
)
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Define 
\begin_inset Formula $m$
\end_inset

 to be the value of 
\begin_inset Formula $2$
\end_inset

 in 
\begin_inset Formula $R$
\end_inset

, and compute 
\begin_inset Formula $1\times m$
\end_inset

, 
\begin_inset Formula $2\times m$
\end_inset

, 
\begin_inset Formula $3\times m$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $10\times m$
\end_inset

.
\begin_inset Newline newline
\end_inset

(
\emph on
Hint:
\emph default
 If your answer to the last product is 20, you're doing it wrong.
 You have to convert
\begin_inset space ~
\end_inset

2 to a value of the ring 
\begin_inset Formula $R$
\end_inset

.
 The notes show how to do that.)
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) Define 
\begin_inset Formula $n$
\end_inset

 to be the value of 
\begin_inset Formula $3$
\end_inset

 in 
\begin_inset Formula $R$
\end_inset

, and compute 
\begin_inset Formula $1\times n$
\end_inset

, 
\begin_inset Formula $2\times n$
\end_inset

, 
\begin_inset Formula $3\times n$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $10\times n$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(d) Define 
\begin_inset Formula $r$
\end_inset

 to be the value of 
\begin_inset Formula $5$
\end_inset

 in 
\begin_inset Formula $R$
\end_inset

, and compute 
\begin_inset Formula $1\times r$
\end_inset

, 
\begin_inset Formula $2\times r$
\end_inset

, 
\begin_inset Formula $3\times r$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $10\times r$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(e) Define 
\begin_inset Formula $s$
\end_inset

 to be the value of 
\begin_inset Formula $7$
\end_inset

 in 
\begin_inset Formula $R$
\end_inset

, and compute 
\begin_inset Formula $1\times s$
\end_inset

, 
\begin_inset Formula $2\times s$
\end_inset

, 
\begin_inset Formula $3\times s$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $10\times s$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(f) Define 
\begin_inset Formula $t$
\end_inset

 to be the value of 9 in 
\begin_inset Formula $R$
\end_inset

, and compute 
\begin_inset Formula $1\times t$
\end_inset

, 
\begin_inset Formula $2\times t$
\end_inset

, 
\begin_inset Formula $3\times t$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $10\times t$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
3.
 For the following, write your answer into a 
\emph on
text
\emph default
 box at the end of the worksheet.
 The top of the textbox should have the heading, 
\begin_inset Quotes eld
\end_inset

Modular arithmetic: analysis.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) Notice that 
\begin_inset Formula $10\times2=10\times3=\cdots=10\times9$
\end_inset

 in this ring.
 Why does that make sense, given the modulus?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) Which of 
\begin_inset Formula $m,n,r,s,t$
\end_inset

 lists 
\emph on
all
\emph default
 the numbers from 0 to 9?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(c) What property do the numbers you listed in (b) share that the other
 numbers do not?
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
The Chinese Remainder Clock
\end_layout

\begin_layout Standard
In the March 2017 
\emph on
College Mathematics Journal,
\emph default
 Antonella Perucca described a 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Chinese Remainder Clock"
target "http://antonellaperucca.net/CRC.html"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

 that diagrams the time using remainders from division.
\end_layout

\begin_layout Enumerate
For the hour 
\begin_inset Formula $h$
\end_inset

, let 
\begin_inset Formula $a,b$
\end_inset

 be the remainders from dividing 
\begin_inset Formula $h$
\end_inset

 by 3 and 4, respectively.
\end_layout

\begin_layout Enumerate
For the minute 
\begin_inset Formula $m$
\end_inset

, let 
\begin_inset Formula $c,d,e$
\end_inset

 be the remainders from dividing 
\begin_inset Formula $m$
\end_inset

 by 3, 4, and 5, respectively.
\end_layout

\begin_layout Enumerate
Draw five black concentric rings, marking:
\end_layout

\begin_deeper
\begin_layout Itemize
the first and third (from the center) with three equally-spaced empty circles,
\end_layout

\begin_layout Itemize
the second and fourth (from the center) with four equally-spaced empty circles,
 and
\end_layout

\begin_layout Itemize
the outermost with five equally-spaced empty circles.
\end_layout

\end_deeper
\begin_layout Enumerate
Finally, place
\end_layout

\begin_deeper
\begin_layout Itemize
a blue circle over the 
\begin_inset Formula $a$
\end_inset

th circle in the innermost ring (counting clockwise from the top),
\end_layout

\begin_layout Itemize
a blue circle over the 
\begin_inset Formula $b$
\end_inset

th circle in the second-innermost ring,
\end_layout

\begin_layout Itemize
a red circle over the 
\begin_inset Formula $c$
\end_inset

th circle in the third-innermost ring,
\end_layout

\begin_layout Itemize
a red circle over the 
\begin_inset Formula $d$
\end_inset

th circle in the fourth-innermost ring, and
\end_layout

\begin_layout Itemize
a red circle over the 
\begin_inset Formula $e$
\end_inset

th circle in the outermost ring.
\end_layout

\end_deeper
\begin_layout Standard
A theorem called the 
\series bold
Chinese Remainder Theorem 
\series default
tells us that this diagram gives a unique representation of the current
 time.
\end_layout

\begin_layout Standard
For example, suppose the current time is 5:22.
 Then 
\begin_inset Formula $a=2$
\end_inset

, 
\begin_inset Formula $b=1$
\end_inset

, 
\begin_inset Formula $c=1$
\end_inset

, 
\begin_inset Formula $d=2$
\end_inset

, and 
\begin_inset Formula $e=2$
\end_inset

, resulting in the diagram
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/assignment_gfx/crc_5_22.pdf
	height 2in

\end_inset


\end_layout

\begin_layout Standard
\noindent
Write a Sage program that, given an hour 
\begin_inset Formula $h$
\end_inset

 and a minute 
\begin_inset Formula $m$
\end_inset

, produces the corresponding Chinese Remainder Clock.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
The geometry of radical roots
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Remark*
In this assignment, we view all solutions as complex numbers 
\begin_inset Formula $a+bi$
\end_inset

, where 
\begin_inset Formula $i^{2}=-1$
\end_inset

.
 When you are asked to 
\begin_inset Quotes eld
\end_inset

plot 
\begin_inset Formula $a+bi$
\end_inset

 on the complex plane,
\begin_inset Quotes erd
\end_inset

 plot it as the point 
\begin_inset Formula $\left(a,b\right)$
\end_inset

.
 So, for instance, a plot of the complex number 
\begin_inset Formula $2+3i$
\end_inset

 would give you the point 
\begin_inset Formula $\left(2,3\right)$
\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename graphics/assignment_gfx/complex_number_in_plane.pdf
	lyxscale 40
	scale 20

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 99.
1.
 Create a new worksheet.
 Set the title to, 
\begin_inset Quotes eld
\end_inset

Lab: The geometry of radical roots
\begin_inset Quotes erd
\end_inset

.
 Add other information to identify you, as necessary.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
2.
 Use Sage to solve the equation 
\begin_inset Formula $x^{2}-1=0$
\end_inset

.
 Plot all solutions on one complex plane.
 It's not very interesting, is it?
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
3.
 Use Sage to solve the equation 
\begin_inset Formula $x^{3}-1=0$
\end_inset

.
 Plot all solutions on one complex plane, not the same as before.
 This is a little more interesting.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
4.
 Use Sage to solve the equation 
\begin_inset Formula $x^{4}-1=0$
\end_inset

.
 Plot all solutions on a third complex plane.
 This might be a little boring, again.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
5.
 Use Sage to solve the equation 
\begin_inset Formula $x^{5}-1=0$
\end_inset

.
 Plot all solutions on a fourth complex plane.
 (You will probably need to use 
\family typewriter
real_part()
\family default
 and 
\family typewriter
imag_part()
\family default
 here.) This figure should be arresting, especially if you connect the dots,
 but don't do that; just plot the points, note the result, and move on.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
6.
 Can you guess? Yep, use Sage to solve the equation 
\begin_inset Formula $x^{6}-1=0$
\end_inset

.
 Plot all solutions on yet another complex plane.
 This is probably getting boring, if only because you can probably guess
 the result not only of this one, but also of\SpecialChar ldots

\end_layout

\begin_layout Labeling
\labelwidthstring 99.
7.
 Use Sage to solve the equation 
\begin_inset Formula $x^{7}-1=0$
\end_inset

.
 Plot all solutions on another complex plane.
 If you understand the geometric pattern, move on; if not, complain.
 Or, if you want to save time, you can probably guess that I'll tell you
 to plot the solutions for a few more examples of 
\begin_inset Formula $x^{n}-1=0$
\end_inset

, only with larger values of 
\begin_inset Formula $n$
\end_inset

.
 Sooner or later, you should perceive a geometric pattern.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
8.
 In an HTML cell, explain why the geometric pattern of the images justifies
 the assertion that the solutions to 
\begin_inset Formula $x^{n}-1$
\end_inset

 all have the form
\begin_inset Formula 
\[
\cos\frac{2\pi k}{n}+i\sin\frac{2\pi k}{n}\;.
\]

\end_inset

 Be sure to explain what on earth 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $n$
\end_inset

 have to do with it.
 If it helps, look first at the parametric plot of 
\begin_inset Formula $\cos\left(2\pi t\right)+i\sin\left(2\pi t\right)$
\end_inset

 for 
\begin_inset Formula $t\in\left[0,1\right]$
\end_inset

, remembering as before that you plot 
\begin_inset Formula $a+bi$
\end_inset

 as 
\begin_inset Formula $\left(a,b\right)$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
Before you raise your hand in panic, take a moment, then a deep breath,
 and think back to the meaning of sine and cosine.
 Look in a textbook if you have to.
 You can do this, honest!
\end_layout

\begin_layout Standard
Likewise, don't ask me how to create a parametric plot.
 
\emph on
We went over it,
\emph default
 so if you don't remember, look it up in the notes.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
9.
 Define 
\begin_inset Formula $\omega=\cos\frac{2\pi}{6}+i\sin\frac{2\pi}{6}$
\end_inset

.
 Using a 
\series bold
for
\series default
 loop in Sage, compute 
\begin_inset Formula $\omega$
\end_inset

, 
\begin_inset Formula $\omega^{2}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $\omega^{6}$
\end_inset

.
 Plot each number on the complex plane, and describe how the result is consisten
t with your answers to #6 and #8.
\end_layout

\begin_layout Labeling
\labelwidthstring 99.
10.
 Now suppose 
\begin_inset Formula $\omega=\cos\frac{2\pi}{n}+i\sin\frac{2\pi}{n}$
\end_inset

.
 
\emph on
By hand,
\emph default
 work out an explanation why
\begin_inset Formula 
\begin{equation}
\omega^{k}=\cos\frac{2\pi k}{n}+i\sin\frac{2\pi k}{n}.\label{eq: complex roots of unity}
\end{equation}

\end_inset

Type this explanation in your Sage worksheet, using 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash
 
\end_layout

\end_inset

 to make it all purty-like.
 If you know proof by induction, that will work.
 Otherwise, take the following approach:
\end_layout

\begin_deeper
\begin_layout Itemize
Explain why equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq: complex roots of unity"

\end_inset

 is true for 
\begin_inset Formula $k=1$
\end_inset

.
\end_layout

\begin_layout Itemize
Expand 
\begin_inset Formula $\omega^{2}$
\end_inset

 and use some trigonometric identities you're supposed to remember to simplify
 to the value of equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq: complex roots of unity"

\end_inset

 for 
\begin_inset Formula $k=2$
\end_inset

.
\end_layout

\begin_layout Itemize
Do the same for 
\begin_inset Formula $\omega^{3}$
\end_inset

.
\end_layout

\begin_layout Itemize
Finally, point to a pattern in the previous two steps that you can repeat
 
\emph on
ad infinitum
\emph default
, so that if equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq: complex roots of unity"

\end_inset

 is true for 
\emph on
some
\emph default
 value of 
\begin_inset Formula $k$
\end_inset

, it's also true for the 
\emph on
next
\emph default
 value of 
\begin_inset Formula $k$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
11.
 Time to up our game.
 Experiment with 
\begin_inset Formula $x^{n}-a$
\end_inset

 for some nice values of 
\begin_inset Formula $a$
\end_inset

 and a sufficiently large value of 
\begin_inset Formula $n$
\end_inset

.
 What do you see? Formulate a conjecture as to the geometric form of these
 solutions.
\end_layout

\begin_deeper
\begin_layout Standard
(The term 
\begin_inset Quotes eld
\end_inset

nice values of 
\begin_inset Formula $a$
\end_inset


\begin_inset Quotes erd
\end_inset

 it can mean one of two things.
 
\emph on
First,
\emph default
 it can mean numbers of the form 
\begin_inset Formula $a=b^{n}$
\end_inset

; for instance, if 
\begin_inset Formula $n=6$
\end_inset

, then you could let 
\begin_inset Formula $b=3$
\end_inset

, and you would have 
\begin_inset Formula $a=3^{6}=729$
\end_inset

.
 You'd then work with the equation 
\begin_inset Formula $x^{6}-729$
\end_inset

, which is not as scary as it looks.
 Honest! 
\emph on
Second,
\emph default
 you could take the 
\begin_inset CommandInset href
LatexCommand href
name "Bob Ross"
target "http://en.wikipedia.org/wiki/Bob_Ross"
literal "false"

\end_inset

 approach, in which case any number is a nice value because, really, all
 numbers are nice, happy numbers.
 That's harder, though.)
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 99.
12.
 As before, make it all look nice, with sectioning, commentary in text boxes,
 at least a 
\emph on
little
\emph default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

, etc.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Lucas sequences
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
The 
\series bold
Fibonacci sequence
\series default
 is defined as
\begin_inset Formula 
\[
f_{1}=1,\quad f_{2}=1,\quad f_{n+2}=f_{n}+f_{n+1}.
\]

\end_inset

The Fibonacci numbers are one example of what mathematicians now call a
 
\series bold

\begin_inset CommandInset href
LatexCommand href
name "Lucas sequence"
target "https://en.wikipedia.org/wiki/Lucas_sequence"
literal "false"

\end_inset


\series default
.
 (More information at the link.) We usually define Lucas sequences recursively,
 but you can find a 
\begin_inset Quotes eld
\end_inset

closed formula
\begin_inset Quotes erd
\end_inset

 in a manner similar to what we did in class for the Fibonacci sequence.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

, and 
\begin_inset Formula $d$
\end_inset

 be the first two numbers of your student ID.
 If any two numbers are the same, change them so that all four numbers differ.
 The sequence
\begin_inset Formula 
\[
\ell_{1}=a,\quad\ell_{2}=b,\quad\ell_{n+2}=c\ell_{n}+d\ell_{n+1}
\]

\end_inset

is a Lucas sequence that we'll call the 
\begin_inset Quotes eld
\end_inset


\emph on
[insert your last name here]
\emph default
 sequence.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 In a Sage HTML cell, state the definition of the 
\emph on
[insert your last name here]
\emph default
 sequence.
 Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

!
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 In the same cell, list the first five numbers of the 
\emph on
[insert your name here]
\emph default
 sequence.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Define a matrix 
\begin_inset Formula $L$
\end_inset

 and a vector 
\begin_inset Formula $\mathbf{v}$
\end_inset

 which generate the sequence.
 For instance, if the first four digits of your ID are 
\begin_inset Formula $1$
\end_inset

, 
\begin_inset Formula $2$
\end_inset

, 
\begin_inset Formula $8$
\end_inset

, and 
\begin_inset Formula $9$
\end_inset

 then
\begin_inset Formula 
\[
L=\left(\begin{array}{cc}
9 & 8\\
1 & 0
\end{array}\right)\quad\textrm{and}\quad\mathbf{v}=\left(\begin{array}{c}
2\\
1
\end{array}\right).
\]

\end_inset

Compute 
\begin_inset Formula $L\mathbf{v}$
\end_inset

, 
\begin_inset Formula $L^{2}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $L^{3}\mathbf{v}$
\end_inset

, 
\begin_inset Formula $L^{4}\mathbf{v}$
\end_inset

, and 
\begin_inset Formula $L^{5}\mathbf{v}$
\end_inset

 in Sage, and compare the results to #2.
 If they differ, either #2 or #3 is wrong.
 
\emph on
Or
\emph default
 there is a typo.
 Ask and/or fix before continuing.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Compute 
\begin_inset Formula $L$
\end_inset

's 
\begin_inset Quotes eld
\end_inset

eigendata.
\begin_inset Quotes erd
\end_inset

 Extract the eigenvectors and eigenvalues and have Sage convert them to
 
\emph on
radical
\emph default
 form.
 (Numbers should no longer end in question marks.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Construct matrices 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $\Lambda$
\end_inset

 such that 
\begin_inset Formula $L=Q\Lambda Q^{-1}$
\end_inset

.
 Use Sage to verify that 
\begin_inset Formula $L=Q\Lambda Q^{-1}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Construct the matrix 
\begin_inset Formula $M=\left(Q\Lambda Q^{-1}\right)^{n}$
\end_inset

.
\emph on

\begin_inset Newline newline
\end_inset

Hint:
\emph default
 The lecture notes discuss this; it requires some knowledge of linear algebra.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Use the product of 
\begin_inset Formula $M$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

 to find the closed form of the 
\emph on
[insert your name here]
\emph default
 sequence.
\emph on

\begin_inset Newline newline
\end_inset

Hint:
\emph default
 Again, the notes should come in handy here if you need help.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
8.
 Use the closed form to compute the first five numbers of the 
\emph on
[insert your name here]
\emph default
 sequence, and compare your results to what you found in #2 and #3.
 If they differ, you have a problem or there is a typo; ask me and/or fix
 it!
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Introduction to Group Theory
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Background
\end_layout

\begin_layout Definition*
If a set 
\begin_inset Formula $S$
\end_inset

 and an operation 
\begin_inset Formula $\otimes$
\end_inset

 satisfy the 
\series bold
closure
\series default
, 
\series bold
associative
\series default
, 
\series bold
identity
\series default
, and 
\series bold
inverse
\series default
 properties, then we call 
\begin_inset Formula $S$
\end_inset

 a 
\series bold
group
\series default
 under 
\begin_inset Formula $\otimes$
\end_inset

.
 These properties are defined in the following way:
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
closure:
\emph default
 
\begin_inset Formula $x\otimes y\in S$
\end_inset

 for all 
\begin_inset Formula $x,y\in S$
\end_inset

;
\end_layout

\begin_layout Itemize

\emph on
associative:
\emph default
 
\begin_inset Formula $x\otimes\left(y\otimes z\right)=\left(x\otimes y\right)\otimes z$
\end_inset

 for all 
\begin_inset Formula $x,y,z\in S$
\end_inset

;
\end_layout

\begin_layout Itemize

\emph on
identity:
\emph default
 we can find 
\begin_inset Formula $\iota\in S$
\end_inset

 such that 
\begin_inset Formula $x\otimes\iota=x$
\end_inset

 and 
\begin_inset Formula $\iota\otimes x=x$
\end_inset

 for any 
\begin_inset Formula $x\in S$
\end_inset

;
\end_layout

\begin_layout Itemize

\emph on
inverse:
\emph default
 for any 
\begin_inset Formula $x\in S$
\end_inset

, we can find 
\begin_inset Formula $y\in S$
\end_inset

 such that 
\begin_inset Formula $x\otimes y=y\otimes x=\iota$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Example*
The integers 
\begin_inset Formula $\mathbb{Z}$
\end_inset

 form a group under addition, because
\end_layout

\begin_deeper
\begin_layout Itemize
adding any two integers gives you an integer (
\begin_inset Formula $x+y\in\mathbb{Z}$
\end_inset

 for all 
\begin_inset Formula $x,y\in\mathbb{Z}$
\end_inset

);
\end_layout

\begin_layout Itemize
addition of integers is associative;
\end_layout

\begin_layout Itemize
there is an additive identity (
\begin_inset Formula $x+0=x$
\end_inset

 and 
\begin_inset Formula $0+x=x$
\end_inset

 for all 
\begin_inset Formula $x\in\mathbb{Z}$
\end_inset

); and
\end_layout

\begin_layout Itemize
every integer 
\begin_inset Formula $x$
\end_inset

 has an additive inverse 
\emph on
that is also an integer
\emph default
 (
\begin_inset Formula $x+\left(-x\right)=\left(-x\right)+x=0$
\end_inset

).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Example*
The integers 
\begin_inset Formula $\mathbb{Z}$
\end_inset

 
\emph on
do not
\emph default
 form a group under multiplication, for two reasons:
\end_layout

\begin_deeper
\begin_layout Itemize
0 has no multiplicative inverse 
\begin_inset Formula $0^{-1}$
\end_inset

; and
\end_layout

\begin_layout Itemize
the other integers 
\begin_inset Formula $a$
\end_inset

 have multiplicative inverses 
\begin_inset Formula $\nicefrac{1}{a}$
\end_inset

, but 
\emph on
most are not integers
\emph default
.
 A group only satisfies the inverse property if it contains the inverses
 of each element.
\end_layout

\end_deeper
\begin_layout Standard
In this lab you will use pseudocode to write code to test whether a finite
 set is a group under 
\emph on
multiplication
\emph default
.
 You will then test it on three sets, two of which succeed, and one of which
 does not.
 A complication in this project is that the procedure has to depend on the
 operation, so you can't just write a procedure for one operation, only.
\end_layout

\begin_layout Subsection*
Pseudocode
\end_layout

\begin_layout Subsubsection*
Closure
\end_layout

\begin_layout Standard
We must check every pair 
\begin_inset Formula $x,y\in S$
\end_inset

.
 We can test whether this is true for 
\begin_inset Quotes eld
\end_inset

every
\begin_inset Quotes erd
\end_inset

 element of a finite set using definite loops.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
is_closed
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

, a finite set
\end_layout

\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\family typewriter
true
\family default
 if 
\begin_inset Formula $S$
\end_inset

 is closed under multiplication; 
\family typewriter
false
\family default
 otherwise
\end_layout

\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $s\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $t\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $st\not\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

print(
\begin_inset Quotes eld
\end_inset

fails closure for
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Formula $s$
\end_inset

, 
\begin_inset Formula $t$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\family typewriter
false
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\family typewriter
true
\end_layout

\begin_layout Subsubsection*
Associative
\end_layout

\begin_layout Standard
We must check every triplet 
\begin_inset Formula $x,y,z\in S$
\end_inset

, requiring definite loops.
 The pseudocode is an exercise.
\end_layout

\begin_layout Subsubsection*
Identity
\end_layout

\begin_layout Standard
We can test whether 
\begin_inset Quotes eld
\end_inset

we can find
\begin_inset Quotes erd
\end_inset

 an identity using a special variable called a 
\series bold
flag
\series default
 with Boolean value (sometimes called a 
\series bold
signal
\series default
).
 We adjust the flag's value depending on whether a candidate continues to
 satisfy a known property.
 When the loop ends, the flag indicates whether we're done (i.e., whether
 we've found an identity).
 The quantifiers' structure (
\begin_inset Quotes eld
\end_inset

we can find\SpecialChar ldots
 for any\SpecialChar ldots

\begin_inset Quotes erd
\end_inset

) requires the pseudocode to presume an identity exists until proved otherwise.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
find_identity
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

, a finite set
\end_layout

\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

an identity, if it can find it; otherwise, 
\begin_inset Formula $\emptyset$
\end_inset


\end_layout

\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $s\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
maybe_identity
\emph default
 = 
\family typewriter
true
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $t\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $st\neq t$
\end_inset

 
\series bold
or
\series default
 
\begin_inset Formula $ts\neq t$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
maybe_identity
\emph default
 = 
\family typewriter
false
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
maybe_identity
\emph default
 = 
\family typewriter
true
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $s$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

print(
\begin_inset Quotes eld
\end_inset

no identity
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $\emptyset$
\end_inset


\end_layout

\begin_layout Subsubsection*
Inverse
\end_layout

\begin_layout Standard
We are looking for an inverse for each element.
 Here, again, we use a flag a 
\series bold
flag
\series default
, as the logic requires us to find an inverse.
 Unlike the previous pseudocode, we presume an inverse 
\emph on
does not
\emph default
 exist until proved otherwise; this is because the order of the quantifiers
 is switched (
\begin_inset Quotes eld
\end_inset

for any\SpecialChar ldots
 we can find\SpecialChar ldots

\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

we can find\SpecialChar ldots
 for any\SpecialChar ldots

\begin_inset Quotes erd
\end_inset

).
 This pseudocode also requires that we identify the set's identity in the
 input.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
has_inverses
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

, a finite set
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset Formula $\iota$
\end_inset

, an identity of 
\begin_inset Formula $S$
\end_inset

 under multiplication
\end_layout

\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\family typewriter
true
\family default
 if every element of 
\begin_inset Formula $S$
\end_inset

 has a multiplicative inverse; 
\family typewriter
false
\family default
 otherwise
\end_layout

\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $s\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
found_inverse
\emph default
 = 
\family typewriter
false
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
for
\series default
 
\begin_inset Formula $t\in S$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $st=\iota$
\end_inset

 
\series bold
and
\series default
 
\begin_inset Formula $ts=\iota$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\emph on
found_inverse
\emph default
 = 
\family typewriter
true
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
found_inverse
\emph default
 = 
\family typewriter
false
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

print(
\begin_inset Quotes eld
\end_inset

no inverse for
\begin_inset Quotes erd
\end_inset

, s)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\family typewriter
false
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\family typewriter
true
\end_layout

\begin_layout Subsubsection*
Putting them together
\end_layout

\begin_layout Standard
This pseudocode tests whether a set is a group under an operation by invoking
 all four algorithms defined above.
\end_layout

\begin_layout Pseudocode

\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
is_a_group
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

, a finite set
\end_layout

\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\family typewriter
true
\family default
 if 
\begin_inset Formula $S$
\end_inset

 is a group under multiplication; 
\family typewriter
false
\family default
 otherwise
\end_layout

\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
is_closed
\emph default
(
\begin_inset Formula $S$
\end_inset

) 
\series bold
and
\series default
 
\emph on
is_associative
\emph default
(
\begin_inset Formula $S$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $\iota$
\end_inset

 =
\emph on
 find_identity
\emph default
(
\begin_inset Formula $S$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $\iota\neq\emptyset$
\end_inset

 
\series bold
and
\series default
 
\emph on
has_inverses
\emph default
(
\begin_inset Formula $S$
\end_inset

, 
\begin_inset Formula $\iota$
\end_inset

)
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\family typewriter
true
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset


\series bold
return
\series default
 
\family typewriter
false
\end_layout

\begin_layout Subsection*
Your tasks
\end_layout

\begin_layout Standard
Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\backslash
 
\end_layout

\end_inset

 in your Sage worksheets wherever appropriate.

\series bold
 Two of the sets in 3–5 are groups; one is not.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Study the pseducode for closure, and write pseudocode for an algorithm
 named 
\emph on
is_associative
\emph default
 that tests whether a set 
\begin_inset Formula $S$
\end_inset

 is associative under multiplication.
 You essentially modify the pseudocode for 
\emph on
is_closed
\emph default
 with a third loop, and change the condition for the 
\series bold
if
\series default
 appropriately.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Write Sage code for each of the five algorithms defined above in pseudocode.
 You will test them on the following sets.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Define a ring 
\begin_inset Formula $R$
\end_inset

 to be 
\begin_inset Formula $\mathbb{Z}_{101}$
\end_inset

, the finite ring of 101 elements.
 (You will want to revisit Lab #2 if you forgot how to do this.) Let 
\begin_inset Formula $S=\left\{ 1,2,\ldots,100\right\} \subsetneq R$
\end_inset

; that is, 
\begin_inset Formula $S$
\end_inset

 should include every element of 
\begin_inset Formula $R$
\end_inset

 
\emph on
except
\emph default

\begin_inset space ~
\end_inset

0.
 Be sure to define 
\begin_inset Formula $S$
\end_inset

 using elements of 
\begin_inset Formula $R$
\end_inset

, and not plain integers.
 (Again, you will want to revisit Lab #2 if you forgot how to do this.) Test
 your Sage code on 
\begin_inset Formula $S$
\end_inset

; is 
\begin_inset Formula $S$
\end_inset

 a group under multiplication? If not, which property fails?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Redefine the ring 
\begin_inset Formula $R$
\end_inset

 to be 
\begin_inset Formula $\mathbb{Z}_{102}$
\end_inset

, the finite ring of 102 elements.
 Let 
\begin_inset Formula $S=\left\{ 1,2,\ldots,101\right\} \subsetneq R$
\end_inset

; that is, 
\begin_inset Formula $S$
\end_inset

 should include every element of 
\begin_inset Formula $R$
\end_inset

 
\emph on
except
\emph default

\begin_inset space ~
\end_inset

0.
 Be sure to define 
\begin_inset Formula $S$
\end_inset

 using elements of 
\begin_inset Formula $R$
\end_inset

, and not plain integers.
 Test your Sage code on 
\begin_inset Formula $S$
\end_inset

; is 
\begin_inset Formula $S$
\end_inset

 a group under multiplication? If not, which property fails?
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Define the matrices
\begin_inset Formula 
\begin{alignat*}{2}
I_{2} & =\left(\begin{array}{cc}
1 & 0\\
0 & 1
\end{array}\right) & \mathbf{i} & =\left(\begin{array}{rr}
i & 0\\
0 & -i
\end{array}\right)\\
\mathbf{j} & =\left(\begin{array}{rc}
0 & 1\\
-1 & 0
\end{array}\right)\qquad & \mathbf{k} & =\left(\begin{array}{rr}
0 & i\\
i & 0
\end{array}\right)
\end{alignat*}

\end_inset

and the set
\begin_inset Formula 
\[
Q=\left\{ I_{2},-I_{2},\mathbf{i},-\mathbf{i},\mathbf{j},-\mathbf{j},\mathbf{k},-\mathbf{k}\right\} .
\]

\end_inset

Test your Sage code on 
\begin_inset Formula $Q$
\end_inset

; is 
\begin_inset Formula $Q$
\end_inset

 a group under multiplication? If not, which property fails?
\end_layout

\begin_deeper
\begin_layout Remark*
This set is sometimes called the 
\series bold
set of quaternions
\series default
.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 9.
6.
 Using the matrices of problem #4, define the set
\begin_inset Formula 
\[
S=\left\{ I_{2},-I_{2},\mathbf{j},-\mathbf{j}\right\} .
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring (m)
(a) You've probably noticed that 
\begin_inset Formula $S\subseteq Q$
\end_inset

.
 Is 
\begin_inset Formula $S$
\end_inset

 also a group? If so, we call 
\begin_inset Formula $S$
\end_inset

 a 
\series bold
subgroup
\series default
 of 
\begin_inset Formula $Q$
\end_inset

.
 If not, which property fails?
\end_layout

\begin_layout Labeling
\labelwidthstring (m)
(b) The set 
\begin_inset Formula $S$
\end_inset

 actually consists of matrices of the form 
\begin_inset Formula $A$
\end_inset

 from Lab #6, Problem #1.
 Indicate in an HTML cell the correct value of 
\begin_inset Formula $a$
\end_inset

 for each matrix.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Coding theory and cryptography
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Two applications of algebra and number theory are 
\series bold
coding theory
\series default
 and 
\series bold
cryptography
\series default
:
\end_layout

\begin_layout Itemize
The aim of 
\emph on
coding theory
\emph default
 is transmit information 
\emph on
reliably,
\emph default
 detecting errors and, when possible, correcting them.
\end_layout

\begin_layout Itemize
The aim of 
\emph on
cryptography
\emph default
 is to transmit information 
\emph on
securely,
\emph default
 so that an eavesdropper can neither understand nor work out the meaning
 of the transmission.
\end_layout

\begin_layout Standard
To apply these mathematical ideas, both require a preliminary stage of transform
ing text into numbers, and vice versa.
 You will write two or more procedures to do help someone this; one will
 be interactive.
\end_layout

\begin_layout Standard
When transforming text into numbers, it is necessary first to group the
 text into conveniently-sized blocks.
 For instance, the phrase
\end_layout

\begin_layout Standard
\align center

\family typewriter
GET OUT OF DODGE
\end_layout

\begin_layout Standard
\noindent
can be grouped several different ways.
 One way is to group it into blocks of two:
\end_layout

\begin_layout Standard
\align center

\family typewriter
GE TO UT OF DO DG EX
\end_layout

\begin_layout Standard
\noindent
and another is to group it into blocks of four:
\end_layout

\begin_layout Standard
\align center

\family typewriter
GETO UTOF DODG EXXX
\family default
 .
\end_layout

\begin_layout Standard
\noindent
In both cases, the message's length does not divide the group's length evenly,
 so we pad the message with 
\family typewriter
X
\family default
's.
\end_layout

\begin_layout Standard
How does one do this? Python has a command called 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
ord()
\end_layout

\end_inset

 that lets you convert each 
\emph on
character
\emph default
 into a number.
 This command would convert our phrase into the numbers
\end_layout

\begin_layout Standard
\align center
71, 69, 84, 79, 85, 84, 79, 70, 68, 79, 68, 71, 69 .
\end_layout

\begin_layout Standard
\noindent
You'll notice I've removed the spaces, and haven't yet created the groups.
 How do we then group them? First, turn them into the numbers 0–25 by subtractin
g the number corresponding to 
\family typewriter
A
\family default
.
 That gives us
\end_layout

\begin_layout Standard
\align center
6, 4, 19, 14, 20, 19, 14, 5, 3, 14, 3, 6, 4 .
\end_layout

\begin_layout Standard
\noindent
To group them, we reason the following:
\end_layout

\begin_layout Itemize
We don't need lower-case letters or punctuation to get our meaning across.
\begin_inset Foot
status open

\begin_layout Plain Layout
Related trivia: Ancient written languages typically used all upper-case
 letters with no punctuation or even spacing.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Thus, every value to encode lies between 1 and 26.
\end_layout

\begin_layout Itemize
We can use a base-26 number system to encode any group of letters.
\end_layout

\begin_layout Standard
So, to encode a group of four letters with numerical values 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

, 
\begin_inset Formula $d$
\end_inset

, we can compute
\begin_inset Formula 
\[
m=a+26b+26^{2}c+26^{3}d\,.
\]

\end_inset

In general, to encode a group of 
\begin_inset Formula $n$
\end_inset

 letters with numerical values 
\begin_inset Formula $a_{1}$
\end_inset

, 
\begin_inset Formula $a_{2}$
\end_inset

, \SpecialChar ldots
, 
\begin_inset Formula $a_{n}$
\end_inset

, compute
\begin_inset Formula 
\[
m=a_{1}+26a_{2}+26^{2}a_{3}+\cdots+26^{n-1}a_{n}\,.
\]

\end_inset

To 
\emph on
decode
\emph default
 an encoded group 
\begin_inset Formula $m$
\end_inset

 of 
\begin_inset Formula $n$
\end_inset

 characters, do the following 
\begin_inset Formula $n$
\end_inset

 times:
\end_layout

\begin_layout Itemize
determine the remainder of dividing 
\begin_inset Formula $m$
\end_inset

 by 26, and call it 
\begin_inset Formula $a$
\end_inset

;
\end_layout

\begin_layout Itemize
convert 
\begin_inset Formula $a$
\end_inset

 back into a character; and finally,
\end_layout

\begin_layout Itemize
replace 
\begin_inset Formula $m$
\end_inset

 by 
\begin_inset Formula $\nicefrac{m-a}{26}$
\end_inset

.
\end_layout

\begin_layout Standard
You need to write at least two procedures.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 The first procedure, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
encode()
\end_layout

\end_inset

, takes two inputs: an integer 
\begin_inset Formula $n$
\end_inset

, and a list 
\begin_inset Formula $L$
\end_inset

 of characters.
 It converts each character into a number, organizes the numbers into groups
 of 
\begin_inset Formula $n$
\end_inset

 characters, then converts each group into one number using the formula
 above.
 It returns a list 
\begin_inset Formula $M$
\end_inset

 of numbers, one for each group.
 
\series bold
You may assume that 
\begin_inset Formula $n$
\end_inset

 divides the length of 
\begin_inset Formula $L$
\end_inset

.

\series default
 (It's a bit harder if you have to figure out the padding.)
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 The second procedure is interactive.
 It offers the user a text box and a slider.
 In the text box, the user inputs a message.
 In the slider, the user selects from
\begin_inset space ~
\end_inset

2 to 
\begin_inset space ~
\end_inset

6 characters.
 The procedure takes these values and sends them to encode, then prints
 the list numbers that 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
encode()
\end_layout

\end_inset

 returns.
\end_layout

\begin_layout Standard
For extra credit, you can also:
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Implement a third procedure, 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
decode()
\end_layout

\end_inset

, takes two inputs: an integer 
\begin_inset Formula $n$
\end_inset

, and a list 
\begin_inset Formula $M$
\end_inset

 of integers.
 It converts each integer into a group of 
\begin_inset Formula $n$
\end_inset

 integers, then converts each integer into a character.
 For this you may need the Python command 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
chr()
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Cythonize either 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
encode()
\end_layout

\end_inset

 or 
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
decode()
\end_layout

\end_inset

.
 At least one variable's type must be declared.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Continued fractions
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
A continued fraction representation of a number has the following form:
\begin_inset Formula 
\[
a_{0}+\frac{1}{a_{1}+\frac{1}{a_{2}+\frac{1}{a_{3}+\frac{1}{\ddots}}}}\quad.
\]

\end_inset

Continued fractions have a number of fascinating properties, some of which
 you will explore in this lab.
 The following pseudocode will compute a continued fraction up to 
\begin_inset Formula $m$
\end_inset

 places:
\end_layout

\begin_layout Pseudocode

\series bold
algorithm
\series default
 
\emph on
continued_fraction
\end_layout

\begin_layout Pseudocode

\series bold
inputs
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $b$
\end_inset

, a real number
\end_layout

\begin_layout Itemize
\begin_inset Formula $m$
\end_inset

, the number of places to expand the continued fraction
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
outputs
\end_layout

\begin_deeper
\begin_layout Itemize
a list 
\begin_inset Formula $\left(a_{0},a_{1},\ldots,a_{m}\right)$
\end_inset

 listing the entries of the continued fraction
\end_layout

\end_deeper
\begin_layout Pseudocode

\series bold
do
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $L$
\end_inset

 be a list of 
\begin_inset Formula $m+1$
\end_inset

 zeros
\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $i=0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
while
\series default
 
\begin_inset Formula $i\leq m$
\end_inset

 
\series bold
and
\series default
 
\begin_inset Formula $b\neq0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

set 
\begin_inset Formula $L_{i}$
\end_inset

 to the floor of 
\begin_inset Formula $b$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $d=b-L_{i}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
if
\series default
 
\begin_inset Formula $d\neq0$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

replace 
\begin_inset Formula $d$
\end_inset

 by 
\begin_inset Formula $\nicefrac{1}{d}$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

let 
\begin_inset Formula $b=d$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset

add 1 to 
\begin_inset Formula $i$
\end_inset


\end_layout

\begin_layout Pseudocode
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad 
\end_layout

\end_inset


\series bold
return
\series default
 
\begin_inset Formula $L$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 9.
1.
 Implement this pseudocode as a Sage procedure.
 
\emph on
Hint:
\emph default
 Sage's 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
floor()
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Flex Sage Word
status open

\begin_layout Plain Layout
floor()
\end_layout

\end_inset

 procedure could prove useful here.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
2.
 Use your code to compute the continued fraction approximations to at most
 20 places for 
\begin_inset Formula $\nicefrac{12}{17}$
\end_inset

, 
\begin_inset Formula $\nicefrac{17}{12}$
\end_inset

, 
\begin_inset Formula $\nicefrac{4}{15}$
\end_inset

, 
\begin_inset Formula $\nicefrac{15}{4}$
\end_inset

, 
\begin_inset Formula $\nicefrac{729}{1001}$
\end_inset

, and 
\begin_inset Formula $\nicefrac{1001}{729}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
3.
 Write down at least two properties you notice about the continued fractions
 above.
 Explain why these properties make sense.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
4.
 Use your code to compute the continued fraction approximations to at most
 20 places for 
\begin_inset Formula $\sqrt{41}$
\end_inset

, 
\begin_inset Formula $\nicefrac{1}{\sqrt{41}}$
\end_inset

, 
\begin_inset Formula $\nicefrac{1+\sqrt{5}}{2}$
\end_inset

, 
\begin_inset Formula $\nicefrac{2}{1+\sqrt{5}}$
\end_inset

, 
\begin_inset Formula $\nicefrac{1+\sqrt{7}}{\sqrt{3}}$
\end_inset

, and 
\begin_inset Formula $\nicefrac{\sqrt{3}}{1+\sqrt{7}}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
5.
 Write down at least two properties you notice about these continued fractions.
 One of the properties may be the same as with the rational numbers, but
 the other definitely should not.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
6.
 Use your code to compute the continued fraction approximations to at most
 20 places for 
\begin_inset Formula $e$
\end_inset

, 
\begin_inset Formula $\sqrt{e}$
\end_inset

, 
\begin_inset Formula $\sqrt[3]{e}$
\end_inset

, 
\begin_inset Formula $\sqrt[4]{e}$
\end_inset

, 
\begin_inset Formula $\sqrt[5]{e}$
\end_inset

, and 
\begin_inset Formula $\sqrt[6]{e}$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 9.
7.
 Write down any patterns you notice about these continued fractions.
 (It is unlikely you find one that is common to the previous numbers, but
 finding one would well be interesting.)
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "citations"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\end_body
\end_document
